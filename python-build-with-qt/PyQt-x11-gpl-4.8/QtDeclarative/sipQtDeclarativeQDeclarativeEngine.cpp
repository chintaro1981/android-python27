/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:09 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 39 "sipQtDeclarativeQDeclarativeEngine.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 49 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 52 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 55 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativeimageprovider.sip"
#include <qdeclarativeimageprovider.h>
#line 61 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 64 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativenetworkaccessmanagerfactory.sip"
#include <qdeclarativenetworkaccessmanagerfactory.h>
#line 67 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 70 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 82 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 88 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 97 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 100 "sipQtDeclarativeQDeclarativeEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "sipQtDeclarativeQDeclarativeEngine.cpp"


class sipQDeclarativeEngine : public QDeclarativeEngine
{
public:
    sipQDeclarativeEngine(QObject *);
    virtual ~sipQDeclarativeEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeEngine(const sipQDeclarativeEngine &);
    sipQDeclarativeEngine &operator = (const sipQDeclarativeEngine &);

    char sipPyMethods[7];
};

sipQDeclarativeEngine::sipQDeclarativeEngine(QObject *a0): QDeclarativeEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeEngine::~sipQDeclarativeEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeEngine::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeEngine);
}

int sipQDeclarativeEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDeclarativeEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeEngine,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeEngine::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast && sip_QtDeclarative_qt_metacast(sipPySelf,sipType_QDeclarativeEngine,_clname)) ? this : QDeclarativeEngine::qt_metacast(_clname);
}

bool sipQDeclarativeEngine::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQDeclarativeEngine::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQDeclarativeEngine::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQDeclarativeEngine::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQDeclarativeEngine::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDeclarativeEngine::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQDeclarativeEngine::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQDeclarativeEngine::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQDeclarativeEngine::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQDeclarativeEngine::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQDeclarativeEngine::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQDeclarativeEngine::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQDeclarativeEngine::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQDeclarativeEngine::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QDeclarativeEngine_sender(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 363 "sipQtDeclarativeQDeclarativeEngine.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_receivers(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 405 "sipQtDeclarativeQDeclarativeEngine.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QDeclarativeContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_rootContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_clearComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_clearComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearComponentCache();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_clearComponentCache, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_importPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_importPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->importPathList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_importPathList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setImportPathList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setImportPathList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paths,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImportPathList(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setImportPathList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_addImportPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addImportPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addImportPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addImportPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_pluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_pluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->pluginPathList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_pluginPathList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setPluginPathList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setPluginPathList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paths,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPluginPathList(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setPluginPathList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_addPluginPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addPluginPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addPluginPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addPluginPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_importPlugin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_importPlugin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QString * a2;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filePath,
            sipName_uri,
            sipName_errorString,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->importPlugin(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipBuildResult(0,"(bN)",sipRes,a2,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_importPlugin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setNetworkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setNetworkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeNetworkAccessManagerFactory * a0;
        PyObject *a0Keep;
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0Keep, sipType_QDeclarativeNetworkAccessManagerFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessManagerFactory(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setNetworkAccessManagerFactory, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_networkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_networkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QDeclarativeNetworkAccessManagerFactory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManagerFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeNetworkAccessManagerFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_networkAccessManagerFactory, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QNetworkAccessManager *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_networkAccessManager, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_addImageProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addImageProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeImageProvider * a1;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDeclarativeImageProvider, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addImageProvider(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addImageProvider, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_imageProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_imageProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDeclarativeImageProvider *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->imageProvider(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QDeclarativeImageProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_imageProvider, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_removeImageProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_removeImageProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeImageProvider(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_removeImageProvider, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setOfflineStoragePath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setOfflineStoragePath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDeclarativeEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOfflineStoragePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setOfflineStoragePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_offlineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->offlineStoragePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_offlineStoragePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->baseUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_baseUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBaseUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setBaseUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_outputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_outputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->outputWarningsToStandardError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_outputWarningsToStandardError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setOutputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setOutputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputWarningsToStandardError(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setOutputWarningsToStandardError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_contextForObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_contextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QDeclarativeContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDeclarativeEngine::contextForObject(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_contextForObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setContextForObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setContextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        QDeclarativeContext * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QDeclarativeContext, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QDeclarativeEngine::setContextForObject(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setContextForObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_setObjectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setObjectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        QDeclarativeEngine::ObjectOwnership a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E", sipType_QObject, &a0, sipType_QDeclarativeEngine_ObjectOwnership, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QDeclarativeEngine::setObjectOwnership(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setObjectOwnership, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeEngine_objectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_objectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QDeclarativeEngine::ObjectOwnership sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDeclarativeEngine::objectOwnership(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeEngine_ObjectOwnership);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_objectOwnership, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeEngine(void *, const sipTypeDef *);}
static void *cast_QDeclarativeEngine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDeclarativeEngine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDeclarativeEngine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeEngine(void *, int);}
static void release_QDeclarativeEngine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDeclarativeEngine *>(sipCppV);
    else
        delete reinterpret_cast<QDeclarativeEngine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeEngine(sipSimpleWrapper *);}
static void dealloc_QDeclarativeEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDeclarativeEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDeclarativeEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDeclarativeEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeEngine *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeEngine(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeEngine[] = {{133, 0, 1}};


static PyMethodDef methods_QDeclarativeEngine[] = {
    {SIP_MLNAME_CAST(sipName_addImageProvider), (PyCFunction)meth_QDeclarativeEngine_addImageProvider, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addImportPath), (PyCFunction)meth_QDeclarativeEngine_addImportPath, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addPluginPath), (PyCFunction)meth_QDeclarativeEngine_addPluginPath, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QDeclarativeEngine_baseUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QDeclarativeEngine_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearComponentCache), meth_QDeclarativeEngine_clearComponentCache, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDeclarativeEngine_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextForObject), meth_QDeclarativeEngine_contextForObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QDeclarativeEngine_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDeclarativeEngine_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_imageProvider), (PyCFunction)meth_QDeclarativeEngine_imageProvider, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_importPathList), meth_QDeclarativeEngine_importPathList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_importPlugin), (PyCFunction)meth_QDeclarativeEngine_importPlugin, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QDeclarativeEngine_networkAccessManager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessManagerFactory), meth_QDeclarativeEngine_networkAccessManagerFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_objectOwnership), meth_QDeclarativeEngine_objectOwnership, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QDeclarativeEngine_offlineStoragePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_outputWarningsToStandardError), meth_QDeclarativeEngine_outputWarningsToStandardError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pluginPathList), meth_QDeclarativeEngine_pluginPathList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QDeclarativeEngine_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeImageProvider), (PyCFunction)meth_QDeclarativeEngine_removeImageProvider, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QDeclarativeEngine_rootContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QDeclarativeEngine_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QDeclarativeEngine_setBaseUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContextForObject), meth_QDeclarativeEngine_setContextForObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setImportPathList), (PyCFunction)meth_QDeclarativeEngine_setImportPathList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManagerFactory), meth_QDeclarativeEngine_setNetworkAccessManagerFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setObjectOwnership), meth_QDeclarativeEngine_setObjectOwnership, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), (PyCFunction)meth_QDeclarativeEngine_setOfflineStoragePath, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutputWarningsToStandardError), meth_QDeclarativeEngine_setOutputWarningsToStandardError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPluginPathList), (PyCFunction)meth_QDeclarativeEngine_setPluginPathList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QDeclarativeEngine_timerEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDeclarativeEngine[] = {
    {sipName_CppOwnership, QDeclarativeEngine::CppOwnership, 4},
    {sipName_JavaScriptOwnership, QDeclarativeEngine::JavaScriptOwnership, 4},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QDeclarativeEngine[] = {
    {"warnings(QList<QDeclarativeError>)", 0, 0},
    {"quit()", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeEngine,
        {0}
    },
    {
        sipNameNr_QDeclarativeEngine,
        {0, 0, 1},
        32, methods_QDeclarativeEngine,
        2, enummembers_QDeclarativeEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDeclarativeEngine,
    0,
    init_QDeclarativeEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeEngine,
    0,
    0,
    0,
    release_QDeclarativeEngine,
    cast_QDeclarativeEngine,
    0,
    0,
    0
},
    &QDeclarativeEngine::staticMetaObject,
    0,
    pyqt4_signals_QDeclarativeEngine
};
