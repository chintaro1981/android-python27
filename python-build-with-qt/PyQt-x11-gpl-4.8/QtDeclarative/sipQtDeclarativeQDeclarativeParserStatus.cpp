/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:09 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativeparserstatus.sip"
#include <qdeclarativeparserstatus.h>
#line 39 "sipQtDeclarativeQDeclarativeParserStatus.cpp"



class sipQDeclarativeParserStatus : public QDeclarativeParserStatus
{
public:
    sipQDeclarativeParserStatus();
    sipQDeclarativeParserStatus(const QDeclarativeParserStatus&);
    virtual ~sipQDeclarativeParserStatus();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void classBegin();
    void componentComplete();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeParserStatus(const sipQDeclarativeParserStatus &);
    sipQDeclarativeParserStatus &operator = (const sipQDeclarativeParserStatus &);

    char sipPyMethods[2];
};

sipQDeclarativeParserStatus::sipQDeclarativeParserStatus(): QDeclarativeParserStatus(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeParserStatus::sipQDeclarativeParserStatus(const QDeclarativeParserStatus& a0): QDeclarativeParserStatus(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeParserStatus::~sipQDeclarativeParserStatus()
{
    sipCommonDtor(sipPySelf);
}

void sipQDeclarativeParserStatus::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QDeclarativeParserStatus,sipName_classBegin);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQDeclarativeParserStatus::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QDeclarativeParserStatus,sipName_componentComplete);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtDeclarative_QtCore->em_virthandlers[11]))(sipGILState,meth);
}


extern "C" {static PyObject *meth_QDeclarativeParserStatus_classBegin(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeParserStatus_classBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDeclarativeParserStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeParserStatus, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDeclarativeParserStatus, sipName_classBegin);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->classBegin();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeParserStatus, sipName_classBegin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDeclarativeParserStatus_componentComplete(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeParserStatus_componentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDeclarativeParserStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeParserStatus, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDeclarativeParserStatus, sipName_componentComplete);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->componentComplete();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeParserStatus, sipName_componentComplete, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeParserStatus(void *, const sipTypeDef *);}
static void *cast_QDeclarativeParserStatus(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDeclarativeParserStatus)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeParserStatus(void *, int);}
static void release_QDeclarativeParserStatus(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDeclarativeParserStatus *>(sipCppV);
    else
        delete reinterpret_cast<QDeclarativeParserStatus *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeParserStatus(sipSimpleWrapper *);}
static void dealloc_QDeclarativeParserStatus(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDeclarativeParserStatus *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeParserStatus(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDeclarativeParserStatus(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDeclarativeParserStatus(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDeclarativeParserStatus *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeParserStatus();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QDeclarativeParserStatus * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDeclarativeParserStatus, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeParserStatus(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDeclarativeParserStatus[] = {
    {SIP_MLNAME_CAST(sipName_classBegin), meth_QDeclarativeParserStatus_classBegin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_componentComplete), meth_QDeclarativeParserStatus_componentComplete, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeParserStatus = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeParserStatus,
        {0}
    },
    {
        sipNameNr_QDeclarativeParserStatus,
        {0, 0, 1},
        2, methods_QDeclarativeParserStatus,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QDeclarativeParserStatus,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeParserStatus,
    0,
    0,
    0,
    release_QDeclarativeParserStatus,
    cast_QDeclarativeParserStatus,
    0,
    0,
    0
},
    0,
    0,
    0
};
