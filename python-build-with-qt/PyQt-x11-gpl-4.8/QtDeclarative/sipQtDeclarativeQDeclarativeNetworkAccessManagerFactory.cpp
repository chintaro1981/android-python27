/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:09 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDeclarative/qdeclarativenetworkaccessmanagerfactory.sip"
#include <qdeclarativenetworkaccessmanagerfactory.h>
#line 39 "sipQtDeclarativeQDeclarativeNetworkAccessManagerFactory.cpp"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 43 "sipQtDeclarativeQDeclarativeNetworkAccessManagerFactory.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtDeclarativeQDeclarativeNetworkAccessManagerFactory.cpp"


class sipQDeclarativeNetworkAccessManagerFactory : public QDeclarativeNetworkAccessManagerFactory
{
public:
    sipQDeclarativeNetworkAccessManagerFactory();
    sipQDeclarativeNetworkAccessManagerFactory(const QDeclarativeNetworkAccessManagerFactory&);
    virtual ~sipQDeclarativeNetworkAccessManagerFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QNetworkAccessManager * create(QObject *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeNetworkAccessManagerFactory(const sipQDeclarativeNetworkAccessManagerFactory &);
    sipQDeclarativeNetworkAccessManagerFactory &operator = (const sipQDeclarativeNetworkAccessManagerFactory &);

    char sipPyMethods[1];
};

sipQDeclarativeNetworkAccessManagerFactory::sipQDeclarativeNetworkAccessManagerFactory(): QDeclarativeNetworkAccessManagerFactory(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeNetworkAccessManagerFactory::sipQDeclarativeNetworkAccessManagerFactory(const QDeclarativeNetworkAccessManagerFactory& a0): QDeclarativeNetworkAccessManagerFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeNetworkAccessManagerFactory::~sipQDeclarativeNetworkAccessManagerFactory()
{
    sipCommonDtor(sipPySelf);
}

QNetworkAccessManager * sipQDeclarativeNetworkAccessManagerFactory::create(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QDeclarativeNetworkAccessManagerFactory,sipName_create);

    if (!meth)
        return 0;

    extern QNetworkAccessManager * sipVH_QtDeclarative_1(sip_gilstate_t,PyObject *,QObject *);

    return sipVH_QtDeclarative_1(sipGILState,meth,a0);
}


extern "C" {static PyObject *meth_QDeclarativeNetworkAccessManagerFactory_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeNetworkAccessManagerFactory_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QObject * a0;
        sipWrapper *sipOwner = 0;
        QDeclarativeNetworkAccessManagerFactory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH", &sipSelf, sipType_QDeclarativeNetworkAccessManagerFactory, &sipCpp, sipType_QObject, &a0, &sipOwner))
        {
            QNetworkAccessManager *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDeclarativeNetworkAccessManagerFactory, sipName_create);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->create(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkAccessManager,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeNetworkAccessManagerFactory, sipName_create, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDeclarativeNetworkAccessManagerFactory(void *, const sipTypeDef *);}
static void *cast_QDeclarativeNetworkAccessManagerFactory(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDeclarativeNetworkAccessManagerFactory)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeNetworkAccessManagerFactory(void *, int);}
static void release_QDeclarativeNetworkAccessManagerFactory(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDeclarativeNetworkAccessManagerFactory *>(sipCppV);
    else
        delete reinterpret_cast<QDeclarativeNetworkAccessManagerFactory *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeNetworkAccessManagerFactory(sipSimpleWrapper *);}
static void dealloc_QDeclarativeNetworkAccessManagerFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDeclarativeNetworkAccessManagerFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDeclarativeNetworkAccessManagerFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDeclarativeNetworkAccessManagerFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDeclarativeNetworkAccessManagerFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDeclarativeNetworkAccessManagerFactory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeNetworkAccessManagerFactory();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QDeclarativeNetworkAccessManagerFactory * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDeclarativeNetworkAccessManagerFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeNetworkAccessManagerFactory(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDeclarativeNetworkAccessManagerFactory[] = {
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QDeclarativeNetworkAccessManagerFactory_create, METH_VARARGS|METH_KEYWORDS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeNetworkAccessManagerFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeNetworkAccessManagerFactory,
        {0}
    },
    {
        sipNameNr_QDeclarativeNetworkAccessManagerFactory,
        {0, 0, 1},
        1, methods_QDeclarativeNetworkAccessManagerFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QDeclarativeNetworkAccessManagerFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeNetworkAccessManagerFactory,
    0,
    0,
    0,
    release_QDeclarativeNetworkAccessManagerFactory,
    cast_QDeclarativeNetworkAccessManagerFactory,
    0,
    0,
    0
},
    0,
    0,
    0
};
