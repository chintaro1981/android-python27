/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 39 "sipQtCoreQMetaObject.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQMetaObject.cpp"
#line 164 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 46 "sipQtCoreQMetaObject.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 49 "sipQtCoreQMetaObject.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtCoreQMetaObject.cpp"
#line 181 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 55 "sipQtCoreQMetaObject.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 58 "sipQtCoreQMetaObject.cpp"
#line 230 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 61 "sipQtCoreQMetaObject.cpp"
#line 180 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 64 "sipQtCoreQMetaObject.cpp"
#line 159 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 67 "sipQtCoreQMetaObject.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
// Raise an exception when QMetaObject::invokeMethod() returns false.
static void qtcore_invokeMethod_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaObject.invokeMethod() call failed");
}
#line 74 "sipQtCoreQMetaObject.cpp"


extern "C" {static PyObject *meth_QMetaObject_className(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_className(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->className();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_className, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_superClass(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_superClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const QMetaObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->superClass();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QMetaObject *>(sipRes),sipType_QMetaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_superClass, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_userProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_userProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            QMetaProperty *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaProperty(sipCpp->userProperty());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_userProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_methodOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->methodOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->enumeratorOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_propertyOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_classInfoOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->classInfoOffset();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_methodCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->methodCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_enumeratorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->enumeratorCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_classInfoCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->classInfoCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfMethod(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfMethod(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfMethod, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfSignal(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfSignal(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSignal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfSlot(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfSlot(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSlot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfEnumerator(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfEnumerator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfProperty(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfClassInfo(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfClassInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_method(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaMethod *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaMethod(sipCpp->method(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_method, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_enumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaEnum *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaEnum(sipCpp->enumerator(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaEnum,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumerator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_property(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaProperty *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaProperty(sipCpp->property(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_property, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_classInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaClassInfo *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaClassInfo(sipCpp->classInfo(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaClassInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        const char * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ss", &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMetaObject::checkConnectArgs(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_checkConnectArgs, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        PyObject *a0Wrapper;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8", &a0Wrapper, sipType_QObject, &a0))
        {
#line 73 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
        qpycore_qmetaobject_connectslotsbyname(a0, a0Wrapper);
#line 701 "sipQtCoreQMetaObject.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_connectSlotsByName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QMetaObject::normalizedSignature(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedSignature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QMetaObject::normalizedType(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        const char * a1;
        Qt::ConnectionType a2;
        QGenericReturnArgument * a3;
        PyObject *a3Wrapper;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument * a12 = &a12def;
        QGenericArgument a13def = QGenericArgument(0,0);
        QGenericArgument * a13 = &a13def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8sE@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_Qt_ConnectionType, &a2, &a3Wrapper, sipType_QGenericReturnArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12, sipType_QGenericArgument, &a13))
        {
            PyObject * sipRes = 0;

#line 82 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12,*a13);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a3Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 834 "sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        const char * a1;
        QGenericReturnArgument * a2;
        PyObject *a2Wrapper;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument * a12 = &a12def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8s@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, &a2Wrapper, sipType_QGenericReturnArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = 0;

#line 97 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 898 "sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        const char * a1;
        Qt::ConnectionType a2;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument * a12 = &a12def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8sE|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_Qt_ConnectionType, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = 0;

#line 112 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 964 "sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        const char * a1;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument * a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8s|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = 0;

#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 1028 "sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_invokeMethod, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_constructorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->constructorCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructorCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfConstructor(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfConstructor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_constructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaMethod *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMetaMethod(sipCpp->constructor(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaObject_newInstance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_newInstance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGenericArgument a0def = QGenericArgument(0,0);
        QGenericArgument * a0 = &a0def;
        QGenericArgument a1def = QGenericArgument(0,0);
        QGenericArgument * a1 = &a1def;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument * a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QMetaObject *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaObject, &sipCpp, sipType_QGenericArgument, &a0, sipType_QGenericArgument, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9))
        {
            QObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->newInstance(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_newInstance, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMetaObject(void *, const sipTypeDef *);}
static void *cast_QMetaObject(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMetaObject)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaObject(void *, int);}
static void release_QMetaObject(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QMetaObject *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QMetaObject(void *, SIP_SSIZE_T, const void *);}
static void assign_QMetaObject(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMetaObject *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMetaObject *>(sipSrc);
}


extern "C" {static void *array_QMetaObject(SIP_SSIZE_T);}
static void *array_QMetaObject(SIP_SSIZE_T sipNrElem)
{
    return new QMetaObject[sipNrElem];
}


extern "C" {static void *copy_QMetaObject(const void *, SIP_SSIZE_T);}
static void *copy_QMetaObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMetaObject(reinterpret_cast<const QMetaObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaObject(sipSimpleWrapper *);}
static void dealloc_QMetaObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMetaObject(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QMetaObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QMetaObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMetaObject *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMetaObject();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QMetaObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMetaObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMetaObject(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMetaObject[] = {
    {SIP_MLNAME_CAST(sipName_checkConnectArgs), meth_QMetaObject_checkConnectArgs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_classInfo), meth_QMetaObject_classInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_classInfoCount), meth_QMetaObject_classInfoCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_classInfoOffset), meth_QMetaObject_classInfoOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_className), meth_QMetaObject_className, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectSlotsByName), meth_QMetaObject_connectSlotsByName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_constructor), meth_QMetaObject_constructor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_constructorCount), meth_QMetaObject_constructorCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enumerator), meth_QMetaObject_enumerator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enumeratorCount), meth_QMetaObject_enumeratorCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enumeratorOffset), meth_QMetaObject_enumeratorOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfClassInfo), meth_QMetaObject_indexOfClassInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfConstructor), meth_QMetaObject_indexOfConstructor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfEnumerator), meth_QMetaObject_indexOfEnumerator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfMethod), meth_QMetaObject_indexOfMethod, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfProperty), meth_QMetaObject_indexOfProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfSignal), meth_QMetaObject_indexOfSignal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfSlot), meth_QMetaObject_indexOfSlot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invokeMethod), (PyCFunction)meth_QMetaObject_invokeMethod, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_method), meth_QMetaObject_method, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_methodCount), meth_QMetaObject_methodCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_methodOffset), meth_QMetaObject_methodOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newInstance), (PyCFunction)meth_QMetaObject_newInstance, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_normalizedSignature), meth_QMetaObject_normalizedSignature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalizedType), meth_QMetaObject_normalizedType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_property), meth_QMetaObject_property, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QMetaObject_propertyCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyOffset), meth_QMetaObject_propertyOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_superClass), meth_QMetaObject_superClass, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userProperty), meth_QMetaObject_userProperty, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QMetaObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QMetaObject,
        {0}
    },
    {
        sipNameNr_QMetaObject,
        {0, 0, 1},
        30, methods_QMetaObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QMetaObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMetaObject,
    assign_QMetaObject,
    array_QMetaObject,
    copy_QMetaObject,
    release_QMetaObject,
    cast_QMetaObject,
    0,
    0,
    0
},
    0,
    0,
    0
};
