/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 39 "sipQtCoreQDir.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQDir.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 46 "sipQtCoreQDir.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 49 "sipQtCoreQDir.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 52 "sipQtCoreQDir.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 55 "sipQtCoreQDir.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtCoreQDir.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 61 "sipQtCoreQDir.cpp"


extern "C" {static PyObject *meth_QDir_setPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_path(PyObject *, PyObject *);}
static PyObject *meth_QDir_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_path, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->absolutePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_absolutePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->canonicalPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_canonicalPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_addResourceSearchPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_addResourceSearchPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QDir::addResourceSearchPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_addResourceSearchPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_dirName(PyObject *, PyObject *);}
static PyObject *meth_QDir_dirName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dirName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_dirName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_filePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->filePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_filePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->absoluteFilePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_absoluteFilePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_relativeFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_relativeFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->relativeFilePath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_relativeFilePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_convertSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_convertSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::convertSeparators(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_convertSeparators, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_cd(PyObject *, PyObject *);}
static PyObject *meth_QDir_cd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cd(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cd, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_cdUp(PyObject *, PyObject *);}
static PyObject *meth_QDir_cdUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cdUp();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cdUp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFilters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setNameFilters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_filter(PyObject *, PyObject *);}
static PyObject *meth_QDir_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QDir::Filters *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters(sipCpp->filter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_filter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QDir_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setFilter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_sorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_sorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            QDir::SortFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::SortFlags(sipCpp->sorting());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_sorting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_setSorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::SortFlags * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_SortFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSorting(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSorting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_count(PyObject *, PyObject *);}
static PyObject *meth_QDir_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QDir::nameFiltersFromString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFiltersFromString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_entryList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters a0def = QDir::NoFilter;
        QDir::Filters * a0 = &a0def;
        int a0State = 0;
        QDir::SortFlags a1def = QDir::NoSort;
        QDir::SortFlags * a1 = &a1def;
        int a1State = 0;
        QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->entryList(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QStringList * a0;
        int a0State = 0;
        QDir::Filters a1def = QDir::NoFilter;
        QDir::Filters * a1 = &a1def;
        int a1State = 0;
        QDir::SortFlags a2def = QDir::NoSort;
        QDir::SortFlags * a2 = &a2def;
        int a2State = 0;
        QDir *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->entryList(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_entryInfoList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryInfoList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters a0def = QDir::NoFilter;
        QDir::Filters * a0 = &a0def;
        int a0State = 0;
        QDir::SortFlags a1def = QDir::NoSort;
        QDir::SortFlags * a1 = &a1def;
        int a1State = 0;
        QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
            QFileInfoList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfoList(sipCpp->entryInfoList(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,NULL);
        }
    }

    {
        const QStringList * a0;
        int a0State = 0;
        QDir::Filters a1def = QDir::NoFilter;
        QDir::Filters * a1 = &a1def;
        int a1State = 0;
        QDir::SortFlags a2def = QDir::NoSort;
        QDir::SortFlags * a2 = &a2def;
        int a2State = 0;
        QDir *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
            QFileInfoList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfoList(sipCpp->entryInfoList(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryInfoList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkdir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmdir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmdir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_mkpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkpath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkpath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_rmpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmpath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmpath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QDir_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isReadable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_exists(PyObject *, PyObject *);}
static PyObject *meth_QDir_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_exists, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRoot();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRoot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDir::isRelativePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelativePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDir::isAbsolutePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolutePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelative, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->makeAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_makeAbsolute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_remove(PyObject *, PyObject *);}
static PyObject *meth_QDir_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_remove, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_rename(PyObject *, PyObject *);}
static PyObject *meth_QDir_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rename, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_refresh(PyObject *, PyObject *);}
static PyObject *meth_QDir_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->refresh();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_refresh, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_drives(PyObject *, PyObject *);}
static PyObject *meth_QDir_drives(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFileInfoList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfoList(QDir::drives());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_drives, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_separator(PyObject *, PyObject *);}
static PyObject *meth_QDir_separator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(QDir::separator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_separator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *);}
static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDir::setCurrent(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setCurrent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_current(PyObject *, PyObject *);}
static PyObject *meth_QDir_current(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(QDir::current());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_current, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_currentPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_currentPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::currentPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_currentPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_home(PyObject *, PyObject *);}
static PyObject *meth_QDir_home(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(QDir::home());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_home, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_homePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_homePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::homePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_homePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_root(PyObject *, PyObject *);}
static PyObject *meth_QDir_root(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(QDir::root());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_root, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rootPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::rootPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rootPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_temp(PyObject *, PyObject *);}
static PyObject *meth_QDir_temp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(QDir::temp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_temp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_tempPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_tempPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::tempPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_tempPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_match(PyObject *, PyObject *);}
static PyObject *meth_QDir_match(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QStringList,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDir::match(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDir::match(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_match, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::cleanPath(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cleanPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::toNativeSeparators(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_toNativeSeparators, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QDir::fromNativeSeparators(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_fromNativeSeparators, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QDir::setSearchPaths(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSearchPaths, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QDir::addSearchPath(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_addSearchPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QDir::searchPaths(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_searchPaths, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QDir___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDir___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDir *sipCpp = reinterpret_cast<QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDir * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QDir::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QDir,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDir___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDir___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDir *sipCpp = reinterpret_cast<QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDir * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QDir::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QDir,sipSelf,sipArg);
}


extern "C" {static int slot_QDir___contains__(PyObject *,PyObject *);}
static int slot_QDir___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QDir *sipCpp = reinterpret_cast<QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            int sipRes = 0;

#line 146 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
        sipRes = bool(sipCpp->entryList().contains(*a0));
#line 1817 "sipQtCoreQDir.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName___contains__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QDir___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QDir___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QDir *sipCpp = reinterpret_cast<QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QString *sipRes = 0;
            int sipIsErr = 0;

#line 116 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QString(sipCpp->operator[]((int)idx));
#line 1856 "sipQtCoreQDir.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            QStringList *sipRes = 0;
            int sipIsErr = 0;

#line 126 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            sipRes = new QStringList();
        
            for (i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 1890 "sipQtCoreQDir.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static SIP_SSIZE_T slot_QDir___len__(PyObject *);}
static SIP_SSIZE_T slot_QDir___len__(PyObject *sipSelf)
{
    QDir *sipCpp = reinterpret_cast<QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1921 "sipQtCoreQDir.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDir(void *, const sipTypeDef *);}
static void *cast_QDir(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDir)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDir(void *, int);}
static void release_QDir(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDir *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDir(void *, SIP_SSIZE_T, const void *);}
static void assign_QDir(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDir *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDir *>(sipSrc);
}


extern "C" {static void *array_QDir(SIP_SSIZE_T);}
static void *array_QDir(SIP_SSIZE_T sipNrElem)
{
    return new QDir[sipNrElem];
}


extern "C" {static void *copy_QDir(const void *, SIP_SSIZE_T);}
static void *copy_QDir(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDir(reinterpret_cast<const QDir *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDir(sipSimpleWrapper *);}
static void dealloc_QDir(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDir(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QDir(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDir(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDir *sipCpp = 0;

    {
        const QDir * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDir, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDir(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_path,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDir(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDir::SortFlags a2def = QDir::SortFlags(QDir::Name|QDir::IgnoreCase);
        QDir::SortFlags * a2 = &a2def;
        int a2State = 0;
        QDir::Filters a3def = QDir::TypeMask;
        QDir::Filters * a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_sort,
            sipName_filters,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State, sipType_QDir_Filters, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDir(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);
            sipReleaseType(a3,sipType_QDir_Filters,a3State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDir[] = {
    {(void *)slot_QDir___ne__, ne_slot},
    {(void *)slot_QDir___eq__, eq_slot},
    {(void *)slot_QDir___contains__, contains_slot},
    {(void *)slot_QDir___getitem__, getitem_slot},
    {(void *)slot_QDir___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDir[] = {
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QDir_absoluteFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QDir_absolutePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addResourceSearchPath), meth_QDir_addResourceSearchPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addSearchPath), meth_QDir_addSearchPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QDir_canonicalPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cd), meth_QDir_cd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cdUp), meth_QDir_cdUp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cleanPath), meth_QDir_cleanPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_convertSeparators), meth_QDir_convertSeparators, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QDir_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_current), meth_QDir_current, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentPath), meth_QDir_currentPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dirName), meth_QDir_dirName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drives), meth_QDir_drives, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_entryInfoList), (PyCFunction)meth_QDir_entryInfoList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_entryList), (PyCFunction)meth_QDir_entryList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_exists), meth_QDir_exists, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QDir_filePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filter), meth_QDir_filter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromNativeSeparators), meth_QDir_fromNativeSeparators, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_home), meth_QDir_home, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_homePath), meth_QDir_homePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QDir_isAbsolute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAbsolutePath), meth_QDir_isAbsolutePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QDir_isReadable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QDir_isRelative, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRelativePath), meth_QDir_isRelativePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QDir_isRoot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QDir_makeAbsolute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_match), meth_QDir_match, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QDir_mkdir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mkpath), meth_QDir_mkpath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QDir_nameFilters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nameFiltersFromString), meth_QDir_nameFiltersFromString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_path), meth_QDir_path, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QDir_refresh, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_relativeFilePath), meth_QDir_relativeFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QDir_remove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rename), meth_QDir_rename, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QDir_rmdir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rmpath), meth_QDir_rmpath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_root), meth_QDir_root, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QDir_rootPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_searchPaths), meth_QDir_searchPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_separator), meth_QDir_separator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrent), meth_QDir_setCurrent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QDir_setFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QDir_setNameFilters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QDir_setPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSearchPaths), meth_QDir_setSearchPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSorting), meth_QDir_setSorting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sorting), meth_QDir_sorting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_temp), meth_QDir_temp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tempPath), meth_QDir_tempPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toNativeSeparators), meth_QDir_toNativeSeparators, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDir[] = {
    {sipName_AccessMask, QDir::AccessMask, 46},
    {sipName_AllDirs, QDir::AllDirs, 46},
    {sipName_AllEntries, QDir::AllEntries, 46},
    {sipName_CaseSensitive, QDir::CaseSensitive, 46},
    {sipName_Dirs, QDir::Dirs, 46},
    {sipName_DirsFirst, QDir::DirsFirst, 48},
    {sipName_DirsLast, QDir::DirsLast, 48},
    {sipName_Drives, QDir::Drives, 46},
    {sipName_Executable, QDir::Executable, 46},
    {sipName_Files, QDir::Files, 46},
    {sipName_Hidden, QDir::Hidden, 46},
    {sipName_IgnoreCase, QDir::IgnoreCase, 48},
    {sipName_LocaleAware, QDir::LocaleAware, 48},
    {sipName_Modified, QDir::Modified, 46},
    {sipName_Name, QDir::Name, 48},
    {sipName_NoDot, QDir::NoDot, 46},
    {sipName_NoDotAndDotDot, QDir::NoDotAndDotDot, 46},
    {sipName_NoDotDot, QDir::NoDotDot, 46},
    {sipName_NoFilter, QDir::NoFilter, 46},
    {sipName_NoSort, QDir::NoSort, 48},
    {sipName_NoSymLinks, QDir::NoSymLinks, 46},
    {sipName_PermissionMask, QDir::PermissionMask, 46},
    {sipName_Readable, QDir::Readable, 46},
    {sipName_Reversed, QDir::Reversed, 48},
    {sipName_Size, QDir::Size, 48},
    {sipName_SortByMask, QDir::SortByMask, 48},
    {sipName_System, QDir::System, 46},
    {sipName_Time, QDir::Time, 48},
    {sipName_Type, QDir::Type, 48},
    {sipName_TypeMask, QDir::TypeMask, 46},
    {sipName_Unsorted, QDir::Unsorted, 48},
    {sipName_Writable, QDir::Writable, 46},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QDir = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDir,
        {0}
    },
    {
        sipNameNr_QDir,
        {0, 0, 1},
        55, methods_QDir,
        32, enummembers_QDir,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDir,
    init_QDir,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDir,
    assign_QDir,
    array_QDir,
    copy_QDir,
    release_QDir,
    cast_QDir,
    0,
    0,
    0
},
    0,
    0,
    0
};
