/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 39 "sipQtCoreQLineF.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 43 "sipQtCoreQLineF.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 46 "sipQtCoreQLineF.cpp"


extern "C" {static PyObject *meth_QLineF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QLineF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_length(PyObject *, PyObject *);}
static PyObject *meth_QLineF_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_length, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_unitVector(PyObject *, PyObject *);}
static PyObject *meth_QLineF_unitVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->unitVector());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_unitVector, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_intersect(PyObject *, PyObject *);}
static PyObject *meth_QLineF_intersect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;
        QPointF * a1;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QLineF, &sipCpp, sipType_QLineF, &a0, sipType_QPointF, &a1))
        {
            QLineF::IntersectType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->intersect(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLineF_IntersectType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_intersect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_angle(PyObject *, PyObject *);}
static PyObject *meth_QLineF_angle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QLineF, &a0))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->angle(*a0);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->angle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_angle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_x1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_x1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x1();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_x1, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_y1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_y1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y1();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_y1, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_x2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_x2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x2();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_x2, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_y2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_y2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y2();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_y2, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_p1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_p1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->p1());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_p1, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_p2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_p2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->p2());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_p2, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_dx(PyObject *, PyObject *);}
static PyObject *meth_QLineF_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dx();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_dx, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_dy(PyObject *, PyObject *);}
static PyObject *meth_QLineF_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dy();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_dy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_normalVector(PyObject *, PyObject *);}
static PyObject *meth_QLineF_normalVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->normalVector());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_normalVector, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_translate(PyObject *, PyObject *);}
static PyObject *meth_QLineF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setLength(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLength(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setLength, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_pointAt(PyObject *, PyObject *);}
static PyObject *meth_QLineF_pointAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->pointAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_pointAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_toLine(PyObject *, PyObject *);}
static PyObject *meth_QLineF_toLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            QLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLine(sipCpp->toLine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_toLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_fromPolar(PyObject *, PyObject *);}
static PyObject *meth_QLineF_fromPolar(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(QLineF::fromPolar(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_fromPolar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setAngle(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setAngle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_angleTo(PyObject *, PyObject *);}
static PyObject *meth_QLineF_angleTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QLineF, &a0))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->angleTo(*a0);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_angleTo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_translated(PyObject *, PyObject *);}
static PyObject *meth_QLineF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->translated(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->translated(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_translated, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setP1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setP1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setP1(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setP1, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setP2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setP2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setP2(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setP2, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setPoints(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        const QPointF * a1;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPoints(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setPoints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLineF_setLine(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLine(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setLine, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QLineF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLineF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLineF *sipCpp = reinterpret_cast<QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLineF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLineF::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QLineF,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLineF___repr__(PyObject *);}
static PyObject *slot_QLineF___repr__(PyObject *sipSelf)
{
    QLineF *sipCpp = reinterpret_cast<QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 139 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
        PyObject *x1 = PyFloat_FromDouble(sipCpp->x1());
        PyObject *y1 = PyFloat_FromDouble(sipCpp->y1());
        PyObject *x2 = PyFloat_FromDouble(sipCpp->x2());
        PyObject *y2 = PyFloat_FromDouble(sipCpp->y2());
        
        if (x1 && y1 && x2 && y2)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QLineF(%R, %R, %R, %R)", x1, y1, x2, y2);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QLineF(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x1));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y1));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x2));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y2));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x1);
        Py_XDECREF(y1);
        Py_XDECREF(x2);
        Py_XDECREF(y2);
#line 884 "sipQtCoreQLineF.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QLineF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLineF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLineF *sipCpp = reinterpret_cast<QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLineF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLineF::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QLineF,sipSelf,sipArg);
}


extern "C" {static int slot_QLineF___bool__(PyObject *);}
static int slot_QLineF___bool__(PyObject *sipSelf)
{
    QLineF *sipCpp = reinterpret_cast<QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 126 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
        sipRes = !sipCpp->isNull();
#line 941 "sipQtCoreQLineF.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLineF(void *, const sipTypeDef *);}
static void *cast_QLineF(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QLineF)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLineF(void *, int);}
static void release_QLineF(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QLineF *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QLineF(void *);}
static PyObject *pickle_QLineF(void *sipCppV)
{
    QLineF *sipCpp = reinterpret_cast<QLineF *>(sipCppV);
    PyObject *sipRes;

#line 111 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
    sipRes = Py_BuildValue((char *)"dddd", sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
#line 980 "sipQtCoreQLineF.cpp"

    return sipRes;
}


extern "C" {static void assign_QLineF(void *, SIP_SSIZE_T, const void *);}
static void assign_QLineF(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLineF *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLineF *>(sipSrc);
}


extern "C" {static void *array_QLineF(SIP_SSIZE_T);}
static void *array_QLineF(SIP_SSIZE_T sipNrElem)
{
    return new QLineF[sipNrElem];
}


extern "C" {static void *copy_QLineF(const void *, SIP_SSIZE_T);}
static void *copy_QLineF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLineF(reinterpret_cast<const QLineF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLineF(sipSimpleWrapper *);}
static void dealloc_QLineF(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLineF(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QLineF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QLineF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLineF *sipCpp = 0;

    {
        const QLine * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLine, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLineF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLineF();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPointF * a0;
        const QPointF * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_QPointF, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLineF(*a0,*a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLineF(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QLineF * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLineF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLineF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLineF[] = {
    {(void *)slot_QLineF___eq__, eq_slot},
    {(void *)slot_QLineF___repr__, repr_slot},
    {(void *)slot_QLineF___ne__, ne_slot},
    {(void *)slot_QLineF___bool__, bool_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLineF[] = {
    {SIP_MLNAME_CAST(sipName_angle), meth_QLineF_angle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_angleTo), meth_QLineF_angleTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dx), meth_QLineF_dx, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dy), meth_QLineF_dy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromPolar), meth_QLineF_fromPolar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersect), meth_QLineF_intersect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QLineF_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_QLineF_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalVector), meth_QLineF_normalVector, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_p1), meth_QLineF_p1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_p2), meth_QLineF_p2, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pointAt), meth_QLineF_pointAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAngle), meth_QLineF_setAngle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLength), meth_QLineF_setLength, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLine), meth_QLineF_setLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setP1), meth_QLineF_setP1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setP2), meth_QLineF_setP2, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_QLineF_setPoints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLine), meth_QLineF_toLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QLineF_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translated), meth_QLineF_translated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unitVector), meth_QLineF_unitVector, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x1), meth_QLineF_x1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x2), meth_QLineF_x2, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y1), meth_QLineF_y1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y2), meth_QLineF_y2, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QLineF[] = {
    {sipName_BoundedIntersection, QLineF::BoundedIntersection, 91},
    {sipName_NoIntersection, QLineF::NoIntersection, 91},
    {sipName_UnboundedIntersection, QLineF::UnboundedIntersection, 91},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QLineF = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLineF,
        {0}
    },
    {
        sipNameNr_QLineF,
        {0, 0, 1},
        26, methods_QLineF,
        3, enummembers_QLineF,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLineF,
    init_QLineF,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLineF,
    assign_QLineF,
    array_QLineF,
    copy_QLineF,
    release_QLineF,
    cast_QLineF,
    0,
    0,
    pickle_QLineF
},
    0,
    0,
    0
};
