/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbuffer.sip"
#include <qbuffer.h>
#line 39 "sipQtCoreQBuffer.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQBuffer.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQBuffer.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 49 "sipQtCoreQBuffer.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtCoreQBuffer.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtCoreQBuffer.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtCoreQBuffer.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtCoreQBuffer.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtCoreQBuffer.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtCoreQBuffer.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtCoreQBuffer.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtCoreQBuffer.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 76 "sipQtCoreQBuffer.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79 "sipQtCoreQBuffer.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82 "sipQtCoreQBuffer.cpp"


class sipQBuffer : public QBuffer
{
public:
    sipQBuffer(QObject *);
    sipQBuffer(QByteArray *,QObject *);
    virtual ~sipQBuffer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    qint64 sipProtectVirt_readLineData(bool,char *,qint64);
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);
    qint64 sipProtectVirt_readData(bool,char *,qint64);
    qint64 sipProtectVirt_writeData(bool,const char *,PY_LONG_LONG);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool open(QIODevice::OpenMode);
    void close();
    qint64 size() const;
    qint64 pos() const;
    bool seek(qint64);
    bool atEnd() const;
    bool canReadLine() const;
    qint64 readData(char *,qint64);
    qint64 writeData(const char *,PY_LONG_LONG);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    bool isSequential() const;
    bool reset();
    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;
    bool waitForReadyRead(int);
    bool waitForBytesWritten(int);
    qint64 readLineData(char *,qint64);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBuffer(const sipQBuffer &);
    sipQBuffer &operator = (const sipQBuffer &);

    char sipPyMethods[23];
};

sipQBuffer::sipQBuffer(QObject *a0): QBuffer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBuffer::sipQBuffer(QByteArray *a0,QObject *a1): QBuffer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBuffer::~sipQBuffer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBuffer::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QBuffer);
}

int sipQBuffer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBuffer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QBuffer,_c,_id,_a);

    return _id;
}

void *sipQBuffer::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QBuffer,_clname)) ? this : QBuffer::qt_metacast(_clname);
}

bool sipQBuffer::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_open);

    if (!meth)
        return QBuffer::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t,PyObject *,QIODevice::OpenMode);

    return sipVH_QtCore_15(sipGILState,meth,a0);
}

void sipQBuffer::close()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_close);

    if (!meth)
    {
        QBuffer::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t,PyObject *);

    sipVH_QtCore_11(sipGILState,meth);
}

qint64 sipQBuffer::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_size);

    if (!meth)
        return QBuffer::size();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

qint64 sipQBuffer::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_pos);

    if (!meth)
        return QBuffer::pos();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

bool sipQBuffer::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_seek);

    if (!meth)
        return QBuffer::seek(a0);

    extern bool sipVH_QtCore_32(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    return sipVH_QtCore_32(sipGILState,meth,a0);
}

bool sipQBuffer::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_atEnd);

    if (!meth)
        return QBuffer::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

bool sipQBuffer::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_canReadLine);

    if (!meth)
        return QBuffer::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

qint64 sipQBuffer::readData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_readData);

    if (!meth)
        return QBuffer::readData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState,meth,a0,a1);
}

qint64 sipQBuffer::writeData(const char *a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_writeData);

    if (!meth)
        return QBuffer::writeData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_20(sip_gilstate_t,PyObject *,const char *,PY_LONG_LONG);

    return sipVH_QtCore_20(sipGILState,meth,a0,a1);
}

void sipQBuffer::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QBuffer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

void sipQBuffer::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QBuffer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

bool sipQBuffer::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isSequential);

    if (!meth)
        return QIODevice::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

bool sipQBuffer::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_reset);

    if (!meth)
        return QIODevice::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

qint64 sipQBuffer::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!meth)
        return QIODevice::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

qint64 sipQBuffer::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!meth)
        return QIODevice::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_22(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_22(sipGILState,meth);
}

bool sipQBuffer::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!meth)
        return QIODevice::waitForReadyRead(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t,PyObject *,int);

    return sipVH_QtCore_23(sipGILState,meth,a0);
}

bool sipQBuffer::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!meth)
        return QIODevice::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_23(sip_gilstate_t,PyObject *,int);

    return sipVH_QtCore_23(sipGILState,meth,a0);
}

qint64 sipQBuffer::readLineData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_readLineData);

    if (!meth)
        return QIODevice::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_21(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return sipVH_QtCore_21(sipGILState,meth,a0,a1);
}

bool sipQBuffer::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t,PyObject *,QEvent *);

    return sipVH_QtCore_5(sipGILState,meth,a0);
}

bool sipQBuffer::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return sipVH_QtCore_18(sipGILState,meth,a0,a1);
}

void sipQBuffer::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t,PyObject *,QTimerEvent *);

    sipVH_QtCore_9(sipGILState,meth,a0);
}

void sipQBuffer::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t,PyObject *,QChildEvent *);

    sipVH_QtCore_25(sipGILState,meth,a0);
}

void sipQBuffer::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,QEvent *);

    sipVH_QtCore_17(sipGILState,meth,a0);
}

QObject * sipQBuffer::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQBuffer::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQBuffer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQBuffer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQBuffer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

qint64 sipQBuffer::sipProtectVirt_readLineData(bool sipSelfWasArg,char *a0,qint64 a1)
{
    return (sipSelfWasArg ? QIODevice::readLineData(a0,a1) : readLineData(a0,a1));
}

void sipQBuffer::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQBuffer::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}

qint64 sipQBuffer::sipProtectVirt_readData(bool sipSelfWasArg,char *a0,qint64 a1)
{
    return (sipSelfWasArg ? QBuffer::readData(a0,a1) : readData(a0,a1));
}

qint64 sipQBuffer::sipProtectVirt_writeData(bool sipSelfWasArg,const char *a0,PY_LONG_LONG a1)
{
    return (sipSelfWasArg ? QBuffer::writeData(a0,a1) : writeData(a0,a1));
}

void sipQBuffer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QBuffer::connectNotify(a0) : connectNotify(a0));
}

void sipQBuffer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QBuffer::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QBuffer_sender(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 637 "sipQtCoreQBuffer.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_receivers(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 679 "sipQtCoreQBuffer.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBuffer_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 244 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QIODevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 830 "sipQtCoreQBuffer.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_readLineData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_setOpenMode(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setOpenMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode * a0;
        int a0State = 0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setOpenMode(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setOpenMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_setErrorString(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setErrorString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setErrorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_buffer(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_buffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->buffer();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_buffer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_data(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->data());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_setBuffer(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QByteArray * a0;
        int a0State = 0;
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBuffer(a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setBuffer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_setData(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QBuffer, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_open(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode * a0;
        int a0State = 0;
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_open, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_close(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QBuffer::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_close, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_size(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::size() : sipCpp->size());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_pos(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::pos() : sipCpp->pos());
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_pos, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_seek(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_seek, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::atEnd() : sipCpp->atEnd());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_atEnd, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBuffer::canReadLine() : sipCpp->canReadLine());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_canReadLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBuffer_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 59 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbuffer.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QBuffer::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1285 "sipQtCoreQBuffer.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_readData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_writeData(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char * a0;
        SIP_SSIZE_T a1;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QBuffer, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_writeData(sipSelfWasArg,a0,(PY_LONG_LONG)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_writeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QBuffer_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_disconnectNotify, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBuffer(void *, const sipTypeDef *);}
static void *cast_QBuffer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QBuffer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QBuffer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBuffer(void *, int);}
static void release_QBuffer(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQBuffer *>(sipCppV);
    else
        delete reinterpret_cast<QBuffer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QBuffer(sipSimpleWrapper *);}
static void dealloc_QBuffer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBuffer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBuffer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QBuffer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QBuffer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBuffer *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQBuffer(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QByteArray * a0;
        int a0State = 0;
        QObject * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J0|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQBuffer(a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBuffer[] = {{79, 255, 1}};


static PyMethodDef methods_QBuffer[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QBuffer_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buffer), meth_QBuffer_buffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QBuffer_canReadLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QBuffer_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QBuffer_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QBuffer_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QBuffer_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QBuffer_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QBuffer_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QBuffer_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pos), meth_QBuffer_pos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QBuffer_readData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QBuffer_readLineData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QBuffer_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_seek), meth_QBuffer_seek, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QBuffer_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBuffer), meth_QBuffer_setBuffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QBuffer_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setErrorString), meth_QBuffer_setErrorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpenMode), meth_QBuffer_setOpenMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QBuffer_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QBuffer_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QBuffer_writeData, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QBuffer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QBuffer,
        {0}
    },
    {
        sipNameNr_QBuffer,
        {0, 0, 1},
        23, methods_QBuffer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QBuffer,
    0,
    init_QBuffer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBuffer,
    0,
    0,
    0,
    release_QBuffer,
    cast_QBuffer,
    0,
    0,
    0
},
    &QBuffer::staticMetaObject,
    0,
    0
};
