/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "sipQtCoreQMetaMethod.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQMetaMethod.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtCoreQMetaMethod.cpp"
#line 181 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 49 "sipQtCoreQMetaMethod.cpp"
#line 164 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 52 "sipQtCoreQMetaMethod.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "sipQtCoreQMetaMethod.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 58 "sipQtCoreQMetaMethod.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
// Raise an exception when QMetaMethod::invoke() returns false.
static void qtcore_invoke_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaMethod.invoke() call failed");
}
#line 65 "sipQtCoreQMetaMethod.cpp"


extern "C" {static PyObject *meth_QMetaMethod_signature(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_signature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->signature();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_signature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->typeName();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_typeName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_parameterTypes(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->parameterTypes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterTypes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_parameterNames(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->parameterNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterNames, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_tag(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_tag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tag();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_tag, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_access(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_access(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QMetaMethod::Access sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->access();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMetaMethod_Access);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_access, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_methodType(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_methodType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QMetaMethod::MethodType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->methodType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMetaMethod_MethodType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_methodType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_invoke(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_invoke(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        Qt::ConnectionType a1;
        QGenericReturnArgument * a2;
        PyObject *a2Wrapper;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument * a12 = &a12def;
        QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8E@J9|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_Qt_ConnectionType, &a1, &a2Wrapper, sipType_QGenericReturnArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = 0;

#line 78 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11,
                *a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invoke_exception();
#line 340 "sipQtCoreQMetaMethod.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        QGenericReturnArgument * a1;
        PyObject *a1Wrapper;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument * a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8@J9|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, &a1Wrapper, sipType_QGenericReturnArgument, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = 0;

#line 96 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10,
                *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a1Wrapper);
        else
            qtcore_invoke_exception();
#line 404 "sipQtCoreQMetaMethod.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        Qt::ConnectionType a1;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument * a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument * a11 = &a11def;
        QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8E|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_Qt_ConnectionType, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = 0;

#line 114 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
#line 469 "sipQtCoreQMetaMethod.cpp"

            return sipRes;
        }
    }

    {
        QObject * a0;
        QGenericArgument a1def = QGenericArgument(0,0);
        QGenericArgument * a1 = &a1def;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument * a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument * a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument * a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument * a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument * a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument * a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument * a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument * a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument * a10 = &a10def;
        QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_QGenericArgument, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10))
        {
            PyObject * sipRes = 0;

#line 134 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
#line 532 "sipQtCoreQMetaMethod.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_invoke, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMetaMethod_methodIndex(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_methodIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->methodIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_methodIndex, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMetaMethod(void *, const sipTypeDef *);}
static void *cast_QMetaMethod(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMetaMethod)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaMethod(void *, int);}
static void release_QMetaMethod(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QMetaMethod *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QMetaMethod(void *, SIP_SSIZE_T, const void *);}
static void assign_QMetaMethod(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMetaMethod *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMetaMethod *>(sipSrc);
}


extern "C" {static void *array_QMetaMethod(SIP_SSIZE_T);}
static void *array_QMetaMethod(SIP_SSIZE_T sipNrElem)
{
    return new QMetaMethod[sipNrElem];
}


extern "C" {static void *copy_QMetaMethod(const void *, SIP_SSIZE_T);}
static void *copy_QMetaMethod(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMetaMethod(reinterpret_cast<const QMetaMethod *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaMethod(sipSimpleWrapper *);}
static void dealloc_QMetaMethod(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMetaMethod(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QMetaMethod(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QMetaMethod(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMetaMethod *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMetaMethod();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QMetaMethod * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMetaMethod, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMetaMethod(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMetaMethod[] = {
    {SIP_MLNAME_CAST(sipName_access), meth_QMetaMethod_access, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invoke), (PyCFunction)meth_QMetaMethod_invoke, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_methodIndex), meth_QMetaMethod_methodIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_methodType), meth_QMetaMethod_methodType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parameterNames), meth_QMetaMethod_parameterNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parameterTypes), meth_QMetaMethod_parameterTypes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_signature), meth_QMetaMethod_signature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tag), meth_QMetaMethod_tag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QMetaMethod_typeName, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QMetaMethod[] = {
    {sipName_Constructor, QMetaMethod::Constructor, 123},
    {sipName_Method, QMetaMethod::Method, 123},
    {sipName_Private, QMetaMethod::Private, 122},
    {sipName_Protected, QMetaMethod::Protected, 122},
    {sipName_Public, QMetaMethod::Public, 122},
    {sipName_Signal, QMetaMethod::Signal, 123},
    {sipName_Slot, QMetaMethod::Slot, 123},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QMetaMethod = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QMetaMethod,
        {0}
    },
    {
        sipNameNr_QMetaMethod,
        {0, 0, 1},
        9, methods_QMetaMethod,
        7, enummembers_QMetaMethod,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QMetaMethod,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMetaMethod,
    assign_QMetaMethod,
    array_QMetaMethod,
    copy_QMetaMethod,
    release_QMetaMethod,
    cast_QMetaMethod,
    0,
    0,
    0
},
    0,
    0,
    0
};
