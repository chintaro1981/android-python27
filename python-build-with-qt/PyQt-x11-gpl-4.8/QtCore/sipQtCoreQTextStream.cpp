/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 39 "sipQtCoreQTextStream.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtCoreQTextStream.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtCoreQTextStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 49 "sipQtCoreQTextStream.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "sipQtCoreQTextStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 55 "sipQtCoreQTextStream.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 58 "sipQtCoreQTextStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 61 "sipQtCoreQTextStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 86 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 66 "sipQtCoreQTextStream.cpp"


class sipQTextStream : public QTextStream
{
public:
    sipQTextStream();
    sipQTextStream(QIODevice *);
    sipQTextStream(QString *,QIODevice::OpenMode);
    sipQTextStream(QByteArray *,QIODevice::OpenMode);
    ~sipQTextStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextStream(const sipQTextStream &);
    sipQTextStream &operator = (const sipQTextStream &);
};

sipQTextStream::sipQTextStream(): QTextStream(), sipPySelf(0)
{
}

sipQTextStream::sipQTextStream(QIODevice *a0): QTextStream(a0), sipPySelf(0)
{
}

sipQTextStream::sipQTextStream(QString *a0,QIODevice::OpenMode a1): QTextStream(a0,a1), sipPySelf(0)
{
}

sipQTextStream::sipQTextStream(QByteArray *a0,QIODevice::OpenMode a1): QTextStream(a0,a1), sipPySelf(0)
{
}

sipQTextStream::~sipQTextStream()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_QTextStream_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCodec * a0;
        PyObject *a0Keep;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextStream, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -20, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char * a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setCodec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_codec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QTextCodec *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->codec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_codec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoDetectUnicode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setAutoDetectUnicode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoDetectUnicode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_autoDetectUnicode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGenerateByteOrderMark(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setGenerateByteOrderMark, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->generateByteOrderMark();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_generateByteOrderMark, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_device(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_device, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;
        QTextStream *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QString,&a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setString(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_string(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_string(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->string();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_string, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_atEnd, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_reset(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_flush(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_flush, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_seek(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->seek(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_seek, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->skipWhiteSpace();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_skipWhiteSpace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_read(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->read(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_read, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_readLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0 = 0;
        QTextStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxLength,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|n", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->readLine(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_readAll(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readAll, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setFieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream::FieldAlignment a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_FieldAlignment, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFieldAlignment(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_fieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QTextStream::FieldAlignment sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fieldAlignment();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextStream_FieldAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setPadChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setPadChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QChar * a0;
        int a0State = 0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPadChar(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QChar,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setPadChar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_padChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_padChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->padChar());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_padChar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setFieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFieldWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_fieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fieldWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setNumberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setNumberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream::NumberFlags * a0;
        int a0State = 0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumberFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setNumberFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_numberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_numberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QTextStream::NumberFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStream::NumberFlags(sipCpp->numberFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_numberFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setIntegerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setIntegerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIntegerBase(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setIntegerBase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_integerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_integerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->integerBase();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_integerBase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream::RealNumberNotation a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_RealNumberNotation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRealNumberNotation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberNotation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_realNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QTextStream::RealNumberNotation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->realNumberNotation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextStream_RealNumberNotation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberNotation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRealNumberPrecision(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_realNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->realNumberPrecision();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_status(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QTextStream::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_status, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream::Status a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_Status, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetStatus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_resetStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_pos(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pos();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_pos, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale * a0;
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocale(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setLocale, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextStream_locale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(sipCpp->locale());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_locale, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QTextStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream * a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xd", sipType_QTextStream, &a0, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        bool a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xb", sipType_QTextStream, &a0, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xi", sipType_QTextStream, &a0, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        qlonglong a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9n", sipType_QTextStream, &a0, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        qulonglong a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9o", sipType_QTextStream, &a0, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        const QString * a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QString,&a1, &a1State))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        const QByteArray * a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        QTextStreamManipulator * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QTextStreamManipulator, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTextStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QTextStream * a0;
        QChar * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QChar,&a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QTextStream * a0;
        QString * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QString,&a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    {
        QTextStream * a0;
        QByteArray * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QByteArray, &a1))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,rshift_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextStream(void *, const sipTypeDef *);}
static void *cast_QTextStream(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextStream)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextStream(void *, int);}
static void release_QTextStream(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextStream *>(sipCppV);
    else
        delete reinterpret_cast<QTextStream *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextStream(sipSimpleWrapper *);}
static void dealloc_QTextStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextStream *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextStream(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTextStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextStream *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextStream();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QIODevice * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextStream(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QString,&a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextStream(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QByteArray * a0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextStream(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextStream[] = {
    {(void *)slot_QTextStream___lshift__, lshift_slot},
    {(void *)slot_QTextStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextStream[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextStream_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoDetectUnicode), meth_QTextStream_autoDetectUnicode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_codec), meth_QTextStream_codec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QTextStream_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fieldAlignment), meth_QTextStream_fieldAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fieldWidth), meth_QTextStream_fieldWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flush), meth_QTextStream_flush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_generateByteOrderMark), meth_QTextStream_generateByteOrderMark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_integerBase), meth_QTextStream_integerBase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_locale), meth_QTextStream_locale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberFlags), meth_QTextStream_numberFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_padChar), meth_QTextStream_padChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pos), meth_QTextStream_pos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QTextStream_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QTextStream_readAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readLine), (PyCFunction)meth_QTextStream_readLine, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_realNumberNotation), meth_QTextStream_realNumberNotation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_realNumberPrecision), meth_QTextStream_realNumberPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTextStream_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QTextStream_resetStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_seek), meth_QTextStream_seek, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoDetectUnicode), meth_QTextStream_setAutoDetectUnicode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QTextStream_setCodec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QTextStream_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFieldAlignment), meth_QTextStream_setFieldAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFieldWidth), meth_QTextStream_setFieldWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGenerateByteOrderMark), meth_QTextStream_setGenerateByteOrderMark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIntegerBase), meth_QTextStream_setIntegerBase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QTextStream_setLocale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumberFlags), meth_QTextStream_setNumberFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPadChar), meth_QTextStream_setPadChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRealNumberNotation), meth_QTextStream_setRealNumberNotation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRealNumberPrecision), meth_QTextStream_setRealNumberPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QTextStream_setStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setString), (PyCFunction)meth_QTextStream_setString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_skipWhiteSpace), meth_QTextStream_skipWhiteSpace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_status), meth_QTextStream_status, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_string), meth_QTextStream_string, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextStream[] = {
    {sipName_AlignAccountingStyle, QTextStream::AlignAccountingStyle, 215},
    {sipName_AlignCenter, QTextStream::AlignCenter, 215},
    {sipName_AlignLeft, QTextStream::AlignLeft, 215},
    {sipName_AlignRight, QTextStream::AlignRight, 215},
    {sipName_FixedNotation, QTextStream::FixedNotation, 218},
    {sipName_ForcePoint, QTextStream::ForcePoint, 216},
    {sipName_ForceSign, QTextStream::ForceSign, 216},
    {sipName_Ok, QTextStream::Ok, 219},
    {sipName_ReadCorruptData, QTextStream::ReadCorruptData, 219},
    {sipName_ReadPastEnd, QTextStream::ReadPastEnd, 219},
    {sipName_ScientificNotation, QTextStream::ScientificNotation, 218},
    {sipName_ShowBase, QTextStream::ShowBase, 216},
    {sipName_SmartNotation, QTextStream::SmartNotation, 218},
    {sipName_UppercaseBase, QTextStream::UppercaseBase, 216},
    {sipName_UppercaseDigits, QTextStream::UppercaseDigits, 216},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QTextStream = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextStream,
        {0}
    },
    {
        sipNameNr_QTextStream,
        {0, 0, 1},
        38, methods_QTextStream,
        15, enummembers_QTextStream,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTextStream,
    init_QTextStream,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextStream,
    0,
    0,
    0,
    release_QTextStream,
    cast_QTextStream,
    0,
    0,
    0
},
    0,
    0,
    0
};
