/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "sipQtCoreQVariant_5.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "sipQtCoreQVariant_5.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 46 "sipQtCoreQVariant_5.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 49 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 52 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 55 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 58 "sipQtCoreQVariant_5.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64 "sipQtCoreQVariant_5.cpp"
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 67 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 70 "sipQtCoreQVariant_5.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 73 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 76 "sipQtCoreQVariant_5.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 79 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 82 "sipQtCoreQVariant_5.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 85 "sipQtCoreQVariant_5.cpp"
#line 82 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88 "sipQtCoreQVariant_5.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtCoreQVariant_5.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 94 "sipQtCoreQVariant_5.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 97 "sipQtCoreQVariant_5.cpp"
#line 343 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 100 "sipQtCoreQVariant_5.cpp"
#line 198 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 103 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 106 "sipQtCoreQVariant_5.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 109 "sipQtCoreQVariant_5.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 112 "sipQtCoreQVariant_5.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 115 "sipQtCoreQVariant_5.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 118 "sipQtCoreQVariant_5.cpp"


extern "C" {static PyObject *meth_QVariant_5_fromList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_fromList(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QVariant> * a0;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_list,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1", sipType_QList_0100QVariant,&a0, &a0State))
        {
            QVariant *sipRes = 0;

#line 253 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
        // We don't implement this as a Python ctor to allow an empty Python list to be
        // handled as a Python object.
        sipRes = new QVariant(*a0);
#line 142 "sipQtCoreQVariant_5.cpp"
            sipReleaseType(const_cast<QList<QVariant> *>(a0),sipType_QList_0100QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_fromList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_fromMap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_fromMap(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMap<QString,QVariant> * a0;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_map,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1", sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
            QVariant *sipRes = 0;

#line 260 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
        // We don't implement this as a Python ctor to allow an empty Python dictionary
        // to be handled as a Python object.
        sipRes = new QVariant(*a0);
#line 177 "sipQtCoreQVariant_5.cpp"
            sipReleaseType(const_cast<QMap<QString,QVariant> *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_fromMap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_type(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QVariant::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_userType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_userType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->userType();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_userType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_typeName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->typeName();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_canConvert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_canConvert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant::Type a0;
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QVariant, &sipCpp, sipType_QVariant_Type, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canConvert(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_canConvert, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_convert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_convert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant::Type a0;
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QVariant, &sipCpp, sipType_QVariant_Type, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->convert(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_convert, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_isValid(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_clear(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_detach(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_detach, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isDetached, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ib)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toUInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(nb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLongLong, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            qulonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ob)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toULongLong, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toBool(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toBool();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toBool, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDouble, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toByteArray());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toByteArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toBitArray(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toBitArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QBitArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitArray(sipCpp->toBitArray());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toBitArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toString(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toStringList(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->toStringList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toStringList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toChar(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toChar());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toChar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toDate(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QDate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toTime(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toDateTime(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toDateTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toList(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QList<QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QVariant>(sipCpp->toList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toMap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QMap<QString,QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QVariant>(sipCpp->toMap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toMap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toHash(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QHash<QString,QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHash<QString,QVariant>(sipCpp->toHash());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toHash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->toPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->toPointF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPointF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toSize(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->toSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toSizeF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->toSizeF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toSizeF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toLine(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLine(sipCpp->toLine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toLineF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toLineF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->toLineF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLineF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toRect(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->toRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toRectF(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toRectF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->toRectF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRectF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toUrl(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->toUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toLocale(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(sipCpp->toLocale());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toLocale, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toRegExp(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QRegExp *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegExp(sipCpp->toRegExp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegExp,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toRegExp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toPyObject(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toPyObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 307 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
        sipRes = qpycore_PyObject_FromQVariant(*sipCpp);
#line 1262 "sipQtCoreQVariant_5.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toPyObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_load(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream * a0;
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_save(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream * a0;
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_typeToName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_typeToName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant::Type a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QVariant_Type, &a0))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QVariant::typeToName(a0);
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeToName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_nameToType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_nameToType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QVariant::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QVariant::nameToType(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_nameToType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_data(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            void *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(fb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toFloat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toReal(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toReal(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QVariant *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toReal(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toReal, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QVariant_5_toEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariant_5_toEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            QEasingCurve *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QEasingCurve(sipCpp->toEasingCurve());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_toEasingCurve, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QVariant_5___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVariant_5___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QVariant *sipCpp = reinterpret_cast<QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QVariant::operator!=(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QVariant,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QVariant_5___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVariant_5___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QVariant *sipCpp = reinterpret_cast<QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QVariant::operator==(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QVariant,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QVariant_5(void *, const sipTypeDef *);}
static void *cast_QVariant_5(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QVariant)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariant_5(void *, int);}
static void release_QVariant_5(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QVariant *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QVariant_5(void *, SIP_SSIZE_T, const void *);}
static void assign_QVariant_5(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QVariant *>(sipSrc);
}


extern "C" {static void *array_QVariant_5(SIP_SSIZE_T);}
static void *array_QVariant_5(SIP_SSIZE_T sipNrElem)
{
    return new QVariant[sipNrElem];
}


extern "C" {static void *copy_QVariant_5(const void *, SIP_SSIZE_T);}
static void *copy_QVariant_5(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVariant(reinterpret_cast<const QVariant *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVariant_5(sipSimpleWrapper *);}
static void dealloc_QVariant_5(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QVariant_5(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QVariant_5(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QVariant_5(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QVariant *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QVariant();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QVariant::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "XE", sipType_QVariant_Type, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QVariant(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        const void * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iv", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QVariant(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QVariant(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "P0", &a0))
        {
#line 241 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
        int is_err = 0;
        QVariant var = qpycore_PyObject_AsQVariant(a0, &is_err);
        
        if (is_err)
            sipCpp = 0;
        else
            sipCpp = new QVariant(var);
#line 1704 "sipQtCoreQVariant_5.cpp"

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QVariant_5(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariant_5(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVariant **sipCppPtr = reinterpret_cast<QVariant **>(sipCppPtrV);

#line 134 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
if (sipIsErr == NULL)
    // We can convert everything to a QVariant.
    return 1;

// If it is already a QVariant then just return it.
if (Py_TYPE(sipPy) == sipTypeAsPyTypeObject(sipType_QVariant))
{
    *sipCppPtr = reinterpret_cast<QVariant *>(sipConvertToType(sipPy,
            sipType_QVariant, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

// Convert it to a QVariant.
QVariant var = qpycore_PyObject_AsQVariant(sipPy, sipIsErr);

if (*sipIsErr)
    return 0;

*sipCppPtr = new QVariant(var);

return sipGetState(sipTransferObj);
#line 1742 "sipQtCoreQVariant_5.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVariant_5[] = {
    {(void *)slot_QVariant_5___ne__, ne_slot},
    {(void *)slot_QVariant_5___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVariant_5[] = {
    {SIP_MLNAME_CAST(sipName_canConvert), meth_QVariant_5_canConvert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QVariant_5_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_convert), meth_QVariant_5_convert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QVariant_5_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detach), meth_QVariant_5_detach, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromList), (PyCFunction)meth_QVariant_5_fromList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_fromMap), (PyCFunction)meth_QVariant_5_fromMap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QVariant_5_isDetached, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVariant_5_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QVariant_5_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_QVariant_5_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nameToType), meth_QVariant_5_nameToType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_QVariant_5_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toBitArray), meth_QVariant_5_toBitArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toBool), meth_QVariant_5_toBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toByteArray), meth_QVariant_5_toByteArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toChar), meth_QVariant_5_toChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDate), meth_QVariant_5_toDate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDateTime), meth_QVariant_5_toDateTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDouble), (PyCFunction)meth_QVariant_5_toDouble, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toEasingCurve), meth_QVariant_5_toEasingCurve, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFloat), (PyCFunction)meth_QVariant_5_toFloat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toHash), meth_QVariant_5_toHash, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toInt), (PyCFunction)meth_QVariant_5_toInt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toLine), meth_QVariant_5_toLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLineF), meth_QVariant_5_toLineF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toList), meth_QVariant_5_toList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLocale), meth_QVariant_5_toLocale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLongLong), (PyCFunction)meth_QVariant_5_toLongLong, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toMap), meth_QVariant_5_toMap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVariant_5_toPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVariant_5_toPointF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPyObject), meth_QVariant_5_toPyObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toReal), (PyCFunction)meth_QVariant_5_toReal, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toRect), meth_QVariant_5_toRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toRectF), meth_QVariant_5_toRectF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toRegExp), meth_QVariant_5_toRegExp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toSize), meth_QVariant_5_toSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toSizeF), meth_QVariant_5_toSizeF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QVariant_5_toString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toStringList), meth_QVariant_5_toStringList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTime), meth_QVariant_5_toTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUInt), (PyCFunction)meth_QVariant_5_toUInt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toULongLong), (PyCFunction)meth_QVariant_5_toULongLong, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toUrl), meth_QVariant_5_toUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QVariant_5_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QVariant_5_typeName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_typeToName), meth_QVariant_5_typeToName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userType), meth_QVariant_5_userType, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QVariant_5[] = {
    {sipName_BitArray, QVariant::BitArray, 240},
    {sipName_Bitmap, QVariant::Bitmap, 240},
    {sipName_Bool, QVariant::Bool, 240},
    {sipName_Brush, QVariant::Brush, 240},
    {sipName_ByteArray, QVariant::ByteArray, 240},
    {sipName_Char, QVariant::Char, 240},
    {sipName_Color, QVariant::Color, 240},
    {sipName_Cursor, QVariant::Cursor, 240},
    {sipName_Date, QVariant::Date, 240},
    {sipName_DateTime, QVariant::DateTime, 240},
    {sipName_Double, QVariant::Double, 240},
    {sipName_EasingCurve, QVariant::EasingCurve, 240},
    {sipName_Font, QVariant::Font, 240},
    {sipName_Hash, QVariant::Hash, 240},
    {sipName_Icon, QVariant::Icon, 240},
    {sipName_Image, QVariant::Image, 240},
    {sipName_Int, QVariant::Int, 240},
    {sipName_Invalid, QVariant::Invalid, 240},
    {sipName_KeySequence, QVariant::KeySequence, 240},
    {sipName_Line, QVariant::Line, 240},
    {sipName_LineF, QVariant::LineF, 240},
    {sipName_List, QVariant::List, 240},
    {sipName_Locale, QVariant::Locale, 240},
    {sipName_LongLong, QVariant::LongLong, 240},
    {sipName_Map, QVariant::Map, 240},
    {sipName_Matrix, QVariant::Matrix, 240},
    {sipName_Matrix4x4, QVariant::Matrix4x4, 240},
    {sipName_Palette, QVariant::Palette, 240},
    {sipName_Pen, QVariant::Pen, 240},
    {sipName_Pixmap, QVariant::Pixmap, 240},
    {sipName_Point, QVariant::Point, 240},
    {sipName_PointF, QVariant::PointF, 240},
    {sipName_Polygon, QVariant::Polygon, 240},
    {sipName_Quaternion, QVariant::Quaternion, 240},
    {sipName_Rect, QVariant::Rect, 240},
    {sipName_RectF, QVariant::RectF, 240},
    {sipName_RegExp, QVariant::RegExp, 240},
    {sipName_Region, QVariant::Region, 240},
    {sipName_Size, QVariant::Size, 240},
    {sipName_SizeF, QVariant::SizeF, 240},
    {sipName_SizePolicy, QVariant::SizePolicy, 240},
    {sipName_String, QVariant::String, 240},
    {sipName_StringList, QVariant::StringList, 240},
    {sipName_TextFormat, QVariant::TextFormat, 240},
    {sipName_TextLength, QVariant::TextLength, 240},
    {sipName_Time, QVariant::Time, 240},
    {sipName_Transform, QVariant::Transform, 240},
    {sipName_UInt, QVariant::UInt, 240},
    {sipName_ULongLong, QVariant::ULongLong, 240},
    {sipName_Url, QVariant::Url, 240},
    {sipName_UserType, QVariant::UserType, 240},
    {sipName_Vector2D, QVariant::Vector2D, 240},
    {sipName_Vector3D, QVariant::Vector3D, 240},
    {sipName_Vector4D, QVariant::Vector4D, 240},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QVariant_5 = {
{
    {
        5,
        0,
        0,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_CLASS,
        sipNameNr_QVariant,
        {0}
    },
    {
        sipNameNr_QVariant,
        {0, 0, 1},
        49, methods_QVariant_5,
        54, enummembers_QVariant_5,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QVariant_5,
    init_QVariant_5,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QVariant_5,
    assign_QVariant_5,
    array_QVariant_5,
    copy_QVariant_5,
    release_QVariant_5,
    cast_QVariant_5,
    convertTo_QVariant_5,
    0,
    0
},
    0,
    0,
    0
};
