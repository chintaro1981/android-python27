/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "sipQtCoreQUrl.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQUrl.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQUrl.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtCoreQUrl.cpp"
#line 205 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 53 "sipQtCoreQUrl.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 56 "sipQtCoreQUrl.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 59 "sipQtCoreQUrl.cpp"
#line 205 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 63 "sipQtCoreQUrl.cpp"
#line 82 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "sipQtCoreQUrl.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <QHash>
#line 69 "sipQtCoreQUrl.cpp"


extern "C" {static PyObject *meth_QUrl_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QUrl::ParsingMode a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedUrl(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl::ParsingMode a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_isValid(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isEmpty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_clear(PyObject *, PyObject *);}
static PyObject *meth_QUrl_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setScheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScheme(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setScheme, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_scheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->scheme());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_scheme, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setAuthority(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setAuthority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAuthority(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setAuthority, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_authority(PyObject *, PyObject *);}
static PyObject *meth_QUrl_authority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->authority());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_authority, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setUserInfo(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserInfo(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_userInfo(PyObject *, PyObject *);}
static PyObject *meth_QUrl_userInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->userInfo());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_userName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_userName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->userName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPassword, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_password(PyObject *, PyObject *);}
static PyObject *meth_QUrl_password(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->password());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_password, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHost(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setHost, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_host(PyObject *, PyObject *);}
static PyObject *meth_QUrl_host(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->host());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_host, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setPort(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_port(PyObject *, PyObject *);}
static PyObject *meth_QUrl_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_port, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_path(PyObject *, PyObject *);}
static PyObject *meth_QUrl_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_path, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQuery(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setQueryDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQueryDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        char a1;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bcc", &sipSelf, sipType_QUrl, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueryDelimiters(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQueryDelimiters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_queryValueDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryValueDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->queryValueDelimiter();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryValueDelimiter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_queryPairDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryPairDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->queryPairDelimiter();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryPairDelimiter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPair<QString,QString> > * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QString_0100QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QString,QString> > *>(a0),sipType_QList_0600QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQueryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_addQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_queryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QString,QString> > *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QString,QString> >(sipCpp->queryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_hasQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_queryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_queryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->queryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_queryItemValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_allQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->allQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allQueryItemValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_removeQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_removeAllQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllQueryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFragment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_resolved(PyObject *, PyObject *);}
static PyObject *meth_QUrl_resolved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->resolved(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_resolved, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isRelative, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_isParentOf(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isParentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isParentOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isParentOf, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromLocalFile(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromLocalFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toLocalFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toLocalFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl::FormattingOptions a0def = QUrl::None;
        QUrl::FormattingOptions * a0 = &a0def;
        int a0State = 0;
        QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toEncoded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl::FormattingOptions a0def = QUrl::None;
        QUrl::FormattingOptions * a0 = &a0def;
        int a0State = 0;
        QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toEncoded(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toEncoded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromEncoded(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl::ParsingMode a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1E", sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromEncoded(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromEncoded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_detach(PyObject *, PyObject *);}
static PyObject *meth_QUrl_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_detach, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isDetached, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromPercentEncoding(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPercentEncoding, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray * a1 = &a1def;
        int a1State = 0;
        const QByteArray& a2def = QByteArray();
        const QByteArray * a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_exclude,
            sipName_include,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toPercentEncoding(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPercentEncoding, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPunycode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPunycode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toPunycode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPunycode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_hasQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasQuery();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_hasFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFragment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_errorString(PyObject *, PyObject *);}
static PyObject *meth_QUrl_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_errorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QUrl::fromAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromAce, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_toAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QUrl::toAce(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toAce, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QUrl::idnWhitelist());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_idnWhitelist, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QUrl::setIdnWhitelist(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setIdnWhitelist, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedUserName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedUserName(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedUserName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedUserName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPassword, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedPassword(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedPassword());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPassword, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedHost(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedHost, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedHost(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedHost());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedHost, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedPath(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPair<QByteArray,QByteArray> > * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QList_0600QPair_0100QByteArray_0100QByteArray,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QPair<QByteArray,QByteArray> > *>(a0),sipType_QList_0600QPair_0100QByteArray_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedQueryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_addEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QByteArray * a1;
        int a1State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addEncodedQueryItem(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_addEncodedQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> > *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->encodedQueryItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasEncodedQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedQueryItemValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedQueryItemValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedQueryItemValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *, PyObject *);}
static PyObject *meth_QUrl_allEncodedQueryItemValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->allEncodedQueryItemValues(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_allEncodedQueryItemValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeEncodedQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeEncodedQueryItem(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeEncodedQueryItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrl_removeAllEncodedQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllEncodedQueryItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_removeAllEncodedQueryItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_setEncodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setEncodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEncodedFragment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setEncodedFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_encodedFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_encodedFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->encodedFragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_encodedFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QUrl::fromUserInput(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromUserInput, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QUrl___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QUrl___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QUrl::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QUrl,sipSelf,sipArg);
}


extern "C" {static long slot_QUrl___hash__(PyObject *);}
static long slot_QUrl___hash__(PyObject *sipSelf)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 73 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
        if (sipIsAPIEnabled("QUrl", 2, 0))
        {
        #if QT_VERSION >= 0x040700
            sipRes = qHash(*sipCpp);
        #else
            sipRes = qHash(sipCpp->toString());
        #endif
        }
        else
        {
            // Mimic Python's default behavour.
            sipRes = _Py_HashPointer(sipSelf);
        }
#line 2477 "sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QUrl___repr__(PyObject *);}
static PyObject *slot_QUrl___repr__(PyObject *sipSelf)
{
    QUrl *sipCpp = reinterpret_cast<QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 55 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QUrl(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt4.QtCore.QUrl(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 2513 "sipQtCoreQUrl.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QUrl(void *, const sipTypeDef *);}
static void *cast_QUrl(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QUrl)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl(void *, int);}
static void release_QUrl(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QUrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QUrl(void *, SIP_SSIZE_T, const void *);}
static void assign_QUrl(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QUrl *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QUrl *>(sipSrc);
}


extern "C" {static void *array_QUrl(SIP_SSIZE_T);}
static void *array_QUrl(SIP_SSIZE_T sipNrElem)
{
    return new QUrl[sipNrElem];
}


extern "C" {static void *copy_QUrl(const void *, SIP_SSIZE_T);}
static void *copy_QUrl(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QUrl(reinterpret_cast<const QUrl *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl(sipSimpleWrapper *);}
static void dealloc_QUrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QUrl(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QUrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QUrl(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QUrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QUrl * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QUrl::ParsingMode a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1E", sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QUrl(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl[] = {
    {(void *)slot_QUrl___ge__, ge_slot},
    {(void *)slot_QUrl___ne__, ne_slot},
    {(void *)slot_QUrl___eq__, eq_slot},
    {(void *)slot_QUrl___lt__, lt_slot},
    {(void *)slot_QUrl___hash__, hash_slot},
    {(void *)slot_QUrl___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrl[] = {
    {SIP_MLNAME_CAST(sipName_addEncodedQueryItem), meth_QUrl_addEncodedQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addQueryItem), meth_QUrl_addQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allEncodedQueryItemValues), meth_QUrl_allEncodedQueryItemValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allQueryItemValues), meth_QUrl_allQueryItemValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_authority), meth_QUrl_authority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QUrl_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detach), meth_QUrl_detach, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedFragment), meth_QUrl_encodedFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedHost), meth_QUrl_encodedHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedPassword), meth_QUrl_encodedPassword, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedPath), meth_QUrl_encodedPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedQuery), meth_QUrl_encodedQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedQueryItemValue), meth_QUrl_encodedQueryItemValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedQueryItems), meth_QUrl_encodedQueryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodedUserName), meth_QUrl_encodedUserName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QUrl_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fragment), meth_QUrl_fragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromAce), meth_QUrl_fromAce, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromEncoded), meth_QUrl_fromEncoded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromLocalFile), meth_QUrl_fromLocalFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromPercentEncoding), meth_QUrl_fromPercentEncoding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromPunycode), meth_QUrl_fromPunycode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromUserInput), meth_QUrl_fromUserInput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasEncodedQueryItem), meth_QUrl_hasEncodedQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasFragment), meth_QUrl_hasFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasQuery), meth_QUrl_hasQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasQueryItem), meth_QUrl_hasQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_host), meth_QUrl_host, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_idnWhitelist), meth_QUrl_idnWhitelist, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QUrl_isDetached, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QUrl_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isParentOf), meth_QUrl_isParentOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QUrl_isRelative, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QUrl_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_password), meth_QUrl_password, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_path), meth_QUrl_path, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_port), meth_QUrl_port, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queryItemValue), meth_QUrl_queryItemValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queryItems), meth_QUrl_queryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queryPairDelimiter), meth_QUrl_queryPairDelimiter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queryValueDelimiter), meth_QUrl_queryValueDelimiter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAllEncodedQueryItems), meth_QUrl_removeAllEncodedQueryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAllQueryItems), meth_QUrl_removeAllQueryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeEncodedQueryItem), meth_QUrl_removeEncodedQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeQueryItem), meth_QUrl_removeQueryItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resolved), meth_QUrl_resolved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QUrl_scheme, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAuthority), meth_QUrl_setAuthority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedFragment), meth_QUrl_setEncodedFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedHost), meth_QUrl_setEncodedHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedPassword), meth_QUrl_setEncodedPassword, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedPath), meth_QUrl_setEncodedPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedQuery), meth_QUrl_setEncodedQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedQueryItems), meth_QUrl_setEncodedQueryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedUrl), meth_QUrl_setEncodedUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEncodedUserName), meth_QUrl_setEncodedUserName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFragment), meth_QUrl_setFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHost), meth_QUrl_setHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIdnWhitelist), meth_QUrl_setIdnWhitelist, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPassword), meth_QUrl_setPassword, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QUrl_setPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QUrl_setPort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQueryDelimiters), meth_QUrl_setQueryDelimiters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQueryItems), meth_QUrl_setQueryItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScheme), meth_QUrl_setScheme, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QUrl_setUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserInfo), meth_QUrl_setUserInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserName), meth_QUrl_setUserName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAce), meth_QUrl_toAce, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toEncoded), (PyCFunction)meth_QUrl_toEncoded, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toLocalFile), meth_QUrl_toLocalFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPercentEncoding), (PyCFunction)meth_QUrl_toPercentEncoding, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toPunycode), meth_QUrl_toPunycode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QUrl_toString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_userInfo), meth_QUrl_userInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userName), meth_QUrl_userName, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QUrl[] = {
    {sipName_None, QUrl::None, 233},
    {sipName_RemoveAuthority, QUrl::RemoveAuthority, 233},
    {sipName_RemoveFragment, QUrl::RemoveFragment, 233},
    {sipName_RemovePassword, QUrl::RemovePassword, 233},
    {sipName_RemovePath, QUrl::RemovePath, 233},
    {sipName_RemovePort, QUrl::RemovePort, 233},
    {sipName_RemoveQuery, QUrl::RemoveQuery, 233},
    {sipName_RemoveScheme, QUrl::RemoveScheme, 233},
    {sipName_RemoveUserInfo, QUrl::RemoveUserInfo, 233},
    {sipName_StrictMode, QUrl::StrictMode, 235},
    {sipName_StripTrailingSlash, QUrl::StripTrailingSlash, 233},
    {sipName_TolerantMode, QUrl::TolerantMode, 235},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QUrl = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QUrl,
        {0}
    },
    {
        sipNameNr_QUrl,
        {0, 0, 1},
        76, methods_QUrl,
        12, enummembers_QUrl,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QUrl,
    init_QUrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUrl,
    assign_QUrl,
    array_QUrl,
    copy_QUrl,
    release_QUrl,
    cast_QUrl,
    0,
    0,
    0
},
    0,
    0,
    0
};
