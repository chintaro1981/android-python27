/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 300 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 39 "sipQtCoreQAbstractFileEngineIterator.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 43 "sipQtCoreQAbstractFileEngineIterator.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 46 "sipQtCoreQAbstractFileEngineIterator.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQAbstractFileEngineIterator.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 52 "sipQtCoreQAbstractFileEngineIterator.cpp"


class sipQAbstractFileEngineIterator : public QAbstractFileEngineIterator
{
public:
    sipQAbstractFileEngineIterator(QDir::Filters,const QStringList&);
    virtual ~sipQAbstractFileEngineIterator();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QString next();
    bool hasNext() const;
    QString currentFileName() const;
    QFileInfo currentFileInfo() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractFileEngineIterator(const sipQAbstractFileEngineIterator &);
    sipQAbstractFileEngineIterator &operator = (const sipQAbstractFileEngineIterator &);

    char sipPyMethods[4];
};

sipQAbstractFileEngineIterator::sipQAbstractFileEngineIterator(QDir::Filters a0,const QStringList& a1): QAbstractFileEngineIterator(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractFileEngineIterator::~sipQAbstractFileEngineIterator()
{
    sipCommonDtor(sipPySelf);
}

QString sipQAbstractFileEngineIterator::next()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractFileEngineIterator,sipName_next);

    if (!meth)
        return QString();

    extern QString sipVH_QtCore_62(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_62(sipGILState,meth);
}

bool sipQAbstractFileEngineIterator::hasNext() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QAbstractFileEngineIterator,sipName_hasNext);

    if (!meth)
        return 0;

    extern bool sipVH_QtCore_7(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_7(sipGILState,meth);
}

QString sipQAbstractFileEngineIterator::currentFileName() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QAbstractFileEngineIterator,sipName_currentFileName);

    if (!meth)
        return QString();

    extern QString sipVH_QtCore_62(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_62(sipGILState,meth);
}

QFileInfo sipQAbstractFileEngineIterator::currentFileInfo() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_currentFileInfo);

    if (!meth)
        return QAbstractFileEngineIterator::currentFileInfo();

    extern QFileInfo sipVH_QtCore_61(sip_gilstate_t,PyObject *);

    return sipVH_QtCore_61(sipGILState,meth);
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_next);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->next());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_next, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_hasNext);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasNext();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_hasNext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_path(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_path, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_nameFilters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_filters(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_filters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QDir::Filters *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters(sipCpp->filters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_filters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFileName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractFileEngineIterator, sipName_currentFileName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentFileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFileInfo(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFileInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QFileInfo *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFileInfo((sipSelfWasArg ? sipCpp->QAbstractFileEngineIterator::currentFileInfo() : sipCpp->currentFileInfo()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFileInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractFileEngineIterator_currentFilePath(PyObject *, PyObject *);}
static PyObject *meth_QAbstractFileEngineIterator_currentFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractFileEngineIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractFileEngineIterator, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractFileEngineIterator, sipName_currentFilePath, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractFileEngineIterator(void *, const sipTypeDef *);}
static void *cast_QAbstractFileEngineIterator(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QAbstractFileEngineIterator)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractFileEngineIterator(void *, int);}
static void release_QAbstractFileEngineIterator(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractFileEngineIterator *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractFileEngineIterator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractFileEngineIterator(sipSimpleWrapper *);}
static void dealloc_QAbstractFileEngineIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractFileEngineIterator *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractFileEngineIterator(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractFileEngineIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAbstractFileEngineIterator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractFileEngineIterator *sipCpp = 0;

    {
        QDir::Filters * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1", sipType_QDir_Filters, &a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractFileEngineIterator(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QAbstractFileEngineIterator[] = {
    {SIP_MLNAME_CAST(sipName_currentFileInfo), meth_QAbstractFileEngineIterator_currentFileInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFileName), meth_QAbstractFileEngineIterator_currentFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFilePath), meth_QAbstractFileEngineIterator_currentFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filters), meth_QAbstractFileEngineIterator_filters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QAbstractFileEngineIterator_hasNext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QAbstractFileEngineIterator_nameFilters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_next), meth_QAbstractFileEngineIterator_next, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_path), meth_QAbstractFileEngineIterator_path, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractFileEngineIterator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractFileEngineIterator,
        {0}
    },
    {
        sipNameNr_QAbstractFileEngineIterator,
        {0, 0, 1},
        8, methods_QAbstractFileEngineIterator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QAbstractFileEngineIterator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractFileEngineIterator,
    0,
    0,
    0,
    release_QAbstractFileEngineIterator,
    cast_QAbstractFileEngineIterator,
    0,
    0,
    0
},
    0,
    0,
    0
};
