/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 447 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 39 "sipQtCoreQXmlStreamWriter.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtCoreQXmlStreamWriter.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQXmlStreamWriter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQXmlStreamWriter.cpp"
#line 332 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 52 "sipQtCoreQXmlStreamWriter.cpp"
#line 63 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 55 "sipQtCoreQXmlStreamWriter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 58 "sipQtCoreQXmlStreamWriter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 86 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 63 "sipQtCoreQXmlStreamWriter.cpp"


extern "C" {static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_device, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCodec * a0;
        PyObject *a0Keep;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -22, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char * a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCodec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setCodec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_codec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            QTextCodec *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->codec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_codec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormatting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormatting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoFormatting();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormatting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormattingIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormattingIndent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoFormattingIndent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormattingIndent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QXmlStreamAttribute * a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttribute(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamAttributes * a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttributes, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeAttributes(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttributes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCDATA(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCharacters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCharacters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeComment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeComment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeDTD(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDTD, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEmptyElement(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEmptyElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEmptyElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeTextElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeTextElement(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeTextElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEndDocument();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEndElement();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeEntityReference(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEntityReference, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeNamespace(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeNamespace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeDefaultNamespace(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDefaultNamespace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeProcessingInstruction(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeProcessingInstruction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartDocument(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartElement(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeStartElement(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader * a0;
        QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeCurrentToken(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCurrentToken, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlStreamWriter(void *, const sipTypeDef *);}
static void *cast_QXmlStreamWriter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlStreamWriter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamWriter(void *, int);}
static void release_QXmlStreamWriter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QXmlStreamWriter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlStreamWriter(sipSimpleWrapper *);}
static void dealloc_QXmlStreamWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlStreamWriter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QXmlStreamWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QXmlStreamWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QXmlStreamWriter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QIODevice * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QByteArray * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J0", sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QString,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamWriter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlStreamWriter[] = {
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QXmlStreamWriter_autoFormatting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoFormattingIndent), meth_QXmlStreamWriter_autoFormattingIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_codec), meth_QXmlStreamWriter_codec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamWriter_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QXmlStreamWriter_setAutoFormatting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoFormattingIndent), meth_QXmlStreamWriter_setAutoFormattingIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QXmlStreamWriter_setCodec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamWriter_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeAttribute), meth_QXmlStreamWriter_writeAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeAttributes), meth_QXmlStreamWriter_writeAttributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeCDATA), meth_QXmlStreamWriter_writeCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeCharacters), meth_QXmlStreamWriter_writeCharacters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeComment), meth_QXmlStreamWriter_writeComment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeCurrentToken), meth_QXmlStreamWriter_writeCurrentToken, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeDTD), meth_QXmlStreamWriter_writeDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeDefaultNamespace), meth_QXmlStreamWriter_writeDefaultNamespace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeEmptyElement), meth_QXmlStreamWriter_writeEmptyElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeEndDocument), meth_QXmlStreamWriter_writeEndDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeEndElement), meth_QXmlStreamWriter_writeEndElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeEntityReference), meth_QXmlStreamWriter_writeEntityReference, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeNamespace), (PyCFunction)meth_QXmlStreamWriter_writeNamespace, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeProcessingInstruction), (PyCFunction)meth_QXmlStreamWriter_writeProcessingInstruction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeStartDocument), meth_QXmlStreamWriter_writeStartDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeStartElement), meth_QXmlStreamWriter_writeStartElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeTextElement), meth_QXmlStreamWriter_writeTextElement, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QXmlStreamWriter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamWriter,
        {0}
    },
    {
        sipNameNr_QXmlStreamWriter,
        {0, 0, 1},
        25, methods_QXmlStreamWriter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlStreamWriter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlStreamWriter,
    0,
    0,
    0,
    release_QXmlStreamWriter,
    cast_QXmlStreamWriter,
    0,
    0,
    0
},
    0,
    0,
    0
};
