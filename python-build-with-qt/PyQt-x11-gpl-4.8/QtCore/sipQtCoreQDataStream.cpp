/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 39 "sipQtCoreQDataStream.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtCoreQDataStream.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 49 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 52 "sipQtCoreQDataStream.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 55 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 58 "sipQtCoreQDataStream.cpp"
#line 198 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 61 "sipQtCoreQDataStream.cpp"
#line 343 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 64 "sipQtCoreQDataStream.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 67 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 70 "sipQtCoreQDataStream.cpp"
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 73 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 76 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 79 "sipQtCoreQDataStream.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 82 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 85 "sipQtCoreQDataStream.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 88 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 94 "sipQtCoreQDataStream.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 97 "sipQtCoreQDataStream.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 100 "sipQtCoreQDataStream.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 103 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 106 "sipQtCoreQDataStream.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 109 "sipQtCoreQDataStream.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 112 "sipQtCoreQDataStream.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 115 "sipQtCoreQDataStream.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 118 "sipQtCoreQDataStream.cpp"
#line 82 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 121 "sipQtCoreQDataStream.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 124 "sipQtCoreQDataStream.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 127 "sipQtCoreQDataStream.cpp"


class sipQDataStream : public QDataStream
{
public:
    sipQDataStream();
    sipQDataStream(QIODevice *);
    sipQDataStream(QByteArray *,QIODevice::OpenMode);
    sipQDataStream(const QByteArray&);
    ~sipQDataStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDataStream(const sipQDataStream &);
    sipQDataStream &operator = (const sipQDataStream &);
};

sipQDataStream::sipQDataStream(): QDataStream(), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QIODevice *a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QByteArray *a0,QIODevice::OpenMode a1): QDataStream(a0,a1), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(const QByteArray& a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::~sipQDataStream()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_QDataStream_device(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_device, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_unsetDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_unsetDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetDevice();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_unsetDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_atEnd, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_status(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_status, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::Status a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_Status, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetStatus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_resetStatus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::ByteOrder sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->byteOrder();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_byteOrder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setByteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setByteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::ByteOrder a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_ByteOrder, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setByteOrder(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setByteOrder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_version(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->version();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_version, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVersion(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setVersion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_skipRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_skipRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->skipRawData(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_skipRawData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes = 0;

#line 103 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 508 "sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint8 sipRes = 0;

#line 110 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 537 "sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint8 sipRes = 0;

#line 117 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 566 "sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint16 sipRes = 0;

#line 124 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 595 "sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt16, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint16 sipRes = 0;

#line 131 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 624 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt16, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint32 sipRes = 0;

#line 138 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 653 "sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint32 sipRes = 0;

#line 145 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 682 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            qint64 sipRes = 0;

#line 152 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 711 "sipQtCoreQDataStream.cpp"

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt64, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            quint64 sipRes = 0;

#line 159 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 740 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt64, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes = 0;

#line 166 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 769 "sipQtCoreQDataStream.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBool, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            float sipRes = 0;

#line 173 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 798 "sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readFloat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            double sipRes = 0;

#line 180 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 827 "sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readDouble, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 187 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    char *s;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> s;
    Py_END_ALLOW_THREADS

    if (s)
    {
        sipRes = SIPBytes_FromString(s);
        delete[] s;
    }
    else
    {
        sipRes = Py_None;
        Py_INCREF(Py_None);
    }
#line 869 "sipQtCoreQDataStream.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 207 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 901 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt8(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt8(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint8 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bc", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 214 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 934 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt8(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt8(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint8 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bc", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 221 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 967 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt16(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt16(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint16 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bh", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 228 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1000 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt16, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt16(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt16(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bt", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 235 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1033 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt16, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt32(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt32(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint32 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 242 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1066 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt32(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt32(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint32 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 249 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1099 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt64(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt64(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 256 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1132 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt64, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt64(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt64(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint64 a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bo", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 263 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1165 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt64, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeBool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 270 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1198 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBool, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_f,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bf", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 277 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1231 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeFloat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_f,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 284 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1264 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeDouble, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_str,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bs", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 291 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1297 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QString *sipRes = 0;

#line 298 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QString;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1329 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qstr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 307 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1362 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QStringList *sipRes = 0;

#line 314 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QStringList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1395 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQStringList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQStringList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQStringList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qstrlst,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
#line 323 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1428 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQStringList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariant *sipRes = 0;

#line 330 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QVariant;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1461 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariant, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qvar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
#line 339 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1494 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariant, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantList *sipRes = 0;

#line 346 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1527 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQVariantList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantList * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qvarlst,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QList_0100QVariant,&a0, &a0State))
        {
#line 355 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1560 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantList *>(a0),sipType_QList_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantMap *sipRes = 0;

#line 362 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantMap;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1593 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantMap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQVariantMap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantMap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantMap * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qvarmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
#line 371 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1626 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantMap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QVariantHash *sipRes = 0;

#line 380 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantHash;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 1659 "sipQtCoreQDataStream.cpp"

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantHash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeQVariantHash(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantHash(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantHash * a0;
        int a0State = 0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_qvarhash,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QHash_0100QString_0100QVariant,&a0, &a0State))
        {
#line 389 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 1692 "sipQtCoreQDataStream.cpp"
            sipReleaseType(const_cast<QVariantHash *>(a0),sipType_QHash_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantHash, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 397 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
        char *s;
        uint l;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readBytes(s, l);
        Py_END_ALLOW_THREADS
        
        if ((sipRes = SIPBytes_FromStringAndSize(s, l)) == NULL)
            sipIsErr = 1;
        
        if (s)
            delete[] s;
#line 1733 "sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBytes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readRawData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readRawData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDataStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_len,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 413 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
        char *s = new char[a0];
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readRawData(s, a0);
        Py_END_ALLOW_THREADS
        
        sipRes = SIPBytes_FromStringAndSize(s, a0);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] s;
#line 1780 "sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readRawData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->writeBytes(a0,(uint)a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBytes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeRawData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeRawData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            QDataStream::FloatingPointPrecision sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->floatingPointPrecision();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_FloatingPointPrecision);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_floatingPointPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream::FloatingPointPrecision a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_FloatingPointPrecision, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFloatingPointPrecision(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setFloatingPointPrecision, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QDataStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream * a0;
        const QBitArray * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QByteArray * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QChar * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QChar,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QDate * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QTime * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QDateTime * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QEasingCurve * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLine * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLineF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLocale * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QPoint * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QPointF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRect * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRectF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRegExp * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QSize * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QSizeF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream * a0;
        const QString * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QString,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream * a0;
        const QStringList * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStringList,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QUrl * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QUuid * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QVariant, 0, 2))
    {
        QDataStream * a0;
        const QVariant * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QDataStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream * a0;
        QBitArray * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QByteArray * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QChar * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QChar,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QDate * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QTime * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QDateTime * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QEasingCurve * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLine * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLineF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLocale * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QPoint * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QPointF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRect * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRectF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRegExp * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QSize * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QSizeF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream * a0;
        QString * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QString,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QDataStream * a0;
        QStringList * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QStringList,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QUrl * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QUuid * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QVariant, 0, 2))
    {
        QDataStream * a0;
        QVariant * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,rshift_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDataStream(void *, const sipTypeDef *);}
static void *cast_QDataStream(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDataStream)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataStream(void *, int);}
static void release_QDataStream(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDataStream *>(sipCppV);
    else
        delete reinterpret_cast<QDataStream *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDataStream(sipSimpleWrapper *);}
static void dealloc_QDataStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDataStream *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDataStream(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDataStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDataStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDataStream *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QIODevice * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QByteArray * a0;
        QIODevice::OpenMode * a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QByteArray * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QByteArray, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDataStream[] = {
    {(void *)slot_QDataStream___lshift__, lshift_slot},
    {(void *)slot_QDataStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDataStream[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QDataStream_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QDataStream_byteOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QDataStream_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_floatingPointPrecision), meth_QDataStream_floatingPointPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readBool), meth_QDataStream_readBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readBytes), meth_QDataStream_readBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readDouble), meth_QDataStream_readDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readFloat), meth_QDataStream_readFloat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt), meth_QDataStream_readInt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt16), meth_QDataStream_readInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt32), meth_QDataStream_readInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt64), meth_QDataStream_readInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt8), meth_QDataStream_readInt8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQString), meth_QDataStream_readQString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQStringList), meth_QDataStream_readQStringList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQVariant), meth_QDataStream_readQVariant, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQVariantHash), meth_QDataStream_readQVariantHash, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQVariantList), meth_QDataStream_readQVariantList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readQVariantMap), meth_QDataStream_readQVariantMap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readRawData), (PyCFunction)meth_QDataStream_readRawData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_readString), meth_QDataStream_readString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt16), meth_QDataStream_readUInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt32), meth_QDataStream_readUInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt64), meth_QDataStream_readUInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt8), meth_QDataStream_readUInt8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QDataStream_resetStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setByteOrder), meth_QDataStream_setByteOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QDataStream_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFloatingPointPrecision), meth_QDataStream_setFloatingPointPrecision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QDataStream_setStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QDataStream_setVersion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_skipRawData), meth_QDataStream_skipRawData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_status), meth_QDataStream_status, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsetDevice), meth_QDataStream_unsetDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_version), meth_QDataStream_version, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeBool), (PyCFunction)meth_QDataStream_writeBool, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeBytes), meth_QDataStream_writeBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeDouble), (PyCFunction)meth_QDataStream_writeDouble, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeFloat), (PyCFunction)meth_QDataStream_writeFloat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt), (PyCFunction)meth_QDataStream_writeInt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt16), (PyCFunction)meth_QDataStream_writeInt16, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt32), (PyCFunction)meth_QDataStream_writeInt32, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt64), (PyCFunction)meth_QDataStream_writeInt64, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt8), (PyCFunction)meth_QDataStream_writeInt8, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQString), (PyCFunction)meth_QDataStream_writeQString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQStringList), (PyCFunction)meth_QDataStream_writeQStringList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQVariant), (PyCFunction)meth_QDataStream_writeQVariant, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQVariantHash), (PyCFunction)meth_QDataStream_writeQVariantHash, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQVariantList), (PyCFunction)meth_QDataStream_writeQVariantList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeQVariantMap), (PyCFunction)meth_QDataStream_writeQVariantMap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeRawData), meth_QDataStream_writeRawData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeString), (PyCFunction)meth_QDataStream_writeString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt16), (PyCFunction)meth_QDataStream_writeUInt16, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt32), (PyCFunction)meth_QDataStream_writeUInt32, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt64), (PyCFunction)meth_QDataStream_writeUInt64, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt8), (PyCFunction)meth_QDataStream_writeUInt8, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QDataStream[] = {
    {sipName_BigEndian, QDataStream::BigEndian, 38},
    {sipName_DoublePrecision, QDataStream::DoublePrecision, 39},
    {sipName_LittleEndian, QDataStream::LittleEndian, 38},
    {sipName_Ok, QDataStream::Ok, 40},
    {sipName_Qt_1_0, QDataStream::Qt_1_0, 41},
    {sipName_Qt_2_0, QDataStream::Qt_2_0, 41},
    {sipName_Qt_2_1, QDataStream::Qt_2_1, 41},
    {sipName_Qt_3_0, QDataStream::Qt_3_0, 41},
    {sipName_Qt_3_1, QDataStream::Qt_3_1, 41},
    {sipName_Qt_3_3, QDataStream::Qt_3_3, 41},
    {sipName_Qt_4_0, QDataStream::Qt_4_0, 41},
    {sipName_Qt_4_1, QDataStream::Qt_4_1, 41},
    {sipName_Qt_4_2, QDataStream::Qt_4_2, 41},
    {sipName_Qt_4_3, QDataStream::Qt_4_3, 41},
    {sipName_Qt_4_4, QDataStream::Qt_4_4, 41},
    {sipName_Qt_4_5, QDataStream::Qt_4_5, 41},
    {sipName_Qt_4_6, QDataStream::Qt_4_6, 41},
    {sipName_Qt_4_7, QDataStream::Qt_4_7, 41},
    {sipName_ReadCorruptData, QDataStream::ReadCorruptData, 40},
    {sipName_ReadPastEnd, QDataStream::ReadPastEnd, 40},
    {sipName_SinglePrecision, QDataStream::SinglePrecision, 39},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QDataStream = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDataStream,
        {0}
    },
    {
        sipNameNr_QDataStream,
        {0, 0, 1},
        56, methods_QDataStream,
        21, enummembers_QDataStream,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDataStream,
    init_QDataStream,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDataStream,
    0,
    0,
    0,
    release_QDataStream,
    cast_QDataStream,
    0,
    0,
    0
},
    0,
    0,
    0
};
