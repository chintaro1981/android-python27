/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtimeline.sip"
#include <qtimeline.h>
#line 39 "sipQtCoreQTimeLine.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQTimeLine.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 46 "sipQtCoreQTimeLine.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQTimeLine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtCoreQTimeLine.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtCoreQTimeLine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "sipQtCoreQTimeLine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "sipQtCoreQTimeLine.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 64 "sipQtCoreQTimeLine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtCoreQTimeLine.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtCoreQTimeLine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 73 "sipQtCoreQTimeLine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76 "sipQtCoreQTimeLine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79 "sipQtCoreQTimeLine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82 "sipQtCoreQTimeLine.cpp"


class sipQTimeLine : public QTimeLine
{
public:
    sipQTimeLine(int,QObject *);
    virtual ~sipQTimeLine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    qreal valueForTime(int) const;
    void timerEvent(QTimerEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTimeLine(const sipQTimeLine &);
    sipQTimeLine &operator = (const sipQTimeLine &);

    char sipPyMethods[8];
};

sipQTimeLine::sipQTimeLine(int a0,QObject *a1): QTimeLine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTimeLine::~sipQTimeLine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTimeLine::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QTimeLine);
}

int sipQTimeLine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTimeLine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTimeLine,_c,_id,_a);

    return _id;
}

void *sipQTimeLine::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QTimeLine,_clname)) ? this : QTimeLine::qt_metacast(_clname);
}

qreal sipQTimeLine::valueForTime(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_valueForTime);

    if (!meth)
        return QTimeLine::valueForTime(a0);

    extern double sipVH_QtCore_10(sip_gilstate_t,PyObject *,int);

    return sipVH_QtCore_10(sipGILState,meth,a0);
}

void sipQTimeLine::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTimeLine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t,PyObject *,QTimerEvent *);

    sipVH_QtCore_9(sipGILState,meth,a0);
}

bool sipQTimeLine::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t,PyObject *,QEvent *);

    return sipVH_QtCore_5(sipGILState,meth,a0);
}

bool sipQTimeLine::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_18(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return sipVH_QtCore_18(sipGILState,meth,a0,a1);
}

void sipQTimeLine::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t,PyObject *,QChildEvent *);

    sipVH_QtCore_25(sipGILState,meth,a0);
}

void sipQTimeLine::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,QEvent *);

    sipVH_QtCore_17(sipGILState,meth,a0);
}

void sipQTimeLine::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

void sipQTimeLine::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_24(sip_gilstate_t,PyObject *,const char *);

    sipVH_QtCore_24(sipGILState,meth,a0);
}

QObject * sipQTimeLine::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTimeLine::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQTimeLine::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTimeLine::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTimeLine::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTimeLine::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQTimeLine::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QTimeLine::timerEvent(a0) : timerEvent(a0));
}


extern "C" {static PyObject *meth_QTimeLine_sender(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 358 "sipQtCoreQTimeLine.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_receivers(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 400 "sipQtCoreQTimeLine.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_state(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_state, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loopCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_loopCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setLoopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setLoopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLoopCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setLoopCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_direction(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->direction();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_direction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine::Direction a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_Direction, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_duration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->duration();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_duration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDuration(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_startFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_startFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startFrame();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_startFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setStartFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setStartFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStartFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setStartFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_endFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_endFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endFrame();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_endFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setEndFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEndFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEndFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEndFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setFrameRange(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setFrameRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTimeLine, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFrameRange(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setFrameRange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->updateInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_updateInterval, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUpdateInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setUpdateInterval, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_curveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_curveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::CurveShape sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->curveShape();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_CurveShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_curveShape, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setCurveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine::CurveShape a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_CurveShape, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurveShape(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurveShape, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrame();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentValue();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_frameForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_frameForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->frameForTime(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_frameForTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_valueForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_valueForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTimeLine::valueForTime(a0) : sipCpp->valueForTime(a0));
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_valueForTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_resume(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resume();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_resume, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurrentTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaused(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setPaused, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_start(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_start, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_stop(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_toggleDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_toggleDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toggleDirection();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_toggleDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QEasingCurve *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QEasingCurve(sipCpp->easingCurve());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_easingCurve, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTimeLine_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEasingCurve * a0;
        int a0State = 0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEasingCurve(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEasingCurve, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTimeLine(void *, const sipTypeDef *);}
static void *cast_QTimeLine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTimeLine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTimeLine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimeLine(void *, int);}
static void release_QTimeLine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTimeLine *>(sipCppV);
    else
        delete reinterpret_cast<QTimeLine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTimeLine(sipSimpleWrapper *);}
static void dealloc_QTimeLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTimeLine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTimeLine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTimeLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTimeLine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTimeLine *sipCpp = 0;

    {
        int a0 = 1000;
        QObject * a1 = 0;

        static const char *sipKwdList[] = {
            sipName_duration,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iJH", &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTimeLine(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTimeLine[] = {{133, 255, 1}};


static PyMethodDef methods_QTimeLine[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QTimeLine_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QTimeLine_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTimeLine_currentFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_QTimeLine_currentTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentValue), meth_QTimeLine_currentValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_curveShape), meth_QTimeLine_curveShape, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QTimeLine_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_direction), meth_QTimeLine_direction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QTimeLine_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_duration), meth_QTimeLine_duration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_easingCurve), meth_QTimeLine_easingCurve, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endFrame), meth_QTimeLine_endFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frameForTime), meth_QTimeLine_frameForTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QTimeLine_loopCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QTimeLine_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resume), meth_QTimeLine_resume, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QTimeLine_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentTime), meth_QTimeLine_setCurrentTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurveShape), meth_QTimeLine_setCurveShape, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QTimeLine_setDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QTimeLine_setDuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEasingCurve), meth_QTimeLine_setEasingCurve, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEndFrame), meth_QTimeLine_setEndFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFrameRange), meth_QTimeLine_setFrameRange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLoopCount), meth_QTimeLine_setLoopCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QTimeLine_setPaused, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStartFrame), meth_QTimeLine_setStartFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QTimeLine_setUpdateInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_start), meth_QTimeLine_start, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startFrame), meth_QTimeLine_startFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QTimeLine_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_QTimeLine_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTimeLine_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toggleDirection), meth_QTimeLine_toggleDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QTimeLine_updateInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_valueForTime), meth_QTimeLine_valueForTime, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTimeLine[] = {
    {sipName_Backward, QTimeLine::Backward, 227},
    {sipName_CosineCurve, QTimeLine::CosineCurve, 226},
    {sipName_EaseInCurve, QTimeLine::EaseInCurve, 226},
    {sipName_EaseInOutCurve, QTimeLine::EaseInOutCurve, 226},
    {sipName_EaseOutCurve, QTimeLine::EaseOutCurve, 226},
    {sipName_Forward, QTimeLine::Forward, 227},
    {sipName_LinearCurve, QTimeLine::LinearCurve, 226},
    {sipName_NotRunning, QTimeLine::NotRunning, 228},
    {sipName_Paused, QTimeLine::Paused, 228},
    {sipName_Running, QTimeLine::Running, 228},
    {sipName_SineCurve, QTimeLine::SineCurve, 226},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTimeLine[] = {
    {"valueChanged(qreal)", 0, 0},
    {"stateChanged(QTimeLine::State)", 0, 0},
    {"frameChanged(int)", 0, 0},
    {"finished()", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QTimeLine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTimeLine,
        {0}
    },
    {
        sipNameNr_QTimeLine,
        {0, 0, 1},
        36, methods_QTimeLine,
        11, enummembers_QTimeLine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTimeLine,
    0,
    init_QTimeLine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTimeLine,
    0,
    0,
    0,
    release_QTimeLine,
    cast_QTimeLine,
    0,
    0,
    0
},
    &QTimeLine::staticMetaObject,
    0,
    pyqt4_signals_QTimeLine
};
