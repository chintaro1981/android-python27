/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "sipQtCoreQRectF.cpp"

#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 43 "sipQtCoreQRectF.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 46 "sipQtCoreQRectF.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtCoreQRectF.cpp"


extern "C" {static PyObject *meth_QRectF_normalized(PyObject *, PyObject *);}
static PyObject *meth_QRectF_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->normalized());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_normalized, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_left(PyObject *, PyObject *);}
static PyObject *meth_QRectF_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->left();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_left, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_top(PyObject *, PyObject *);}
static PyObject *meth_QRectF_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->top();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_top, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_right(PyObject *, PyObject *);}
static PyObject *meth_QRectF_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->right();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_right, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_bottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottom();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setX(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setX, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setY(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setY, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->topLeft());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_topLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->bottomRight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottomRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_topRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_topRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->topRight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_topRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_bottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->bottomLeft());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottomLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_contains(PyObject *, PyObject *);}
static PyObject *meth_QRectF_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        qreal a0;
        qreal a1;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_contains, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRectF_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->intersects(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_intersects, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isEmpty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_x(PyObject *, PyObject *);}
static PyObject *meth_QRectF_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_x, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_y(PyObject *, PyObject *);}
static PyObject *meth_QRectF_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_y, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeft(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setTop(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTopLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTopRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottomLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottomRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_center(PyObject *, PyObject *);}
static PyObject *meth_QRectF_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->center());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_center, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveLeft(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveTop(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveRight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveBottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTopLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTopLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTopRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTopRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottomLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottomLeft, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottomRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottomRight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveCenter(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCenter(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveCenter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_width(PyObject *, PyObject *);}
static PyObject *meth_QRectF_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_width, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_height(PyObject *, PyObject *);}
static PyObject *meth_QRectF_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_height, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_size(PyObject *, PyObject *);}
static PyObject *meth_QRectF_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_translate(PyObject *, PyObject *);}
static PyObject *meth_QRectF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTo(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTo(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_translated(PyObject *, PyObject *);}
static PyObject *meth_QRectF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->translated(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    {
        const QPointF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->translated(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_translated, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_getRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getRect(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_getRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_getCoords(PyObject *, PyObject *);}
static PyObject *meth_QRectF_getCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getCoords(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_getCoords, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setCoords(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCoords(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setCoords, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_adjust(PyObject *, PyObject *);}
static PyObject *meth_QRectF_adjust(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->adjust(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_adjust, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QRectF_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->adjusted(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_adjusted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setHeight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_setSize(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSizeF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QSizeF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_intersect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_intersect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->intersect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_intersect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_unite(PyObject *, PyObject *);}
static PyObject *meth_QRectF_unite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->unite(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_unite, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_toAlignedRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_toAlignedRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->toAlignedRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_toAlignedRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_toRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_toRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->toRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_toRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRectF_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->intersected(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_intersected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QRectF_united(PyObject *, PyObject *);}
static PyObject *meth_QRectF_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->united(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_united, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QRectF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QRectF,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QRectF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QRectF,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QRectF___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QRectF::operator&=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRectF___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QRectF::operator|=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QRectF___bool__(PyObject *);}
static int slot_QRectF___bool__(PyObject *sipSelf)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 234 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
        sipRes = sipCpp->isValid();
#line 1864 "sipQtCoreQRectF.cpp"

            return sipRes;
        }
    }
}


extern "C" {static int slot_QRectF___contains__(PyObject *,PyObject *);}
static int slot_QRectF___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointF, &a0))
        {
            int sipRes = 0;

#line 219 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 1891 "sipQtCoreQRectF.cpp"

            return sipRes;
        }
    }

    {
        const QRectF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            int sipRes = 0;

#line 225 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 1906 "sipQtCoreQRectF.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName___contains__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QRectF___and__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF * a0;
        const QRectF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((*a0 & *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,and_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QRectF___or__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QRectF * a0;
        const QRectF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((*a0 | *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,or_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QRectF___repr__(PyObject *);}
static PyObject *slot_QRectF___repr__(PyObject *sipSelf)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 175 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
        PyObject *l = PyFloat_FromDouble(sipCpp->left());
        PyObject *t = PyFloat_FromDouble(sipCpp->top());
        PyObject *w = PyFloat_FromDouble(sipCpp->width());
        PyObject *h = PyFloat_FromDouble(sipCpp->height());
        
        if (l && t && w && h)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QRectF(%R, %R, %R, %R)", l, t, w, h);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QRectF(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(l));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(t));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(w));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(h));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(l);
        Py_XDECREF(t);
        Py_XDECREF(w);
        Py_XDECREF(h);
#line 2019 "sipQtCoreQRectF.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QRectF(void *, const sipTypeDef *);}
static void *cast_QRectF(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QRectF)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRectF(void *, int);}
static void release_QRectF(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QRectF *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QRectF(void *);}
static PyObject *pickle_QRectF(void *sipCppV)
{
    QRectF *sipCpp = reinterpret_cast<QRectF *>(sipCppV);
    PyObject *sipRes;

#line 162 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
    sipRes = Py_BuildValue((char *)"dddd", sipCpp->x(), sipCpp->y(), sipCpp->width(), sipCpp->height());
#line 2058 "sipQtCoreQRectF.cpp"

    return sipRes;
}


extern "C" {static void assign_QRectF(void *, SIP_SSIZE_T, const void *);}
static void assign_QRectF(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QRectF *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QRectF *>(sipSrc);
}


extern "C" {static void *array_QRectF(SIP_SSIZE_T);}
static void *array_QRectF(SIP_SSIZE_T sipNrElem)
{
    return new QRectF[sipNrElem];
}


extern "C" {static void *copy_QRectF(const void *, SIP_SSIZE_T);}
static void *copy_QRectF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QRectF(reinterpret_cast<const QRectF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRectF(sipSimpleWrapper *);}
static void dealloc_QRectF(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QRectF(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QRectF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QRectF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QRectF *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPointF * a0;
        const QSizeF * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_QPointF, &a0, sipType_QSizeF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF(*a0,*a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPointF * a0;
        const QPointF * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_QPointF, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF(*a0,*a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QRect * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QRectF * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRectF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRectF[] = {
    {(void *)slot_QRectF___eq__, eq_slot},
    {(void *)slot_QRectF___ne__, ne_slot},
    {(void *)slot_QRectF___iand__, iand_slot},
    {(void *)slot_QRectF___ior__, ior_slot},
    {(void *)slot_QRectF___bool__, bool_slot},
    {(void *)slot_QRectF___contains__, contains_slot},
    {(void *)slot_QRectF___and__, and_slot},
    {(void *)slot_QRectF___or__, or_slot},
    {(void *)slot_QRectF___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRectF[] = {
    {SIP_MLNAME_CAST(sipName_adjust), meth_QRectF_adjust, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_adjusted), meth_QRectF_adjusted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottom), meth_QRectF_bottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottomLeft), meth_QRectF_bottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottomRight), meth_QRectF_bottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_center), meth_QRectF_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QRectF_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCoords), meth_QRectF_getCoords, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRect), meth_QRectF_getRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QRectF_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersect), meth_QRectF_intersect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QRectF_intersected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QRectF_intersects, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRectF_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QRectF_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRectF_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_left), meth_QRectF_left, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottom), meth_QRectF_moveBottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottomLeft), meth_QRectF_moveBottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottomRight), meth_QRectF_moveBottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCenter), meth_QRectF_moveCenter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveLeft), meth_QRectF_moveLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveRight), meth_QRectF_moveRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QRectF_moveTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTop), meth_QRectF_moveTop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTopLeft), meth_QRectF_moveTopLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTopRight), meth_QRectF_moveTopRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QRectF_normalized, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_right), meth_QRectF_right, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QRectF_setBottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomLeft), meth_QRectF_setBottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomRight), meth_QRectF_setBottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCoords), meth_QRectF_setCoords, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QRectF_setHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QRectF_setLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QRectF_setRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QRectF_setRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QRectF_setSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QRectF_setTop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopLeft), meth_QRectF_setTopLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopRight), meth_QRectF_setTopRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QRectF_setWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setX), meth_QRectF_setX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setY), meth_QRectF_setY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QRectF_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAlignedRect), meth_QRectF_toAlignedRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toRect), meth_QRectF_toRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_top), meth_QRectF_top, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLeft), meth_QRectF_topLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topRight), meth_QRectF_topRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QRectF_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translated), meth_QRectF_translated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unite), meth_QRectF_unite, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_united), meth_QRectF_united, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QRectF_width, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x), meth_QRectF_x, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y), meth_QRectF_y, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QRectF = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QRectF,
        {0}
    },
    {
        sipNameNr_QRectF,
        {0, 0, 1},
        57, methods_QRectF,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QRectF,
    init_QRectF,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRectF,
    assign_QRectF,
    array_QRectF,
    copy_QRectF,
    release_QRectF,
    cast_QRectF,
    0,
    0,
    pickle_QRectF
},
    0,
    0,
    0
};
