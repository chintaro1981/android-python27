/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 39 "sipQtCoreQLocale.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQLocale.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtCoreQLocale.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 49 "sipQtCoreQLocale.cpp"
#line 876 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 52 "sipQtCoreQLocale.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 55 "sipQtCoreQLocale.cpp"
#line 343 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 58 "sipQtCoreQLocale.cpp"
#line 198 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 61 "sipQtCoreQLocale.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 64 "sipQtCoreQLocale.cpp"


extern "C" {static PyObject *meth_QLocale_language(PyObject *, PyObject *);}
static PyObject *meth_QLocale_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::Language sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->language();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Language);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_language, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_country(PyObject *, PyObject *);}
static PyObject *meth_QLocale_country(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::Country sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->country();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Country);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_country, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_name, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            short sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(hb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toShort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toUShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(tb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUShort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ub)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUInt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toLongLong, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, &a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toULongLong, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(*a0,&a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(fb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toFloat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ok,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(*a0,&a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(db)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDouble, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BXi", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BXd|ci", &sipSelf, sipType_QLocale, &sipCpp, &a0, &a1, &a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bo", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Language, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::languageToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_languageToString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Country a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Country, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::countryToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_countryToString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QLocale::setDefault(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setDefault, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_c(PyObject *, PyObject *);}
static PyObject *meth_QLocale_c(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::c());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_c, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_system(PyObject *, PyObject *);}
static PyObject *meth_QLocale_system(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::system());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_system, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dateFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_timeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_timeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->timeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_timeFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dateTimeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateTimeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateTimeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateTimeFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QDate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDateTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDateTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDateTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_decimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLocale_decimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->decimalPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_decimalPoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_groupSeparator(PyObject *, PyObject *);}
static PyObject *meth_QLocale_groupSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->groupSeparator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_groupSeparator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_percent(PyObject *, PyObject *);}
static PyObject *meth_QLocale_percent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->percent());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_percent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_zeroDigit(PyObject *, PyObject *);}
static PyObject *meth_QLocale_zeroDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->zeroDigit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_zeroDigit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_negativeSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_negativeSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->negativeSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_negativeSign, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_exponential(PyObject *, PyObject *);}
static PyObject *meth_QLocale_exponential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->exponential());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_exponential, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_monthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_monthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->monthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_monthName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dayName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_setNumberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setNumberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::NumberOptions * a0;
        int a0State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumberOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setNumberOptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_numberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_numberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::NumberOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale::NumberOptions(sipCpp->numberOptions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_numberOptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Language, &a0))
        {
            QList<QLocale::Country> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QLocale::Country>(QLocale::countriesForLanguage(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale_Country,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_countriesForLanguage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QLocale_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QLocale::MeasurementSystem sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->measurementSystem();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_measurementSystem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_positiveSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_positiveSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->positiveSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_positiveSign, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_standaloneMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneMonthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneMonthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneMonthName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_standaloneDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneDayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneDayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneDayName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_amText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_amText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->amText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_amText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_pmText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_pmText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->pmText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_pmText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QLocale_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_textDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QLocale___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QLocale,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLocale___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QLocale,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLocale(void *, const sipTypeDef *);}
static void *cast_QLocale(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QLocale)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale(void *, int);}
static void release_QLocale(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QLocale *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QLocale(void *, SIP_SSIZE_T, const void *);}
static void assign_QLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLocale *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLocale *>(sipSrc);
}


extern "C" {static void *array_QLocale(SIP_SSIZE_T);}
static void *array_QLocale(SIP_SSIZE_T sipNrElem)
{
    return new QLocale[sipNrElem];
}


extern "C" {static void *copy_QLocale(const void *, SIP_SSIZE_T);}
static void *copy_QLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLocale(reinterpret_cast<const QLocale *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale(sipSimpleWrapper *);}
static void dealloc_QLocale(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLocale(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QLocale(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QLocale(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLocale *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        QLocale::Language a0;
        QLocale::Country a1 = QLocale::AnyCountry;

        static const char *sipKwdList[] = {
            NULL,
            sipName_country,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QLocale_Language, &a0, sipType_QLocale_Country, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QLocale * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale[] = {
    {(void *)slot_QLocale___ne__, ne_slot},
    {(void *)slot_QLocale___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLocale[] = {
    {SIP_MLNAME_CAST(sipName_amText), meth_QLocale_amText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_c), meth_QLocale_c, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_countriesForLanguage), meth_QLocale_countriesForLanguage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_country), meth_QLocale_country, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_countryToString), meth_QLocale_countryToString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dateFormat), (PyCFunction)meth_QLocale_dateFormat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dateTimeFormat), (PyCFunction)meth_QLocale_dateTimeFormat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dayName), (PyCFunction)meth_QLocale_dayName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_decimalPoint), meth_QLocale_decimalPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exponential), meth_QLocale_exponential, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_groupSeparator), meth_QLocale_groupSeparator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_language), meth_QLocale_language, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageToString), meth_QLocale_languageToString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QLocale_measurementSystem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_monthName), (PyCFunction)meth_QLocale_monthName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QLocale_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_negativeSign), meth_QLocale_negativeSign, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOptions), meth_QLocale_numberOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_percent), meth_QLocale_percent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pmText), meth_QLocale_pmText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_positiveSign), meth_QLocale_positiveSign, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefault), meth_QLocale_setDefault, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumberOptions), meth_QLocale_setNumberOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standaloneDayName), (PyCFunction)meth_QLocale_standaloneDayName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_standaloneMonthName), (PyCFunction)meth_QLocale_standaloneMonthName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_system), meth_QLocale_system, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QLocale_textDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timeFormat), (PyCFunction)meth_QLocale_timeFormat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toDate), (PyCFunction)meth_QLocale_toDate, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toDateTime), (PyCFunction)meth_QLocale_toDateTime, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toDouble), (PyCFunction)meth_QLocale_toDouble, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toFloat), (PyCFunction)meth_QLocale_toFloat, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toInt), (PyCFunction)meth_QLocale_toInt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toLongLong), (PyCFunction)meth_QLocale_toLongLong, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toShort), (PyCFunction)meth_QLocale_toShort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QLocale_toString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toTime), (PyCFunction)meth_QLocale_toTime, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toUInt), (PyCFunction)meth_QLocale_toUInt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toULongLong), (PyCFunction)meth_QLocale_toULongLong, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toUShort), (PyCFunction)meth_QLocale_toUShort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_zeroDigit), meth_QLocale_zeroDigit, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QLocale[] = {
    {sipName_Abkhazian, QLocale::Abkhazian, 112},
    {sipName_Afan, QLocale::Afan, 112},
    {sipName_Afar, QLocale::Afar, 112},
    {sipName_Afghanistan, QLocale::Afghanistan, 110},
    {sipName_Afrikaans, QLocale::Afrikaans, 112},
    {sipName_Akan, QLocale::Akan, 112},
    {sipName_Albania, QLocale::Albania, 110},
    {sipName_Albanian, QLocale::Albanian, 112},
    {sipName_Algeria, QLocale::Algeria, 110},
    {sipName_AmericanSamoa, QLocale::AmericanSamoa, 110},
    {sipName_Amharic, QLocale::Amharic, 112},
    {sipName_Andorra, QLocale::Andorra, 110},
    {sipName_Angola, QLocale::Angola, 110},
    {sipName_Anguilla, QLocale::Anguilla, 110},
    {sipName_Antarctica, QLocale::Antarctica, 110},
    {sipName_AntiguaAndBarbuda, QLocale::AntiguaAndBarbuda, 110},
    {sipName_AnyCountry, QLocale::AnyCountry, 110},
    {sipName_Arabic, QLocale::Arabic, 112},
    {sipName_Argentina, QLocale::Argentina, 110},
    {sipName_Armenia, QLocale::Armenia, 110},
    {sipName_Armenian, QLocale::Armenian, 112},
    {sipName_Aruba, QLocale::Aruba, 110},
    {sipName_Assamese, QLocale::Assamese, 112},
    {sipName_Asu, QLocale::Asu, 112},
    {sipName_Atsam, QLocale::Atsam, 112},
    {sipName_Australia, QLocale::Australia, 110},
    {sipName_Austria, QLocale::Austria, 110},
    {sipName_Aymara, QLocale::Aymara, 112},
    {sipName_Azerbaijan, QLocale::Azerbaijan, 110},
    {sipName_Azerbaijani, QLocale::Azerbaijani, 112},
    {sipName_Bahamas, QLocale::Bahamas, 110},
    {sipName_Bahrain, QLocale::Bahrain, 110},
    {sipName_Bambara, QLocale::Bambara, 112},
    {sipName_Bangladesh, QLocale::Bangladesh, 110},
    {sipName_Barbados, QLocale::Barbados, 110},
    {sipName_Bashkir, QLocale::Bashkir, 112},
    {sipName_Basque, QLocale::Basque, 112},
    {sipName_Belarus, QLocale::Belarus, 110},
    {sipName_Belgium, QLocale::Belgium, 110},
    {sipName_Belize, QLocale::Belize, 110},
    {sipName_Bemba, QLocale::Bemba, 112},
    {sipName_Bena, QLocale::Bena, 112},
    {sipName_Bengali, QLocale::Bengali, 112},
    {sipName_Benin, QLocale::Benin, 110},
    {sipName_Bermuda, QLocale::Bermuda, 110},
    {sipName_Bhutan, QLocale::Bhutan, 110},
    {sipName_Bhutani, QLocale::Bhutani, 112},
    {sipName_Bihari, QLocale::Bihari, 112},
    {sipName_Bislama, QLocale::Bislama, 112},
    {sipName_Blin, QLocale::Blin, 112},
    {sipName_Bolivia, QLocale::Bolivia, 110},
    {sipName_BosniaAndHerzegowina, QLocale::BosniaAndHerzegowina, 110},
    {sipName_Bosnian, QLocale::Bosnian, 112},
    {sipName_Botswana, QLocale::Botswana, 110},
    {sipName_BouvetIsland, QLocale::BouvetIsland, 110},
    {sipName_Brazil, QLocale::Brazil, 110},
    {sipName_Breton, QLocale::Breton, 112},
    {sipName_BritishIndianOceanTerritory, QLocale::BritishIndianOceanTerritory, 110},
    {sipName_BritishVirginIslands, QLocale::BritishVirginIslands, 110},
    {sipName_BruneiDarussalam, QLocale::BruneiDarussalam, 110},
    {sipName_Bulgaria, QLocale::Bulgaria, 110},
    {sipName_Bulgarian, QLocale::Bulgarian, 112},
    {sipName_BurkinaFaso, QLocale::BurkinaFaso, 110},
    {sipName_Burmese, QLocale::Burmese, 112},
    {sipName_Burundi, QLocale::Burundi, 110},
    {sipName_Byelorussian, QLocale::Byelorussian, 112},
    {sipName_C, QLocale::C, 112},
    {sipName_Cambodia, QLocale::Cambodia, 110},
    {sipName_Cambodian, QLocale::Cambodian, 112},
    {sipName_Cameroon, QLocale::Cameroon, 110},
    {sipName_Canada, QLocale::Canada, 110},
    {sipName_CapeVerde, QLocale::CapeVerde, 110},
    {sipName_Catalan, QLocale::Catalan, 112},
    {sipName_CaymanIslands, QLocale::CaymanIslands, 110},
    {sipName_CentralAfricanRepublic, QLocale::CentralAfricanRepublic, 110},
    {sipName_CentralMoroccoTamazight, QLocale::CentralMoroccoTamazight, 112},
    {sipName_Chad, QLocale::Chad, 110},
    {sipName_Cherokee, QLocale::Cherokee, 112},
    {sipName_Chewa, QLocale::Chewa, 112},
    {sipName_Chiga, QLocale::Chiga, 112},
    {sipName_Chile, QLocale::Chile, 110},
    {sipName_China, QLocale::China, 110},
    {sipName_Chinese, QLocale::Chinese, 112},
    {sipName_ChristmasIsland, QLocale::ChristmasIsland, 110},
    {sipName_CocosIslands, QLocale::CocosIslands, 110},
    {sipName_Colognian, QLocale::Colognian, 112},
    {sipName_Colombia, QLocale::Colombia, 110},
    {sipName_Comoros, QLocale::Comoros, 110},
    {sipName_CookIslands, QLocale::CookIslands, 110},
    {sipName_Cornish, QLocale::Cornish, 112},
    {sipName_Corsican, QLocale::Corsican, 112},
    {sipName_CostaRica, QLocale::CostaRica, 110},
    {sipName_Croatia, QLocale::Croatia, 110},
    {sipName_Croatian, QLocale::Croatian, 112},
    {sipName_Cuba, QLocale::Cuba, 110},
    {sipName_Cyprus, QLocale::Cyprus, 110},
    {sipName_Czech, QLocale::Czech, 112},
    {sipName_CzechRepublic, QLocale::CzechRepublic, 110},
    {sipName_Danish, QLocale::Danish, 112},
    {sipName_DemocraticRepublicOfCongo, QLocale::DemocraticRepublicOfCongo, 110},
    {sipName_DemocraticRepublicOfKorea, QLocale::DemocraticRepublicOfKorea, 110},
    {sipName_Denmark, QLocale::Denmark, 110},
    {sipName_Divehi, QLocale::Divehi, 112},
    {sipName_Djibouti, QLocale::Djibouti, 110},
    {sipName_Dominica, QLocale::Dominica, 110},
    {sipName_DominicanRepublic, QLocale::DominicanRepublic, 110},
    {sipName_Dutch, QLocale::Dutch, 112},
    {sipName_EastTimor, QLocale::EastTimor, 110},
    {sipName_Ecuador, QLocale::Ecuador, 110},
    {sipName_Egypt, QLocale::Egypt, 110},
    {sipName_ElSalvador, QLocale::ElSalvador, 110},
    {sipName_Embu, QLocale::Embu, 112},
    {sipName_English, QLocale::English, 112},
    {sipName_EquatorialGuinea, QLocale::EquatorialGuinea, 110},
    {sipName_Eritrea, QLocale::Eritrea, 110},
    {sipName_Esperanto, QLocale::Esperanto, 112},
    {sipName_Estonia, QLocale::Estonia, 110},
    {sipName_Estonian, QLocale::Estonian, 112},
    {sipName_Ethiopia, QLocale::Ethiopia, 110},
    {sipName_Ewe, QLocale::Ewe, 112},
    {sipName_FalklandIslands, QLocale::FalklandIslands, 110},
    {sipName_FaroeIslands, QLocale::FaroeIslands, 110},
    {sipName_Faroese, QLocale::Faroese, 112},
    {sipName_FijiCountry, QLocale::FijiCountry, 110},
    {sipName_FijiLanguage, QLocale::FijiLanguage, 112},
    {sipName_Filipino, QLocale::Filipino, 112},
    {sipName_Finland, QLocale::Finland, 110},
    {sipName_Finnish, QLocale::Finnish, 112},
    {sipName_France, QLocale::France, 110},
    {sipName_French, QLocale::French, 112},
    {sipName_FrenchGuiana, QLocale::FrenchGuiana, 110},
    {sipName_FrenchPolynesia, QLocale::FrenchPolynesia, 110},
    {sipName_FrenchSouthernTerritories, QLocale::FrenchSouthernTerritories, 110},
    {sipName_Frisian, QLocale::Frisian, 112},
    {sipName_Friulian, QLocale::Friulian, 112},
    {sipName_Fulah, QLocale::Fulah, 112},
    {sipName_Ga, QLocale::Ga, 112},
    {sipName_Gabon, QLocale::Gabon, 110},
    {sipName_Gaelic, QLocale::Gaelic, 112},
    {sipName_Galician, QLocale::Galician, 112},
    {sipName_Gambia, QLocale::Gambia, 110},
    {sipName_Ganda, QLocale::Ganda, 112},
    {sipName_Geez, QLocale::Geez, 112},
    {sipName_Georgia, QLocale::Georgia, 110},
    {sipName_Georgian, QLocale::Georgian, 112},
    {sipName_German, QLocale::German, 112},
    {sipName_Germany, QLocale::Germany, 110},
    {sipName_Ghana, QLocale::Ghana, 110},
    {sipName_Gibraltar, QLocale::Gibraltar, 110},
    {sipName_Greece, QLocale::Greece, 110},
    {sipName_Greek, QLocale::Greek, 112},
    {sipName_Greenland, QLocale::Greenland, 110},
    {sipName_Greenlandic, QLocale::Greenlandic, 112},
    {sipName_Grenada, QLocale::Grenada, 110},
    {sipName_Guadeloupe, QLocale::Guadeloupe, 110},
    {sipName_Guam, QLocale::Guam, 110},
    {sipName_Guarani, QLocale::Guarani, 112},
    {sipName_Guatemala, QLocale::Guatemala, 110},
    {sipName_Guinea, QLocale::Guinea, 110},
    {sipName_GuineaBissau, QLocale::GuineaBissau, 110},
    {sipName_Gujarati, QLocale::Gujarati, 112},
    {sipName_Gusii, QLocale::Gusii, 112},
    {sipName_Guyana, QLocale::Guyana, 110},
    {sipName_Haiti, QLocale::Haiti, 110},
    {sipName_Hausa, QLocale::Hausa, 112},
    {sipName_Hawaiian, QLocale::Hawaiian, 112},
    {sipName_HeardAndMcDonaldIslands, QLocale::HeardAndMcDonaldIslands, 110},
    {sipName_Hebrew, QLocale::Hebrew, 112},
    {sipName_Hindi, QLocale::Hindi, 112},
    {sipName_Honduras, QLocale::Honduras, 110},
    {sipName_HongKong, QLocale::HongKong, 110},
    {sipName_Hungarian, QLocale::Hungarian, 112},
    {sipName_Hungary, QLocale::Hungary, 110},
    {sipName_Iceland, QLocale::Iceland, 110},
    {sipName_Icelandic, QLocale::Icelandic, 112},
    {sipName_Igbo, QLocale::Igbo, 112},
    {sipName_ImperialSystem, QLocale::ImperialSystem, 113},
    {sipName_India, QLocale::India, 110},
    {sipName_Indonesia, QLocale::Indonesia, 110},
    {sipName_Indonesian, QLocale::Indonesian, 112},
    {sipName_Interlingua, QLocale::Interlingua, 112},
    {sipName_Interlingue, QLocale::Interlingue, 112},
    {sipName_Inuktitut, QLocale::Inuktitut, 112},
    {sipName_Inupiak, QLocale::Inupiak, 112},
    {sipName_Iran, QLocale::Iran, 110},
    {sipName_Iraq, QLocale::Iraq, 110},
    {sipName_Ireland, QLocale::Ireland, 110},
    {sipName_Irish, QLocale::Irish, 112},
    {sipName_Israel, QLocale::Israel, 110},
    {sipName_Italian, QLocale::Italian, 112},
    {sipName_Italy, QLocale::Italy, 110},
    {sipName_IvoryCoast, QLocale::IvoryCoast, 110},
    {sipName_Jamaica, QLocale::Jamaica, 110},
    {sipName_Japan, QLocale::Japan, 110},
    {sipName_Japanese, QLocale::Japanese, 112},
    {sipName_Javanese, QLocale::Javanese, 112},
    {sipName_Jju, QLocale::Jju, 112},
    {sipName_Jordan, QLocale::Jordan, 110},
    {sipName_Kabuverdianu, QLocale::Kabuverdianu, 112},
    {sipName_Kabyle, QLocale::Kabyle, 112},
    {sipName_Kalenjin, QLocale::Kalenjin, 112},
    {sipName_Kamba, QLocale::Kamba, 112},
    {sipName_Kannada, QLocale::Kannada, 112},
    {sipName_Kashmiri, QLocale::Kashmiri, 112},
    {sipName_Kazakh, QLocale::Kazakh, 112},
    {sipName_Kazakhstan, QLocale::Kazakhstan, 110},
    {sipName_Kenya, QLocale::Kenya, 110},
    {sipName_Kikuyu, QLocale::Kikuyu, 112},
    {sipName_Kinyarwanda, QLocale::Kinyarwanda, 112},
    {sipName_Kirghiz, QLocale::Kirghiz, 112},
    {sipName_Kiribati, QLocale::Kiribati, 110},
    {sipName_Konkani, QLocale::Konkani, 112},
    {sipName_Korean, QLocale::Korean, 112},
    {sipName_Koro, QLocale::Koro, 112},
    {sipName_KoyraChiini, QLocale::KoyraChiini, 112},
    {sipName_KoyraboroSenni, QLocale::KoyraboroSenni, 112},
    {sipName_Kpelle, QLocale::Kpelle, 112},
    {sipName_Kurdish, QLocale::Kurdish, 112},
    {sipName_Kurundi, QLocale::Kurundi, 112},
    {sipName_Kuwait, QLocale::Kuwait, 110},
    {sipName_Kyrgyzstan, QLocale::Kyrgyzstan, 110},
    {sipName_Langi, QLocale::Langi, 112},
    {sipName_Lao, QLocale::Lao, 110},
    {sipName_Laothian, QLocale::Laothian, 112},
    {sipName_LastCountry, QLocale::LastCountry, 110},
    {sipName_LastLanguage, QLocale::LastLanguage, 112},
    {sipName_Latin, QLocale::Latin, 112},
    {sipName_LatinAmericaAndTheCaribbean, QLocale::LatinAmericaAndTheCaribbean, 110},
    {sipName_Latvia, QLocale::Latvia, 110},
    {sipName_Latvian, QLocale::Latvian, 112},
    {sipName_Lebanon, QLocale::Lebanon, 110},
    {sipName_Lesotho, QLocale::Lesotho, 110},
    {sipName_Liberia, QLocale::Liberia, 110},
    {sipName_LibyanArabJamahiriya, QLocale::LibyanArabJamahiriya, 110},
    {sipName_Liechtenstein, QLocale::Liechtenstein, 110},
    {sipName_Lingala, QLocale::Lingala, 112},
    {sipName_Lithuania, QLocale::Lithuania, 110},
    {sipName_Lithuanian, QLocale::Lithuanian, 112},
    {sipName_LongFormat, QLocale::LongFormat, 111},
    {sipName_LowGerman, QLocale::LowGerman, 112},
    {sipName_Luo, QLocale::Luo, 112},
    {sipName_Luxembourg, QLocale::Luxembourg, 110},
    {sipName_Luyia, QLocale::Luyia, 112},
    {sipName_Macau, QLocale::Macau, 110},
    {sipName_Macedonia, QLocale::Macedonia, 110},
    {sipName_Macedonian, QLocale::Macedonian, 112},
    {sipName_Machame, QLocale::Machame, 112},
    {sipName_Madagascar, QLocale::Madagascar, 110},
    {sipName_Makonde, QLocale::Makonde, 112},
    {sipName_Malagasy, QLocale::Malagasy, 112},
    {sipName_Malawi, QLocale::Malawi, 110},
    {sipName_Malay, QLocale::Malay, 112},
    {sipName_Malayalam, QLocale::Malayalam, 112},
    {sipName_Malaysia, QLocale::Malaysia, 110},
    {sipName_Maldives, QLocale::Maldives, 110},
    {sipName_Mali, QLocale::Mali, 110},
    {sipName_Malta, QLocale::Malta, 110},
    {sipName_Maltese, QLocale::Maltese, 112},
    {sipName_Manx, QLocale::Manx, 112},
    {sipName_Maori, QLocale::Maori, 112},
    {sipName_Marathi, QLocale::Marathi, 112},
    {sipName_MarshallIslands, QLocale::MarshallIslands, 110},
    {sipName_Martinique, QLocale::Martinique, 110},
    {sipName_Masai, QLocale::Masai, 112},
    {sipName_Mauritania, QLocale::Mauritania, 110},
    {sipName_Mauritius, QLocale::Mauritius, 110},
    {sipName_Mayotte, QLocale::Mayotte, 110},
    {sipName_Meru, QLocale::Meru, 112},
    {sipName_MetricSystem, QLocale::MetricSystem, 113},
    {sipName_MetropolitanFrance, QLocale::MetropolitanFrance, 110},
    {sipName_Mexico, QLocale::Mexico, 110},
    {sipName_Micronesia, QLocale::Micronesia, 110},
    {sipName_Moldavian, QLocale::Moldavian, 112},
    {sipName_Moldova, QLocale::Moldova, 110},
    {sipName_Monaco, QLocale::Monaco, 110},
    {sipName_Mongolia, QLocale::Mongolia, 110},
    {sipName_Mongolian, QLocale::Mongolian, 112},
    {sipName_Montenegro, QLocale::Montenegro, 110},
    {sipName_Montserrat, QLocale::Montserrat, 110},
    {sipName_Morisyen, QLocale::Morisyen, 112},
    {sipName_Morocco, QLocale::Morocco, 110},
    {sipName_Mozambique, QLocale::Mozambique, 110},
    {sipName_Myanmar, QLocale::Myanmar, 110},
    {sipName_Nama, QLocale::Nama, 112},
    {sipName_Namibia, QLocale::Namibia, 110},
    {sipName_NarrowFormat, QLocale::NarrowFormat, 111},
    {sipName_NauruCountry, QLocale::NauruCountry, 110},
    {sipName_NauruLanguage, QLocale::NauruLanguage, 112},
    {sipName_Nepal, QLocale::Nepal, 110},
    {sipName_Nepali, QLocale::Nepali, 112},
    {sipName_Netherlands, QLocale::Netherlands, 110},
    {sipName_NetherlandsAntilles, QLocale::NetherlandsAntilles, 110},
    {sipName_NewCaledonia, QLocale::NewCaledonia, 110},
    {sipName_NewZealand, QLocale::NewZealand, 110},
    {sipName_Nicaragua, QLocale::Nicaragua, 110},
    {sipName_Niger, QLocale::Niger, 110},
    {sipName_Nigeria, QLocale::Nigeria, 110},
    {sipName_Niue, QLocale::Niue, 110},
    {sipName_NorfolkIsland, QLocale::NorfolkIsland, 110},
    {sipName_NorthNdebele, QLocale::NorthNdebele, 112},
    {sipName_NorthernMarianaIslands, QLocale::NorthernMarianaIslands, 110},
    {sipName_NorthernSami, QLocale::NorthernSami, 112},
    {sipName_NorthernSotho, QLocale::NorthernSotho, 112},
    {sipName_Norway, QLocale::Norway, 110},
    {sipName_Norwegian, QLocale::Norwegian, 112},
    {sipName_NorwegianBokmal, QLocale::NorwegianBokmal, 112},
    {sipName_NorwegianNynorsk, QLocale::NorwegianNynorsk, 112},
    {sipName_Nyankole, QLocale::Nyankole, 112},
    {sipName_Nynorsk, QLocale::Nynorsk, 112},
    {sipName_Occitan, QLocale::Occitan, 112},
    {sipName_Oman, QLocale::Oman, 110},
    {sipName_OmitGroupSeparator, QLocale::OmitGroupSeparator, 114},
    {sipName_Oriya, QLocale::Oriya, 112},
    {sipName_Pakistan, QLocale::Pakistan, 110},
    {sipName_Palau, QLocale::Palau, 110},
    {sipName_PalestinianTerritory, QLocale::PalestinianTerritory, 110},
    {sipName_Panama, QLocale::Panama, 110},
    {sipName_PapuaNewGuinea, QLocale::PapuaNewGuinea, 110},
    {sipName_Paraguay, QLocale::Paraguay, 110},
    {sipName_Pashto, QLocale::Pashto, 112},
    {sipName_PeoplesRepublicOfCongo, QLocale::PeoplesRepublicOfCongo, 110},
    {sipName_Persian, QLocale::Persian, 112},
    {sipName_Peru, QLocale::Peru, 110},
    {sipName_Philippines, QLocale::Philippines, 110},
    {sipName_Pitcairn, QLocale::Pitcairn, 110},
    {sipName_Poland, QLocale::Poland, 110},
    {sipName_Polish, QLocale::Polish, 112},
    {sipName_Portugal, QLocale::Portugal, 110},
    {sipName_Portuguese, QLocale::Portuguese, 112},
    {sipName_PuertoRico, QLocale::PuertoRico, 110},
    {sipName_Punjabi, QLocale::Punjabi, 112},
    {sipName_Qatar, QLocale::Qatar, 110},
    {sipName_Quechua, QLocale::Quechua, 112},
    {sipName_RejectGroupSeparator, QLocale::RejectGroupSeparator, 114},
    {sipName_RepublicOfKorea, QLocale::RepublicOfKorea, 110},
    {sipName_Reunion, QLocale::Reunion, 110},
    {sipName_RhaetoRomance, QLocale::RhaetoRomance, 112},
    {sipName_Romania, QLocale::Romania, 110},
    {sipName_Romanian, QLocale::Romanian, 112},
    {sipName_Rombo, QLocale::Rombo, 112},
    {sipName_Russian, QLocale::Russian, 112},
    {sipName_RussianFederation, QLocale::RussianFederation, 110},
    {sipName_Rwa, QLocale::Rwa, 112},
    {sipName_Rwanda, QLocale::Rwanda, 110},
    {sipName_Saho, QLocale::Saho, 112},
    {sipName_SaintBarthelemy, QLocale::SaintBarthelemy, 110},
    {sipName_SaintKittsAndNevis, QLocale::SaintKittsAndNevis, 110},
    {sipName_SaintMartin, QLocale::SaintMartin, 110},
    {sipName_Samburu, QLocale::Samburu, 112},
    {sipName_Samoa, QLocale::Samoa, 110},
    {sipName_Samoan, QLocale::Samoan, 112},
    {sipName_SanMarino, QLocale::SanMarino, 110},
    {sipName_Sangho, QLocale::Sangho, 112},
    {sipName_Sanskrit, QLocale::Sanskrit, 112},
    {sipName_SaoTomeAndPrincipe, QLocale::SaoTomeAndPrincipe, 110},
    {sipName_SaudiArabia, QLocale::SaudiArabia, 110},
    {sipName_Sena, QLocale::Sena, 112},
    {sipName_Senegal, QLocale::Senegal, 110},
    {sipName_Serbia, QLocale::Serbia, 110},
    {sipName_SerbiaAndMontenegro, QLocale::SerbiaAndMontenegro, 110},
    {sipName_Serbian, QLocale::Serbian, 112},
    {sipName_SerboCroatian, QLocale::SerboCroatian, 112},
    {sipName_Sesotho, QLocale::Sesotho, 112},
    {sipName_Setswana, QLocale::Setswana, 112},
    {sipName_Seychelles, QLocale::Seychelles, 110},
    {sipName_Shambala, QLocale::Shambala, 112},
    {sipName_Shona, QLocale::Shona, 112},
    {sipName_ShortFormat, QLocale::ShortFormat, 111},
    {sipName_SichuanYi, QLocale::SichuanYi, 112},
    {sipName_Sidamo, QLocale::Sidamo, 112},
    {sipName_SierraLeone, QLocale::SierraLeone, 110},
    {sipName_Sindhi, QLocale::Sindhi, 112},
    {sipName_Singapore, QLocale::Singapore, 110},
    {sipName_Singhalese, QLocale::Singhalese, 112},
    {sipName_Siswati, QLocale::Siswati, 112},
    {sipName_Slovak, QLocale::Slovak, 112},
    {sipName_Slovakia, QLocale::Slovakia, 110},
    {sipName_Slovenia, QLocale::Slovenia, 110},
    {sipName_Slovenian, QLocale::Slovenian, 112},
    {sipName_Soga, QLocale::Soga, 112},
    {sipName_SolomonIslands, QLocale::SolomonIslands, 110},
    {sipName_Somali, QLocale::Somali, 112},
    {sipName_Somalia, QLocale::Somalia, 110},
    {sipName_SouthAfrica, QLocale::SouthAfrica, 110},
    {sipName_SouthGeorgiaAndTheSouthSandwichIslands, QLocale::SouthGeorgiaAndTheSouthSandwichIslands, 110},
    {sipName_SouthNdebele, QLocale::SouthNdebele, 112},
    {sipName_Spain, QLocale::Spain, 110},
    {sipName_Spanish, QLocale::Spanish, 112},
    {sipName_SriLanka, QLocale::SriLanka, 110},
    {sipName_StHelena, QLocale::StHelena, 110},
    {sipName_StLucia, QLocale::StLucia, 110},
    {sipName_StPierreAndMiquelon, QLocale::StPierreAndMiquelon, 110},
    {sipName_StVincentAndTheGrenadines, QLocale::StVincentAndTheGrenadines, 110},
    {sipName_Sudan, QLocale::Sudan, 110},
    {sipName_Sundanese, QLocale::Sundanese, 112},
    {sipName_Suriname, QLocale::Suriname, 110},
    {sipName_SvalbardAndJanMayenIslands, QLocale::SvalbardAndJanMayenIslands, 110},
    {sipName_Swahili, QLocale::Swahili, 112},
    {sipName_Swaziland, QLocale::Swaziland, 110},
    {sipName_Sweden, QLocale::Sweden, 110},
    {sipName_Swedish, QLocale::Swedish, 112},
    {sipName_SwissGerman, QLocale::SwissGerman, 112},
    {sipName_Switzerland, QLocale::Switzerland, 110},
    {sipName_Syriac, QLocale::Syriac, 112},
    {sipName_SyrianArabRepublic, QLocale::SyrianArabRepublic, 110},
    {sipName_Tachelhit, QLocale::Tachelhit, 112},
    {sipName_Tagalog, QLocale::Tagalog, 112},
    {sipName_Taita, QLocale::Taita, 112},
    {sipName_Taiwan, QLocale::Taiwan, 110},
    {sipName_Tajik, QLocale::Tajik, 112},
    {sipName_Tajikistan, QLocale::Tajikistan, 110},
    {sipName_Tamil, QLocale::Tamil, 112},
    {sipName_Tanzania, QLocale::Tanzania, 110},
    {sipName_Taroko, QLocale::Taroko, 112},
    {sipName_Tatar, QLocale::Tatar, 112},
    {sipName_Telugu, QLocale::Telugu, 112},
    {sipName_Teso, QLocale::Teso, 112},
    {sipName_Thai, QLocale::Thai, 112},
    {sipName_Thailand, QLocale::Thailand, 110},
    {sipName_Tibetan, QLocale::Tibetan, 112},
    {sipName_Tigre, QLocale::Tigre, 112},
    {sipName_Tigrinya, QLocale::Tigrinya, 112},
    {sipName_Togo, QLocale::Togo, 110},
    {sipName_Tokelau, QLocale::Tokelau, 110},
    {sipName_TongaCountry, QLocale::TongaCountry, 110},
    {sipName_TongaLanguage, QLocale::TongaLanguage, 112},
    {sipName_TrinidadAndTobago, QLocale::TrinidadAndTobago, 110},
    {sipName_Tsonga, QLocale::Tsonga, 112},
    {sipName_Tunisia, QLocale::Tunisia, 110},
    {sipName_Turkey, QLocale::Turkey, 110},
    {sipName_Turkish, QLocale::Turkish, 112},
    {sipName_Turkmen, QLocale::Turkmen, 112},
    {sipName_Turkmenistan, QLocale::Turkmenistan, 110},
    {sipName_TurksAndCaicosIslands, QLocale::TurksAndCaicosIslands, 110},
    {sipName_Tuvalu, QLocale::Tuvalu, 110},
    {sipName_Twi, QLocale::Twi, 112},
    {sipName_Tyap, QLocale::Tyap, 112},
    {sipName_USVirginIslands, QLocale::USVirginIslands, 110},
    {sipName_Uganda, QLocale::Uganda, 110},
    {sipName_Uigur, QLocale::Uigur, 112},
    {sipName_Ukraine, QLocale::Ukraine, 110},
    {sipName_Ukrainian, QLocale::Ukrainian, 112},
    {sipName_UnitedArabEmirates, QLocale::UnitedArabEmirates, 110},
    {sipName_UnitedKingdom, QLocale::UnitedKingdom, 110},
    {sipName_UnitedStates, QLocale::UnitedStates, 110},
    {sipName_UnitedStatesMinorOutlyingIslands, QLocale::UnitedStatesMinorOutlyingIslands, 110},
    {sipName_Urdu, QLocale::Urdu, 112},
    {sipName_Uruguay, QLocale::Uruguay, 110},
    {sipName_Uzbek, QLocale::Uzbek, 112},
    {sipName_Uzbekistan, QLocale::Uzbekistan, 110},
    {sipName_Vanuatu, QLocale::Vanuatu, 110},
    {sipName_VaticanCityState, QLocale::VaticanCityState, 110},
    {sipName_Venda, QLocale::Venda, 112},
    {sipName_Venezuela, QLocale::Venezuela, 110},
    {sipName_VietNam, QLocale::VietNam, 110},
    {sipName_Vietnamese, QLocale::Vietnamese, 112},
    {sipName_Volapuk, QLocale::Volapuk, 112},
    {sipName_Vunjo, QLocale::Vunjo, 112},
    {sipName_Walamo, QLocale::Walamo, 112},
    {sipName_WallisAndFutunaIslands, QLocale::WallisAndFutunaIslands, 110},
    {sipName_Welsh, QLocale::Welsh, 112},
    {sipName_WesternSahara, QLocale::WesternSahara, 110},
    {sipName_Wolof, QLocale::Wolof, 112},
    {sipName_Xhosa, QLocale::Xhosa, 112},
    {sipName_Yemen, QLocale::Yemen, 110},
    {sipName_Yiddish, QLocale::Yiddish, 112},
    {sipName_Yoruba, QLocale::Yoruba, 112},
    {sipName_Yugoslavia, QLocale::Yugoslavia, 110},
    {sipName_Zambia, QLocale::Zambia, 110},
    {sipName_Zhuang, QLocale::Zhuang, 112},
    {sipName_Zimbabwe, QLocale::Zimbabwe, 110},
    {sipName_Zulu, QLocale::Zulu, 112},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QLocale = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLocale,
        {0}
    },
    {
        sipNameNr_QLocale,
        {0, 0, 1},
        41, methods_QLocale,
        472, enummembers_QLocale,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLocale,
    init_QLocale,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLocale,
    assign_QLocale,
    array_QLocale,
    copy_QLocale,
    release_QLocale,
    cast_QLocale,
    0,
    0,
    0
},
    0,
    0,
    0
};
