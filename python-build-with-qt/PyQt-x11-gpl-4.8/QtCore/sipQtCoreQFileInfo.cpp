/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:04 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 39 "sipQtCoreQFileInfo.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQFileInfo.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 46 "sipQtCoreQFileInfo.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 49 "sipQtCoreQFileInfo.cpp"
#line 343 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 52 "sipQtCoreQFileInfo.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 55 "sipQtCoreQFileInfo.cpp"


extern "C" {static PyObject *meth_QFileInfo_setFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QFile * a0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFile, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFile(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QDir * a0;
        const QString * a1;
        int a1State = 0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFile(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_exists(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exists();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_exists, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->refresh();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_refresh, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_filePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->filePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_filePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->absoluteFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteFilePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->canonicalFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalFilePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_baseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_baseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->baseName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_baseName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_completeBaseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeBaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->completeBaseName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeBaseName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_suffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->suffix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_suffix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_completeSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->completeSuffix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeSuffix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_path(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->path());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_path, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->absolutePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absolutePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->canonicalPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_dir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_dir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(sipCpp->dir());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_dir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDir *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir(sipCpp->absoluteDir());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteDir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isReadable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWritable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isWritable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isExecutable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isExecutable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isExecutable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isExecutable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRelative();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRelative, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isAbsolute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->makeAbsolute();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_makeAbsolute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFile();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDir();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isDir, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isSymLink(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSymLink();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isSymLink, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRoot();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRoot, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_readLink(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_readLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->readLink());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_readLink, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_owner(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->owner());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_owner, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_ownerId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_ownerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownerId();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_ownerId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_group(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->group());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_group, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_groupId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_groupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->groupId();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_groupId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_permission(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFile::Permissions * a0;
        int a0State = 0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFile_Permissions, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->permission(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QFile_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permission, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QFile::Permissions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFile::Permissions(sipCpp->permissions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFile_Permissions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permissions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_size(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_created(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_created(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->created());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_created, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->lastModified());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastModified, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_lastRead(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->lastRead());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastRead, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_detach(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_detach, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_caching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_caching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->caching();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_caching, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_setCaching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setCaching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCaching(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setCaching, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->symLinkTarget());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_symLinkTarget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_bundleName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_bundleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->bundleName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_bundleName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFileInfo_isBundle(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBundle();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isBundle, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QFileInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QFileInfo *sipCpp = reinterpret_cast<QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFileInfo * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFileInfo::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QFileInfo,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFileInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QFileInfo *sipCpp = reinterpret_cast<QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFileInfo * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFileInfo::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QFileInfo,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFileInfo(void *, const sipTypeDef *);}
static void *cast_QFileInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QFileInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileInfo(void *, int);}
static void release_QFileInfo(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QFileInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QFileInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QFileInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QFileInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QFileInfo *>(sipSrc);
}


extern "C" {static void *array_QFileInfo(SIP_SSIZE_T);}
static void *array_QFileInfo(SIP_SSIZE_T sipNrElem)
{
    return new QFileInfo[sipNrElem];
}


extern "C" {static void *copy_QFileInfo(const void *, SIP_SSIZE_T);}
static void *copy_QFileInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QFileInfo(reinterpret_cast<const QFileInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileInfo(sipSimpleWrapper *);}
static void dealloc_QFileInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QFileInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QFileInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QFileInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QFileInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFileInfo();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFileInfo(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QFile * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QFile, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFileInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QDir * a0;
        const QString * a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1", sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFileInfo(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QFileInfo * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QFileInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFileInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileInfo[] = {
    {(void *)slot_QFileInfo___ne__, ne_slot},
    {(void *)slot_QFileInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFileInfo[] = {
    {SIP_MLNAME_CAST(sipName_absoluteDir), meth_QFileInfo_absoluteDir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QFileInfo_absoluteFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QFileInfo_absolutePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_baseName), meth_QFileInfo_baseName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bundleName), meth_QFileInfo_bundleName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_caching), meth_QFileInfo_caching, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canonicalFilePath), meth_QFileInfo_canonicalFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QFileInfo_canonicalPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completeBaseName), meth_QFileInfo_completeBaseName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completeSuffix), meth_QFileInfo_completeSuffix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_created), meth_QFileInfo_created, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detach), meth_QFileInfo_detach, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dir), meth_QFileInfo_dir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exists), meth_QFileInfo_exists, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFileInfo_fileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QFileInfo_filePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_group), meth_QFileInfo_group, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_groupId), meth_QFileInfo_groupId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QFileInfo_isAbsolute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isBundle), meth_QFileInfo_isBundle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QFileInfo_isDir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isExecutable), meth_QFileInfo_isExecutable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFile), meth_QFileInfo_isFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QFileInfo_isHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QFileInfo_isReadable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QFileInfo_isRelative, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QFileInfo_isRoot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSymLink), meth_QFileInfo_isSymLink, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QFileInfo_isWritable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QFileInfo_lastModified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastRead), meth_QFileInfo_lastRead, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QFileInfo_makeAbsolute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_owner), meth_QFileInfo_owner, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ownerId), meth_QFileInfo_ownerId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_path), meth_QFileInfo_path, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_permission), meth_QFileInfo_permission, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFileInfo_permissions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readLink), meth_QFileInfo_readLink, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QFileInfo_refresh, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCaching), meth_QFileInfo_setCaching, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFile), meth_QFileInfo_setFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QFileInfo_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_suffix), meth_QFileInfo_suffix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_symLinkTarget), meth_QFileInfo_symLinkTarget, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QFileInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QFileInfo,
        {0}
    },
    {
        sipNameNr_QFileInfo,
        {0, 0, 1},
        44, methods_QFileInfo,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QFileInfo,
    init_QFileInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileInfo,
    assign_QFileInfo,
    array_QFileInfo,
    copy_QFileInfo,
    release_QFileInfo,
    cast_QFileInfo,
    0,
    0,
    0
},
    0,
    0,
    0
};
