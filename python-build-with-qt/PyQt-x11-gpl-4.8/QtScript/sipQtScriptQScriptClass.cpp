/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:36 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptclass.sip"
#include <qscriptclass.h>
#line 39 "sipQtScriptQScriptClass.cpp"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 43 "sipQtScriptQScriptClass.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "sipQtScriptQScriptClass.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtScriptQScriptClass.cpp"
#line 50 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 52 "sipQtScriptQScriptClass.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptclasspropertyiterator.sip"
#include <qscriptclasspropertyiterator.h>
#line 55 "sipQtScriptQScriptClass.cpp"
#line 50 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 58 "sipQtScriptQScriptClass.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptstring.sip"
#include <qscriptstring.h>
#line 61 "sipQtScriptQScriptClass.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptclass.sip"
#include <qscriptclass.h>
#line 64 "sipQtScriptQScriptClass.cpp"


class sipQScriptClass : public QScriptClass
{
public:
    sipQScriptClass(QScriptEngine *);
    virtual ~sipQScriptClass();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QScriptClass::QueryFlags queryProperty(const QScriptValue&,const QScriptString&,QScriptClass::QueryFlags,uint *);
    QScriptValue property(const QScriptValue&,const QScriptString&,uint);
    void setProperty(QScriptValue&,const QScriptString&,uint,const QScriptValue&);
    QScriptValue::PropertyFlags propertyFlags(const QScriptValue&,const QScriptString&,uint);
    QScriptClassPropertyIterator * newIterator(const QScriptValue&);
    QScriptValue prototype() const;
    QString name() const;
    bool supportsExtension(QScriptClass::Extension) const;
    QVariant extension(QScriptClass::Extension,const QVariant&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScriptClass(const sipQScriptClass &);
    sipQScriptClass &operator = (const sipQScriptClass &);

    char sipPyMethods[9];
};

sipQScriptClass::sipQScriptClass(QScriptEngine *a0): QScriptClass(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptClass::~sipQScriptClass()
{
    sipCommonDtor(sipPySelf);
}

QScriptClass::QueryFlags sipQScriptClass::queryProperty(const QScriptValue& a0,const QScriptString& a1,QScriptClass::QueryFlags a2,uint *a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_queryProperty);

    if (!meth)
        return QScriptClass::queryProperty(a0,a1,a2,a3);

    extern QScriptClass::QueryFlags sipVH_QtScript_17(sip_gilstate_t,PyObject *,const QScriptValue&,const QScriptString&,QScriptClass::QueryFlags,uint *);

    return sipVH_QtScript_17(sipGILState,meth,a0,a1,a2,a3);
}

QScriptValue sipQScriptClass::property(const QScriptValue& a0,const QScriptString& a1,uint a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_property);

    if (!meth)
        return QScriptClass::property(a0,a1,a2);

    extern QScriptValue sipVH_QtScript_16(sip_gilstate_t,PyObject *,const QScriptValue&,const QScriptString&,uint);

    return sipVH_QtScript_16(sipGILState,meth,a0,a1,a2);
}

void sipQScriptClass::setProperty(QScriptValue& a0,const QScriptString& a1,uint a2,const QScriptValue& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setProperty);

    if (!meth)
    {
        QScriptClass::setProperty(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtScript_15(sip_gilstate_t,PyObject *,QScriptValue&,const QScriptString&,uint,const QScriptValue&);

    sipVH_QtScript_15(sipGILState,meth,a0,a1,a2,a3);
}

QScriptValue::PropertyFlags sipQScriptClass::propertyFlags(const QScriptValue& a0,const QScriptString& a1,uint a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_propertyFlags);

    if (!meth)
        return QScriptClass::propertyFlags(a0,a1,a2);

    extern QScriptValue::PropertyFlags sipVH_QtScript_14(sip_gilstate_t,PyObject *,const QScriptValue&,const QScriptString&,uint);

    return sipVH_QtScript_14(sipGILState,meth,a0,a1,a2);
}

QScriptClassPropertyIterator * sipQScriptClass::newIterator(const QScriptValue& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_newIterator);

    if (!meth)
        return QScriptClass::newIterator(a0);

    extern QScriptClassPropertyIterator * sipVH_QtScript_13(sip_gilstate_t,PyObject *,const QScriptValue&);

    return sipVH_QtScript_13(sipGILState,meth,a0);
}

QScriptValue sipQScriptClass::prototype() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_prototype);

    if (!meth)
        return QScriptClass::prototype();

    extern QScriptValue sipVH_QtScript_12(sip_gilstate_t,PyObject *);

    return sipVH_QtScript_12(sipGILState,meth);
}

QString sipQScriptClass::name() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_name);

    if (!meth)
        return QScriptClass::name();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtScript_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

bool sipQScriptClass::supportsExtension(QScriptClass::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_supportsExtension);

    if (!meth)
        return QScriptClass::supportsExtension(a0);

    extern bool sipVH_QtScript_11(sip_gilstate_t,PyObject *,QScriptClass::Extension);

    return sipVH_QtScript_11(sipGILState,meth,a0);
}

QVariant sipQScriptClass::extension(QScriptClass::Extension a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_extension);

    if (!meth)
        return QScriptClass::extension(a0,a1);

    extern QVariant sipVH_QtScript_10(sip_gilstate_t,PyObject *,QScriptClass::Extension,const QVariant&);

    return sipVH_QtScript_10(sipGILState,meth,a0,a1);
}


extern "C" {static PyObject *meth_QScriptClass_engine(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptClass, &sipCpp))
        {
            QScriptEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_engine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_queryProperty(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_queryProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QScriptValue * a0;
        const QScriptString * a1;
        QScriptClass::QueryFlags * a2;
        int a2State = 0;
        uint a3;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J1", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptValue, &a0, sipType_QScriptString, &a1, sipType_QScriptClass_QueryFlags, &a2, &a2State))
        {
            QScriptClass::QueryFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptClass::QueryFlags((sipSelfWasArg ? sipCpp->QScriptClass::queryProperty(*a0,*a1,*a2,&a3) : sipCpp->queryProperty(*a0,*a1,*a2,&a3)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QScriptClass_QueryFlags,a2State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QScriptClass_QueryFlags,NULL);
            return sipBuildResult(0,"(Ru)",sipResObj,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_queryProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_property(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QScriptValue * a0;
        const QScriptString * a1;
        uint a2;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9u", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptValue, &a0, sipType_QScriptString, &a1, &a2))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue((sipSelfWasArg ? sipCpp->QScriptClass::property(*a0,*a1,a2) : sipCpp->property(*a0,*a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_property, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QScriptValue * a0;
        const QScriptString * a1;
        uint a2;
        const QScriptValue * a3;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9uJ9", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptValue, &a0, sipType_QScriptString, &a1, &a2, sipType_QScriptValue, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QScriptClass::setProperty(*a0,*a1,a2,*a3) : sipCpp->setProperty(*a0,*a1,a2,*a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_setProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_propertyFlags(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_propertyFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QScriptValue * a0;
        const QScriptString * a1;
        uint a2;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9u", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptValue, &a0, sipType_QScriptString, &a1, &a2))
        {
            QScriptValue::PropertyFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue::PropertyFlags((sipSelfWasArg ? sipCpp->QScriptClass::propertyFlags(*a0,*a1,a2) : sipCpp->propertyFlags(*a0,*a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue_PropertyFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_propertyFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_newIterator(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_newIterator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QScriptValue * a0;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptValue, &a0))
        {
            QScriptClassPropertyIterator *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QScriptClass::newIterator(*a0) : sipCpp->newIterator(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptClassPropertyIterator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_newIterator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_prototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_prototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptClass, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue((sipSelfWasArg ? sipCpp->QScriptClass::prototype() : sipCpp->prototype()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_prototype, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_name(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptClass, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QScriptClass::name() : sipCpp->name()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_name, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QScriptClass::Extension a0;
        QScriptClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptClass_Extension, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QScriptClass::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_supportsExtension, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptClass_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptClass_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QScriptClass::Extension a0;
        const QVariant& a1def = QVariant();
        const QVariant * a1 = &a1def;
        int a1State = 0;
        QScriptClass *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_argument,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J1", &sipSelf, sipType_QScriptClass, &sipCpp, sipType_QScriptClass_Extension, &a0, sipType_QVariant,&a1, &a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QScriptClass::extension(a0,*a1) : sipCpp->extension(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptClass, sipName_extension, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScriptClass(void *, const sipTypeDef *);}
static void *cast_QScriptClass(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QScriptClass)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptClass(void *, int);}
static void release_QScriptClass(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScriptClass *>(sipCppV);
    else
        delete reinterpret_cast<QScriptClass *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptClass(sipSimpleWrapper *);}
static void dealloc_QScriptClass(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQScriptClass *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QScriptClass(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QScriptClass(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QScriptClass(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQScriptClass *sipCpp = 0;

    {
        QScriptEngine * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QScriptEngine, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptClass(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QScriptClass[] = {
    {SIP_MLNAME_CAST(sipName_engine), meth_QScriptClass_engine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QScriptClass_extension, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QScriptClass_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newIterator), meth_QScriptClass_newIterator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_property), meth_QScriptClass_property, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyFlags), meth_QScriptClass_propertyFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prototype), meth_QScriptClass_prototype, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queryProperty), meth_QScriptClass_queryProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QScriptClass_setProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QScriptClass_supportsExtension, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QScriptClass[] = {
    {sipName_Callable, QScriptClass::Callable, 3},
    {sipName_HandlesReadAccess, QScriptClass::HandlesReadAccess, 4},
    {sipName_HandlesWriteAccess, QScriptClass::HandlesWriteAccess, 4},
    {sipName_HasInstance, QScriptClass::HasInstance, 3},
};


pyqt4ClassTypeDef sipTypeDef_QtScript_QScriptClass = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QScriptClass,
        {0}
    },
    {
        sipNameNr_QScriptClass,
        {0, 0, 1},
        10, methods_QScriptClass,
        4, enummembers_QScriptClass,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QScriptClass,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptClass,
    0,
    0,
    0,
    release_QScriptClass,
    cast_QScriptClass,
    0,
    0,
    0
},
    0,
    0,
    0
};
