/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:36 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 39 "sipQtScriptQScriptEngine.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtScriptQScriptEngine.cpp"
#line 50 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 46 "sipQtScriptQScriptEngine.cpp"
#line 286 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 49 "sipQtScriptQScriptEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtScriptQScriptEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptstring.sip"
#include <qscriptstring.h>
#line 55 "sipQtScriptQScriptEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengineagent.sip"
#include <qscriptengineagent.h>
#line 58 "sipQtScriptQScriptEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 61 "sipQtScriptQScriptEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 64 "sipQtScriptQScriptEngine.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 67 "sipQtScriptQScriptEngine.cpp"
#line 343 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 70 "sipQtScriptQScriptEngine.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptclass.sip"
#include <qscriptclass.h>
#line 73 "sipQtScriptQScriptEngine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "sipQtScriptQScriptEngine.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtScriptQScriptEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptcontext.sip"
#include <qscriptcontext.h>
#line 82 "sipQtScriptQScriptEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "sipQtScriptQScriptEngine.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 88 "sipQtScriptQScriptEngine.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "sipQtScriptQScriptEngine.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtScriptQScriptEngine.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 97 "sipQtScriptQScriptEngine.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 100 "sipQtScriptQScriptEngine.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 103 "sipQtScriptQScriptEngine.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 106 "sipQtScriptQScriptEngine.cpp"
#line 48 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
#if QT_VERSION >= 0x040400

// Save a Python callable in a QScriptValue so that it can be retrieved later
// by the handler.
static void qtscript_func_wrapper(QScriptEngine *eng, QScriptValue *qsv, PyObject *py)
{
    QString addr = QString::number((qulonglong)py);
    qsv->setData(QScriptValue(eng, addr));

    // Make sure that the callable isn't garbage collected.  This shouldn't be
    // a problem as we wouldn't normally be called in a loop.
    Py_INCREF(py);
}


// Invoke the saved Python callable on behalf of C++.
static QScriptValue qtscript_func_handler(QScriptContext *context, QScriptEngine *eng)
{
    QScriptValue qsv;

    QString addr = context->callee().data().toString();
    PyObject *py = (PyObject *)addr.toULongLong();

    SIP_BLOCK_THREADS

    PyObject *res_obj = sipCallMethod(0, py, "DD", context, sipType_QScriptContext, NULL, eng, sipType_QScriptEngine, NULL);

    if (!res_obj)
        PyErr_Print();
    else
    {
        QScriptValue *res;

        if (sipParseResult(0, py, res_obj, "D5", sipType_QScriptValue, &res) < 0)
            PyErr_Print();
        else
            qsv = *res;
    }

    Py_XDECREF(res_obj);

    SIP_UNBLOCK_THREADS

    return qsv;
}

#endif
#line 155 "sipQtScriptQScriptEngine.cpp"


class sipQScriptEngine : public QScriptEngine
{
public:
    sipQScriptEngine();
    sipQScriptEngine(QObject *);
    virtual ~sipQScriptEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScriptEngine(const sipQScriptEngine &);
    sipQScriptEngine &operator = (const sipQScriptEngine &);

    char sipPyMethods[7];
};

sipQScriptEngine::sipQScriptEngine(): QScriptEngine(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngine::sipQScriptEngine(QObject *a0): QScriptEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngine::~sipQScriptEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQScriptEngine::metaObject() const
{
    return sip_QtScript_qt_metaobject(sipPySelf,sipType_QScriptEngine);
}

int sipQScriptEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QScriptEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtScript_qt_metacall(sipPySelf,sipType_QScriptEngine,_c,_id,_a);

    return _id;
}

void *sipQScriptEngine::qt_metacast(const char *_clname)
{
    return (sip_QtScript_qt_metacast && sip_QtScript_qt_metacast(sipPySelf,sipType_QScriptEngine,_clname)) ? this : QScriptEngine::qt_metacast(_clname);
}

bool sipQScriptEngine::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtScript_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQScriptEngine::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtScript_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQScriptEngine::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtScript_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQScriptEngine::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtScript_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQScriptEngine::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtScript_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQScriptEngine::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScript_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQScriptEngine::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtScript_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQScriptEngine::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQScriptEngine::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQScriptEngine::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQScriptEngine::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQScriptEngine::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQScriptEngine::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQScriptEngine::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QScriptEngine_sender(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 421 "sipQtScriptQScriptEngine.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_receivers(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 463 "sipQtScriptQScriptEngine.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_globalObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_globalObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->globalObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_globalObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_currentContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_currentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_currentContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_pushContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_pushContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pushContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_pushContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_popContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_popContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->popContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_popContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_canEvaluate(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_canEvaluate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canEvaluate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_canEvaluate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        int a2 = 1;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fileName,
            sipName_lineNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1i", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->evaluate(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_evaluate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_hasUncaughtException(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_hasUncaughtException(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasUncaughtException();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_hasUncaughtException, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_uncaughtExceptionBacktrace(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtExceptionBacktrace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->uncaughtExceptionBacktrace());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtExceptionBacktrace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_uncaughtException(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtException(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->uncaughtException());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtException, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_uncaughtExceptionLineNumber(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_uncaughtExceptionLineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uncaughtExceptionLineNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_uncaughtExceptionLineNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_nullValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_nullValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->nullValue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_nullValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_undefinedValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_undefinedValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->undefinedValue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_undefinedValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newFunction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newFunction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        int a1 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BF|i", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, &a1))
        {
            QScriptValue *sipRes = 0;

#line 151 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, a1));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
#line 984 "sipQtScriptQScriptEngine.cpp"

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        PyObject * a0;
        const QScriptValue * a1;
        int a2 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BFJ9|i", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, sipType_QScriptValue, &a1, &a2))
        {
            QScriptValue *sipRes = 0;

#line 165 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, *a1, a2));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
#line 1015 "sipQtScriptQScriptEngine.cpp"

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newFunction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newVariant(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newVariant(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue * a0;
        const QVariant * a1;
        int a1State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0, sipType_QVariant,&a1, &a1State))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newVariant(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newVariant, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newRegExp(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegExp * a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QRegExp, &a0))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newRegExp(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newRegExp(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newRegExp, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        QScriptClass * a0;
        const QScriptValue& a1def = QScriptValue();
        const QScriptValue * a1 = &a1def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptClass, &a0, sipType_QScriptValue, &a1))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newObject(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0 = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newArray(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newDate(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qsreal a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newDate(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QDateTime * a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newDate(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newDate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newQObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newQObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject * a0;
        PyObject *a0Wrapper;
        QScriptEngine::ValueOwnership a1 = QScriptEngine::QtOwnership;
        const QScriptEngine::QObjectWrapOptions& a2def = 0;
        const QScriptEngine::QObjectWrapOptions * a2 = &a2def;
        int a2State = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ownership,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B@J8|EJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0Wrapper, sipType_QObject, &a0, sipType_QScriptEngine_ValueOwnership, &a1, sipType_QScriptEngine_QObjectWrapOptions, &a2, &a2State))
        {
            QScriptValue *sipRes = 0;

#line 191 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(a0, a1, *a2));
        Py_END_ALLOW_THREADS
        
        if (a1 == QScriptEngine::ScriptOwnership || (a1 == QScriptEngine::AutoOwnership && !a0->parent()))
            sipTransferTo(a0Wrapper, sipSelf);
#line 1286 "sipQtScriptQScriptEngine.cpp"
            sipReleaseType(const_cast<QScriptEngine::QObjectWrapOptions *>(a2),sipType_QScriptEngine_QObjectWrapOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const QScriptValue * a0;
        QObject * a1;
        PyObject *a1Wrapper;
        QScriptEngine::ValueOwnership a2 = QScriptEngine::QtOwnership;
        const QScriptEngine::QObjectWrapOptions& a3def = 0;
        const QScriptEngine::QObjectWrapOptions * a3 = &a3def;
        int a3State = 0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_ownership,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9@J8|EJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0, &a1Wrapper, sipType_QObject, &a1, sipType_QScriptEngine_ValueOwnership, &a2, sipType_QScriptEngine_QObjectWrapOptions, &a3, &a3State))
        {
            QScriptValue *sipRes = 0;

#line 203 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtScript/qscriptengine.sip"
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(*a0, a1, a2, *a3));
        Py_END_ALLOW_THREADS
        
        if (a2 == QScriptEngine::ScriptOwnership || (a2 == QScriptEngine::AutoOwnership && !a1->parent()))
            sipTransferTo(a1Wrapper, sipSelf);
#line 1322 "sipQtScriptQScriptEngine.cpp"
            sipReleaseType(const_cast<QScriptEngine::QObjectWrapOptions *>(a3),sipType_QScriptEngine_QObjectWrapOptions,a3State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newQObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_newQMetaObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_newQMetaObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject * a0;
        const QScriptValue& a1def = QScriptValue();
        const QScriptValue * a1 = &a1def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_ctor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QMetaObject, &a0, sipType_QScriptValue, &a1))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->newQMetaObject(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_newQMetaObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_defaultPrototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_defaultPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->defaultPrototype(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_defaultPrototype, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_setDefaultPrototype(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setDefaultPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QScriptValue * a1;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0, sipType_QScriptValue, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultPrototype(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setDefaultPrototype, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_importExtension(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_importExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->importExtension(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_importExtension, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_collectGarbage(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_collectGarbage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collectGarbage();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_collectGarbage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_setProcessEventsInterval(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setProcessEventsInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProcessEventsInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setProcessEventsInterval, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_processEventsInterval(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_processEventsInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEventsInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_processEventsInterval, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_isEvaluating(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_isEvaluating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEvaluating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_isEvaluating, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_abortEvaluation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_abortEvaluation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue& a0def = QScriptValue();
        const QScriptValue * a0 = &a0def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_result,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abortEvaluation(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_abortEvaluation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_clearExceptions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_clearExceptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearExceptions();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_clearExceptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_availableExtensions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_availableExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->availableExtensions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_availableExtensions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_importedExtensions(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_importedExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->importedExtensions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_importedExtensions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_setAgent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngineAgent * a0;
        PyObject *a0Keep;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0Keep, sipType_QScriptEngineAgent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAgent(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setAgent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_agent(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_agent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngine, &sipCpp))
        {
            QScriptEngineAgent *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->agent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptEngineAgent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_agent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_toStringHandle(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_toStringHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QScriptString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptString(sipCpp->toStringHandle(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_toStringHandle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_setGlobalObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_setGlobalObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue * a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGlobalObject(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_setGlobalObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_checkSyntax(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_checkSyntax(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QScriptSyntaxCheckResult *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptSyntaxCheckResult(QScriptEngine::checkSyntax(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptSyntaxCheckResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_checkSyntax, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_installTranslatorFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_installTranslatorFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue& a0def = QScriptValue();
        const QScriptValue * a0 = &a0def;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->installTranslatorFunctions(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_installTranslatorFunctions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_toObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_toObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScriptValue * a0;
        QScriptEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptEngine, &sipCpp, sipType_QScriptValue, &a0))
        {
            QScriptValue *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QScriptValue(sipCpp->toObject(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_toObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QScriptEngine_reportAdditionalMemoryCost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngine_reportAdditionalMemoryCost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QScriptEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QScriptEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reportAdditionalMemoryCost(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngine, sipName_reportAdditionalMemoryCost, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScriptEngine(void *, const sipTypeDef *);}
static void *cast_QScriptEngine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QScriptEngine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QScriptEngine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptEngine(void *, int);}
static void release_QScriptEngine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScriptEngine *>(sipCppV);
    else
        delete reinterpret_cast<QScriptEngine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptEngine(sipSimpleWrapper *);}
static void dealloc_QScriptEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQScriptEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QScriptEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QScriptEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QScriptEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQScriptEngine *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngine();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngine(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScriptEngine[] = {{133, 0, 1}};


static PyMethodDef methods_QScriptEngine[] = {
    {SIP_MLNAME_CAST(sipName_abortEvaluation), (PyCFunction)meth_QScriptEngine_abortEvaluation, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_agent), meth_QScriptEngine_agent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_availableExtensions), meth_QScriptEngine_availableExtensions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canEvaluate), meth_QScriptEngine_canEvaluate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkSyntax), meth_QScriptEngine_checkSyntax, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QScriptEngine_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearExceptions), meth_QScriptEngine_clearExceptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_collectGarbage), meth_QScriptEngine_collectGarbage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QScriptEngine_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentContext), meth_QScriptEngine_currentContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QScriptEngine_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultPrototype), meth_QScriptEngine_defaultPrototype, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QScriptEngine_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_evaluate), (PyCFunction)meth_QScriptEngine_evaluate, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_globalObject), meth_QScriptEngine_globalObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasUncaughtException), meth_QScriptEngine_hasUncaughtException, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_importExtension), meth_QScriptEngine_importExtension, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_importedExtensions), meth_QScriptEngine_importedExtensions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_installTranslatorFunctions), (PyCFunction)meth_QScriptEngine_installTranslatorFunctions, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isEvaluating), meth_QScriptEngine_isEvaluating, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newArray), (PyCFunction)meth_QScriptEngine_newArray, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_newDate), meth_QScriptEngine_newDate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newFunction), (PyCFunction)meth_QScriptEngine_newFunction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_newObject), (PyCFunction)meth_QScriptEngine_newObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_newQMetaObject), (PyCFunction)meth_QScriptEngine_newQMetaObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_newQObject), (PyCFunction)meth_QScriptEngine_newQObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_newRegExp), meth_QScriptEngine_newRegExp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newVariant), meth_QScriptEngine_newVariant, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nullValue), meth_QScriptEngine_nullValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_popContext), meth_QScriptEngine_popContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processEventsInterval), meth_QScriptEngine_processEventsInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pushContext), meth_QScriptEngine_pushContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QScriptEngine_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reportAdditionalMemoryCost), (PyCFunction)meth_QScriptEngine_reportAdditionalMemoryCost, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QScriptEngine_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAgent), meth_QScriptEngine_setAgent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefaultPrototype), meth_QScriptEngine_setDefaultPrototype, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGlobalObject), meth_QScriptEngine_setGlobalObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProcessEventsInterval), meth_QScriptEngine_setProcessEventsInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QScriptEngine_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toObject), meth_QScriptEngine_toObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toStringHandle), meth_QScriptEngine_toStringHandle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_uncaughtException), meth_QScriptEngine_uncaughtException, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_uncaughtExceptionBacktrace), meth_QScriptEngine_uncaughtExceptionBacktrace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_uncaughtExceptionLineNumber), meth_QScriptEngine_uncaughtExceptionLineNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_undefinedValue), meth_QScriptEngine_undefinedValue, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QScriptEngine[] = {
    {sipName_AutoCreateDynamicProperties, QScriptEngine::AutoCreateDynamicProperties, 13},
    {sipName_AutoOwnership, QScriptEngine::AutoOwnership, 15},
    {sipName_ExcludeChildObjects, QScriptEngine::ExcludeChildObjects, 13},
    {sipName_ExcludeDeleteLater, QScriptEngine::ExcludeDeleteLater, 13},
    {sipName_ExcludeSlots, QScriptEngine::ExcludeSlots, 13},
    {sipName_ExcludeSuperClassContents, QScriptEngine::ExcludeSuperClassContents, 13},
    {sipName_ExcludeSuperClassMethods, QScriptEngine::ExcludeSuperClassMethods, 13},
    {sipName_ExcludeSuperClassProperties, QScriptEngine::ExcludeSuperClassProperties, 13},
    {sipName_PreferExistingWrapperObject, QScriptEngine::PreferExistingWrapperObject, 13},
    {sipName_QtOwnership, QScriptEngine::QtOwnership, 15},
    {sipName_ScriptOwnership, QScriptEngine::ScriptOwnership, 15},
    {sipName_SkipMethodsInEnumeration, QScriptEngine::SkipMethodsInEnumeration, 13},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QScriptEngine[] = {
    {"signalHandlerException(QScriptValue)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtScript_QScriptEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QScriptEngine,
        {0}
    },
    {
        sipNameNr_QScriptEngine,
        {0, 0, 1},
        46, methods_QScriptEngine,
        12, enummembers_QScriptEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QScriptEngine,
    0,
    init_QScriptEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptEngine,
    0,
    0,
    0,
    release_QScriptEngine,
    cast_QScriptEngine,
    0,
    0,
    0
},
    &QScriptEngine::staticMetaObject,
    0,
    pyqt4_signals_QScriptEngine
};
