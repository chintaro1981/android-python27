/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcompleter.sip"
#include <qcompleter.h>
#line 39 "sipQtGuiQCompleter.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQCompleter.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQCompleter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 49 "sipQtGuiQCompleter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtGuiQCompleter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 55 "sipQtGuiQCompleter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtGuiQCompleter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtGuiQCompleter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQCompleter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 67 "sipQtGuiQCompleter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 70 "sipQtGuiQCompleter.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQCompleter.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtGuiQCompleter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQCompleter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQCompleter.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtGuiQCompleter.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtGuiQCompleter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 91 "sipQtGuiQCompleter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 94 "sipQtGuiQCompleter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 97 "sipQtGuiQCompleter.cpp"


class sipQCompleter : public QCompleter
{
public:
    sipQCompleter(QObject *);
    sipQCompleter(QAbstractItemModel *,QObject *);
    sipQCompleter(const QStringList&,QObject *);
    virtual ~sipQCompleter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_eventFilter(bool,QObject *,QEvent *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QString pathFromIndex(const QModelIndex&) const;
    QStringList splitPath(const QString&) const;
    bool eventFilter(QObject *,QEvent *);
    bool event(QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCompleter(const sipQCompleter &);
    sipQCompleter &operator = (const sipQCompleter &);

    char sipPyMethods[9];
};

sipQCompleter::sipQCompleter(QObject *a0): QCompleter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter(QAbstractItemModel *a0,QObject *a1): QCompleter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter(const QStringList& a0,QObject *a1): QCompleter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::~sipQCompleter()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCompleter::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QCompleter);
}

int sipQCompleter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCompleter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QCompleter,_c,_id,_a);

    return _id;
}

void *sipQCompleter::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QCompleter,_clname)) ? this : QCompleter::qt_metacast(_clname);
}

QString sipQCompleter::pathFromIndex(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_pathFromIndex);

    if (!meth)
        return QCompleter::pathFromIndex(a0);

    extern QString sipVH_QtGui_224(sip_gilstate_t,PyObject *,const QModelIndex&);

    return sipVH_QtGui_224(sipGILState,meth,a0);
}

QStringList sipQCompleter::splitPath(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_splitPath);

    if (!meth)
        return QCompleter::splitPath(a0);

    extern QStringList sipVH_QtGui_223(sip_gilstate_t,PyObject *,const QString&);

    return sipVH_QtGui_223(sipGILState,meth,a0);
}

bool sipQCompleter::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QCompleter::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

bool sipQCompleter::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QCompleter::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQCompleter::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQCompleter::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQCompleter::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQCompleter::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQCompleter::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQCompleter::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQCompleter::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQCompleter::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCompleter::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQCompleter::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQCompleter::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCompleter::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipQCompleter::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject *a0,QEvent *a1)
{
    return (sipSelfWasArg ? QCompleter::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQCompleter::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QCompleter::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QCompleter_sender(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 413 "sipQtGuiQCompleter.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_receivers(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 455 "sipQtGuiQCompleter.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_widget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_widget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QCompleter, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModel(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -19, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_model(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_model, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCompletionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter::CompletionMode a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_CompletionMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompletionMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QCompleter::CompletionMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completionMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QCompleter_CompletionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_popup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_popup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->popup();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_popup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setPopup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView * a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QAbstractItemView, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPopup(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setPopup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CaseSensitivity a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCaseSensitivity(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCaseSensitivity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            Qt::CaseSensitivity sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->caseSensitivity();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_caseSensitivity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setModelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter::ModelSorting a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_ModelSorting, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelSorting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModelSorting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_modelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_modelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QCompleter::ModelSorting sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->modelSorting();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QCompleter_ModelSorting);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_modelSorting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCompletionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompletionColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completionColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCompletionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompletionRole(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completionRole();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionCount(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completionCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCurrentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCurrentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setCurrentRow(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCurrentRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_currentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentRow();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->currentIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_currentCompletion(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentCompletion());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentCompletion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->completionModel();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionModel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_completionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->completionPrefix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionPrefix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_pathFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_pathFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QCompleter::pathFromIndex(*a0) : sipCpp->pathFromIndex(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_pathFromIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_splitPath(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_splitPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QCompleter::splitPath(*a0) : sipCpp->splitPath(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_splitPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_wrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_wrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapAround();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_wrapAround, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_complete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCompleter_complete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect * a0 = &a0def;
        QCompleter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->complete(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_complete, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompletionPrefix(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionPrefix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setWrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapAround(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWrapAround, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_eventFilter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_event(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_maxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_maxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxVisibleItems();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_maxVisibleItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxVisibleItems(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setMaxVisibleItems, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCompleter(void *, const sipTypeDef *);}
static void *cast_QCompleter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCompleter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QCompleter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCompleter(void *, int);}
static void release_QCompleter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQCompleter *>(sipCppV);
    else
        delete reinterpret_cast<QCompleter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCompleter(sipSimpleWrapper *);}
static void dealloc_QCompleter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCompleter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCompleter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QCompleter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QCompleter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCompleter *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J<", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCompleter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QAbstractItemModel * a0;
        QObject * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCompleter(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStringList * a0;
        int a0State = 0;
        QObject * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCompleter(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCompleter[] = {{133, 0, 1}};


static PyMethodDef methods_QCompleter[] = {
    {SIP_MLNAME_CAST(sipName_caseSensitivity), meth_QCompleter_caseSensitivity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QCompleter_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_complete), (PyCFunction)meth_QCompleter_complete, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_completionColumn), meth_QCompleter_completionColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completionCount), meth_QCompleter_completionCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completionMode), meth_QCompleter_completionMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completionModel), meth_QCompleter_completionModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completionPrefix), meth_QCompleter_completionPrefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_completionRole), meth_QCompleter_completionRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QCompleter_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentCompletion), meth_QCompleter_currentCompletion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QCompleter_currentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentRow), meth_QCompleter_currentRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QCompleter_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QCompleter_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QCompleter_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QCompleter_eventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maxVisibleItems), meth_QCompleter_maxVisibleItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QCompleter_model, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_modelSorting), meth_QCompleter_modelSorting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pathFromIndex), meth_QCompleter_pathFromIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_popup), meth_QCompleter_popup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QCompleter_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QCompleter_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCaseSensitivity), meth_QCompleter_setCaseSensitivity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompletionColumn), meth_QCompleter_setCompletionColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompletionMode), meth_QCompleter_setCompletionMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompletionPrefix), meth_QCompleter_setCompletionPrefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompletionRole), meth_QCompleter_setCompletionRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentRow), meth_QCompleter_setCurrentRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaxVisibleItems), meth_QCompleter_setMaxVisibleItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QCompleter_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModelSorting), meth_QCompleter_setModelSorting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPopup), meth_QCompleter_setPopup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QCompleter_setWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWrapAround), meth_QCompleter_setWrapAround, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_splitPath), meth_QCompleter_splitPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QCompleter_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widget), meth_QCompleter_widget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wrapAround), meth_QCompleter_wrapAround, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QCompleter[] = {
    {sipName_CaseInsensitivelySortedModel, QCompleter::CaseInsensitivelySortedModel, 67},
    {sipName_CaseSensitivelySortedModel, QCompleter::CaseSensitivelySortedModel, 67},
    {sipName_InlineCompletion, QCompleter::InlineCompletion, 66},
    {sipName_PopupCompletion, QCompleter::PopupCompletion, 66},
    {sipName_UnfilteredPopupCompletion, QCompleter::UnfilteredPopupCompletion, 66},
    {sipName_UnsortedModel, QCompleter::UnsortedModel, 67},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QCompleter[] = {
    {"highlighted(QString)", 0, 0},
    {"highlighted(QModelIndex)", 0, 0},
    {"activated(QString)", 0, 0},
    {"activated(QModelIndex)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QCompleter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QCompleter,
        {0}
    },
    {
        sipNameNr_QCompleter,
        {0, 0, 1},
        40, methods_QCompleter,
        6, enummembers_QCompleter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QCompleter,
    0,
    init_QCompleter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCompleter,
    0,
    0,
    0,
    release_QCompleter,
    cast_QCompleter,
    0,
    0,
    0
},
    &QCompleter::staticMetaObject,
    0,
    pyqt4_signals_QCompleter
};
