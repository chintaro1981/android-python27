/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 39 "sipQtGuiQTransform.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 43 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 46 "sipQtGuiQTransform.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 52 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 55 "sipQtGuiQTransform.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 58 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 61 "sipQtGuiQTransform.cpp"
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 64 "sipQtGuiQTransform.cpp"
#line 336 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 67 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 70 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 55 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 75 "sipQtGuiQTransform.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "sipQtGuiQTransform.cpp"


extern "C" {static PyObject *meth_QTransform_type(PyObject *, PyObject *);}
static PyObject *meth_QTransform_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform::TransformationType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTransform_TransformationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_setMatrix(PyObject *, PyObject *);}
static PyObject *meth_QTransform_setMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        qreal a6;
        qreal a7;
        qreal a8;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddddddd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatrix(a0,a1,a2,a3,a4,a5,a6,a7,a8);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_setMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTransform *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invertible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->inverted(&a0));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_inverted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_adjoint(PyObject *, PyObject *);}
static PyObject *meth_QTransform_adjoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->adjoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_adjoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_transposed(PyObject *, PyObject *);}
static PyObject *meth_QTransform_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->transposed());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_transposed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_translate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_scale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->scale(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_scale, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_shear(PyObject *, PyObject *);}
static PyObject *meth_QTransform_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->shear(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_shear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Qt::Axis a1 = Qt::ZAxis;
        QTransform *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->rotate(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_rotateRadians(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotateRadians(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Qt::Axis a1 = Qt::ZAxis;
        QTransform *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->rotateRadians(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotateRadians, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        QTransform * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QTransform::squareToQuad(*a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_squareToQuad, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        QTransform * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QTransform::quadToSquare(*a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToSquare, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        const QPolygonF * a1;
        QTransform * a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QPolygonF, &a0, sipType_QPolygonF, &a1, sipType_QTransform, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QTransform::quadToQuad(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToQuad, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_reset(PyObject *, PyObject *);}
static PyObject *meth_QTransform_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_map(PyObject *, PyObject *);}
static PyObject *meth_QTransform_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXiXi", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->map(a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ii)",a2,a3);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->map(a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dd)",a2,a3);
        }
    }

    {
        const QPoint * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QPointF * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPointF, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        const QLine * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLine, &a0))
        {
            QLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLine(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLine,NULL);
        }
    }

    {
        const QLineF * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLineF, &a0))
        {
            QLineF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLineF(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    {
        const QPolygonF * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPolygon * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygon, &a0))
        {
            QPolygon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QRegion * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRegion, &a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    {
        const QPainterPath * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_map, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_mapToPolygon(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapToPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
            QPolygon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->mapToPolygon(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapToPolygon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->mapRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRectF * a0;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->mapRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_toAffine(PyObject *, PyObject *);}
static PyObject *meth_QTransform_toAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->toAffine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_toAffine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isAffine(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAffine();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isAffine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIdentity();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isIdentity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isInvertible(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isInvertible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isInvertible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isInvertible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isScaling(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isScaling();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isScaling, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isRotating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isRotating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRotating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isRotating, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_isTranslating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isTranslating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTranslating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isTranslating, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_determinant(PyObject *, PyObject *);}
static PyObject *meth_QTransform_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->determinant();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_determinant, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_det(PyObject *, PyObject *);}
static PyObject *meth_QTransform_det(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->det();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_det, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m11(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m11(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m11();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m11, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m12(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m12(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m12();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m12, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m13(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m13(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m13();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m13, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m21(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m21(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m21();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m21, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m22(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m22(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m22();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m22, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m23(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m23(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m23();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m23, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m31(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m31(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m31();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m31, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m32(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m32();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m32, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_m33(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m33(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->m33();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m33, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_dx(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dx();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dx, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_dy(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dy();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(QTransform::fromTranslate(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromTranslate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(QTransform::fromScale(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromScale, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QTransform___div__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___add__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform((*a0 + a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___sub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform((*a0 - a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTransform::operator-=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTransform::operator+=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTransform::operator/=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___mul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform * a0;
        const QTransform * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    {
        const QTransform * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___imul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTransform::operator*=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QTransform::operator*=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTransform::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTransform,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTransform___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTransform::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTransform,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTransform(void *, const sipTypeDef *);}
static void *cast_QTransform(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTransform)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTransform(void *, int);}
static void release_QTransform(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTransform *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QTransform(void *);}
static PyObject *pickle_QTransform(void *sipCppV)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipCppV);
    PyObject *sipRes;

#line 48 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
#line 1755 "sipQtGuiQTransform.cpp"

    return sipRes;
}


extern "C" {static void assign_QTransform(void *, SIP_SSIZE_T, const void *);}
static void assign_QTransform(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTransform *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTransform *>(sipSrc);
}


extern "C" {static void *array_QTransform(SIP_SSIZE_T);}
static void *array_QTransform(SIP_SSIZE_T sipNrElem)
{
    return new QTransform[sipNrElem];
}


extern "C" {static void *copy_QTransform(const void *, SIP_SSIZE_T);}
static void *copy_QTransform(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTransform(reinterpret_cast<const QTransform *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTransform(sipSimpleWrapper *);}
static void dealloc_QTransform(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTransform(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTransform(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTransform(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTransform *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTransform();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        qreal a6;
        qreal a7;
        qreal a8 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_m33,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddddddd|d", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTransform(a0,a1,a2,a3,a4,a5,a6,a7,a8);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTransform(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QMatrix * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMatrix, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTransform(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTransform * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTransform, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTransform(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTransform[] = {
    {(void *)slot_QTransform___div__, div_slot},
    {(void *)slot_QTransform___add__, add_slot},
    {(void *)slot_QTransform___sub__, sub_slot},
    {(void *)slot_QTransform___isub__, isub_slot},
    {(void *)slot_QTransform___iadd__, iadd_slot},
    {(void *)slot_QTransform___idiv__, idiv_slot},
    {(void *)slot_QTransform___mul__, mul_slot},
    {(void *)slot_QTransform___imul__, imul_slot},
    {(void *)slot_QTransform___ne__, ne_slot},
    {(void *)slot_QTransform___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTransform[] = {
    {SIP_MLNAME_CAST(sipName_adjoint), meth_QTransform_adjoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_det), meth_QTransform_det, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QTransform_determinant, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dx), meth_QTransform_dx, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dy), meth_QTransform_dy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromScale), meth_QTransform_fromScale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromTranslate), meth_QTransform_fromTranslate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inverted), (PyCFunction)meth_QTransform_inverted, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isAffine), meth_QTransform_isAffine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QTransform_isIdentity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isInvertible), meth_QTransform_isInvertible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRotating), meth_QTransform_isRotating, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isScaling), meth_QTransform_isScaling, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTranslating), meth_QTransform_isTranslating, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m11), meth_QTransform_m11, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m12), meth_QTransform_m12, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m13), meth_QTransform_m13, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m21), meth_QTransform_m21, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m22), meth_QTransform_m22, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m23), meth_QTransform_m23, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m31), meth_QTransform_m31, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m32), meth_QTransform_m32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_m33), meth_QTransform_m33, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_map), meth_QTransform_map, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mapRect), meth_QTransform_mapRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mapToPolygon), meth_QTransform_mapToPolygon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quadToQuad), meth_QTransform_quadToQuad, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quadToSquare), meth_QTransform_quadToSquare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTransform_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate), (PyCFunction)meth_QTransform_rotate, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rotateRadians), (PyCFunction)meth_QTransform_rotateRadians, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scale), meth_QTransform_scale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMatrix), meth_QTransform_setMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shear), meth_QTransform_shear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_squareToQuad), meth_QTransform_squareToQuad, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAffine), meth_QTransform_toAffine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QTransform_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QTransform_transposed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QTransform_type, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTransform[] = {
    {sipName_TxNone, QTransform::TxNone, 712},
    {sipName_TxProject, QTransform::TxProject, 712},
    {sipName_TxRotate, QTransform::TxRotate, 712},
    {sipName_TxScale, QTransform::TxScale, 712},
    {sipName_TxShear, QTransform::TxShear, 712},
    {sipName_TxTranslate, QTransform::TxTranslate, 712},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTransform = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTransform,
        {0}
    },
    {
        sipNameNr_QTransform,
        {0, 0, 1},
        39, methods_QTransform,
        6, enummembers_QTransform,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTransform,
    init_QTransform,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTransform,
    assign_QTransform,
    array_QTransform,
    copy_QTransform,
    release_QTransform,
    cast_QTransform,
    0,
    0,
    pickle_QTransform
},
    0,
    0,
    0
};
