/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:18 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 39 "sipQtGuiQMatrix4x4.cpp"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 43 "sipQtGuiQMatrix4x4.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 46 "sipQtGuiQMatrix4x4.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 49 "sipQtGuiQMatrix4x4.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 52 "sipQtGuiQMatrix4x4.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 55 "sipQtGuiQMatrix4x4.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 58 "sipQtGuiQMatrix4x4.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtGuiQMatrix4x4.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64 "sipQtGuiQMatrix4x4.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 67 "sipQtGuiQMatrix4x4.cpp"
#line 431 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 70 "sipQtGuiQMatrix4x4.cpp"


extern "C" {static PyObject *meth_QMatrix4x4_determinant(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->determinant();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_determinant, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMatrix4x4 *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invertible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4(sipCpp->inverted(&a0));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_inverted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4(sipCpp->transposed());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_transposed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_normalMatrix(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_normalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            QMatrix3x3 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix3x3(sipCpp->normalMatrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix3x3,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_normalMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_scale(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_scale, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_translate(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QVector3D * a1;
        QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BdJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 0;
        QMatrix4x4 *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_z,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bddd|d", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QQuaternion * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QQuaternion, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_rotate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_ortho(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_ortho(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ortho(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ortho(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ortho(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_ortho, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_frustum(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_frustum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->frustum(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_frustum, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_perspective(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_perspective(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->perspective(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_perspective, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_lookAt(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_lookAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D * a0;
        const QVector3D * a1;
        const QVector3D * a2;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0, sipType_QVector3D, &a1, sipType_QVector3D, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lookAt(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_lookAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_flipCoordinates(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_flipCoordinates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->flipCoordinates();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_flipCoordinates, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 145 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        qreal values[16];
        
        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(16, values, &sipRes);
#line 587 "sipQtGuiQMatrix4x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_copyDataTo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_toAffine(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_toAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->toAffine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_toAffine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_toTransform(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_toTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->toTransform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    {
        qreal a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->toTransform(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_toTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRect, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->mapRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRectF * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->mapRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_mapRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        sipError = qtgui_matrixDataAsList(16, sipCpp->constData(), &sipRes);
#line 737 "sipQtGuiQMatrix4x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_optimize(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_optimize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->optimize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_optimize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_column(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            QVector4D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector4D(sipCpp->column(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_column, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_setColumn(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVector4D * a1;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_row(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            QVector4D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector4D(sipCpp->row(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_row, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_setRow(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVector4D * a1;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRow(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIdentity();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_isIdentity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix4x4, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToIdentity();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_setToIdentity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMatrix4x4, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_fill, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_map(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QPointF * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QPointF, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        const QVector3D * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            QVector3D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector3D(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    {
        const QVector4D * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector4D, &a0))
        {
            QVector4D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector4D(sipCpp->map(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_map, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QMatrix4x4_mapVector(PyObject *, PyObject *);}
static PyObject *meth_QMatrix4x4_mapVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D * a0;
        QMatrix4x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMatrix4x4, &sipCpp, sipType_QVector3D, &a0))
        {
            QVector3D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector3D(sipCpp->mapVector(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName_mapVector, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QMatrix4x4___mul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;
        const QMatrix4x4 * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    {
        const QMatrix4x4 * a0;
        const QVector3D * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QVector3D, &a1))
        {
            QVector3D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector3D((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    {
        const QMatrix4x4 * a0;
        const QVector4D * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QVector4D, &a1))
        {
            QVector4D *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector4D((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    {
        const QMatrix4x4 * a0;
        const QPoint * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QPoint, &a1))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QMatrix4x4 * a0;
        const QPointF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QPointF, &a1))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        qreal a0;
        const QMatrix4x4 * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QMatrix4x4, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    {
        const QMatrix4x4 * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMatrix4x4, &a0, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___div__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMatrix4x4, &a0, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___add__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;
        const QMatrix4x4 * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((*a0 + *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___sub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;
        const QMatrix4x4 * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMatrix4x4, &a0, sipType_QMatrix4x4, &a1))
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4((*a0 - *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QMatrix4x4___neg__(PyObject *);}
static PyObject *slot_QMatrix4x4___neg__(PyObject *sipSelf)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;


    {
        {
            QMatrix4x4 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix4x4(-(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }
}


extern "C" {static PyObject *slot_QMatrix4x4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QMatrix4x4::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QMatrix4x4,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QMatrix4x4::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QMatrix4x4,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMatrix4x4___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QMatrix4x4::operator/=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QMatrix4x4::operator*=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QMatrix4x4::operator*=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QMatrix4x4::operator-=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix4x4___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix4x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4 * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix4x4, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QMatrix4x4::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix4x4___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix4x4___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0d", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 177 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        int row, column;
        
        if ((sipError = qtgui_matrixParseIndex(a0, 4, 4, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 1592 "sipQtGuiQMatrix4x4.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix4x4___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix4x4___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 164 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        int row, column;
        
        if ((sipError = qtgui_matrixParseIndex(a0, 4, 4, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));
        
            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 1641 "sipQtGuiQMatrix4x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix4x4, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QMatrix4x4___repr__(PyObject *);}
static PyObject *slot_QMatrix4x4___repr__(PyObject *sipSelf)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix4x4));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 75 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        bool bad = false;
        int i;
        PyObject *m[16];
        qreal data[16];
        
        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);
        
        for (i = 0; i < 16; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);
        
            if (!m[i])
                bad = true;
        }
        
        if (!bad)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtGui.QMatrix4x4("
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R)",
                    m[0], m[1], m[2], m[3],
                    m[4], m[5], m[6], m[7],
                    m[8], m[9], m[10], m[11],
                    m[12], m[13], m[14], m[15]);
        #else
            sipRes = PyString_FromString("PyQt4.QtGui.QMatrix4x4(");
        
            for (i = 0; i < 16; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
        
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        for (i = 0; i < 16; ++i)
            Py_XDECREF(m[i]);
#line 1721 "sipQtGuiQMatrix4x4.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMatrix4x4(void *, const sipTypeDef *);}
static void *cast_QMatrix4x4(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMatrix4x4)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix4x4(void *, int);}
static void release_QMatrix4x4(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QMatrix4x4 *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QMatrix4x4(void *);}
static PyObject *pickle_QMatrix4x4(void *sipCppV)
{
    QMatrix4x4 *sipCpp = reinterpret_cast<QMatrix4x4 *>(sipCppV);
    PyObject *sipRes;

#line 48 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
    qreal data[16];
    
    // We want the data in row-major order.
    sipCpp->copyDataTo(data);
    
    sipRes = Py_BuildValue((char *)"dddddddddddddddd",
            data[0], data[1], data[2], data[3],
            data[4], data[5], data[6], data[7],
            data[8], data[9], data[10], data[11],
            data[12], data[13], data[14], data[15]);
#line 1769 "sipQtGuiQMatrix4x4.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix4x4(void *, SIP_SSIZE_T, const void *);}
static void assign_QMatrix4x4(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMatrix4x4 *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMatrix4x4 *>(sipSrc);
}


extern "C" {static void *array_QMatrix4x4(SIP_SSIZE_T);}
static void *array_QMatrix4x4(SIP_SSIZE_T sipNrElem)
{
    return new QMatrix4x4[sipNrElem];
}


extern "C" {static void *copy_QMatrix4x4(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix4x4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMatrix4x4(reinterpret_cast<const QMatrix4x4 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix4x4(sipSimpleWrapper *);}
static void dealloc_QMatrix4x4(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMatrix4x4(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QMatrix4x4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QMatrix4x4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMatrix4x4 *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMatrix4x4();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 64 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix4x4.sip"
        qreal values[16];
        
        if ((sipError = qtgui_matrixDataFromSequence(a0, 16, values)) == sipErrorNone)
            sipCpp = new QMatrix4x4(values);
#line 1834 "sipQtGuiQMatrix4x4.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        qreal a6;
        qreal a7;
        qreal a8;
        qreal a9;
        qreal a10;
        qreal a11;
        qreal a12;
        qreal a13;
        qreal a14;
        qreal a15;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddddddddddddddd", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMatrix4x4(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTransform * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTransform, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMatrix4x4(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QMatrix * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMatrix, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMatrix4x4(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QMatrix4x4 * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMatrix4x4, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMatrix4x4(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix4x4[] = {
    {(void *)slot_QMatrix4x4___mul__, mul_slot},
    {(void *)slot_QMatrix4x4___div__, div_slot},
    {(void *)slot_QMatrix4x4___add__, add_slot},
    {(void *)slot_QMatrix4x4___sub__, sub_slot},
    {(void *)slot_QMatrix4x4___neg__, neg_slot},
    {(void *)slot_QMatrix4x4___ne__, ne_slot},
    {(void *)slot_QMatrix4x4___eq__, eq_slot},
    {(void *)slot_QMatrix4x4___idiv__, idiv_slot},
    {(void *)slot_QMatrix4x4___imul__, imul_slot},
    {(void *)slot_QMatrix4x4___isub__, isub_slot},
    {(void *)slot_QMatrix4x4___iadd__, iadd_slot},
    {(void *)slot_QMatrix4x4___setitem__, setitem_slot},
    {(void *)slot_QMatrix4x4___getitem__, getitem_slot},
    {(void *)slot_QMatrix4x4___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix4x4[] = {
    {SIP_MLNAME_CAST(sipName_column), meth_QMatrix4x4_column, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix4x4_copyDataTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix4x4_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QMatrix4x4_determinant, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix4x4_fill, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flipCoordinates), meth_QMatrix4x4_flipCoordinates, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frustum), meth_QMatrix4x4_frustum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inverted), (PyCFunction)meth_QMatrix4x4_inverted, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix4x4_isIdentity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lookAt), meth_QMatrix4x4_lookAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_map), meth_QMatrix4x4_map, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mapRect), meth_QMatrix4x4_mapRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mapVector), meth_QMatrix4x4_mapVector, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalMatrix), meth_QMatrix4x4_normalMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_optimize), meth_QMatrix4x4_optimize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ortho), meth_QMatrix4x4_ortho, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_perspective), meth_QMatrix4x4_perspective, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate), (PyCFunction)meth_QMatrix4x4_rotate, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QMatrix4x4_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scale), meth_QMatrix4x4_scale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumn), meth_QMatrix4x4_setColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRow), meth_QMatrix4x4_setRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix4x4_setToIdentity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAffine), meth_QMatrix4x4_toAffine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTransform), meth_QMatrix4x4_toTransform, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QMatrix4x4_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix4x4_transposed, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QMatrix4x4 = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QMatrix4x4,
        {0}
    },
    {
        sipNameNr_QMatrix4x4,
        {0, 0, 1},
        27, methods_QMatrix4x4,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QMatrix4x4,
    init_QMatrix4x4,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMatrix4x4,
    assign_QMatrix4x4,
    array_QMatrix4x4,
    copy_QMatrix4x4,
    release_QMatrix4x4,
    cast_QMatrix4x4,
    0,
    0,
    pickle_QMatrix4x4
},
    0,
    0,
    0
};
