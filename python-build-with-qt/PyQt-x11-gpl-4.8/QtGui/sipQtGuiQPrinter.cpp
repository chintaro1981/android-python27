/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:17 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 39 "sipQtGuiQPrinter.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qprinterinfo.sip"
#include <qprinterinfo.h>
#line 43 "sipQtGuiQPrinter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qprintengine.sip"
#include <qprintengine.h>
#line 46 "sipQtGuiQPrinter.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 49 "sipQtGuiQPrinter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 52 "sipQtGuiQPrinter.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 55 "sipQtGuiQPrinter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtGuiQPrinter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtGuiQPrinter.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64 "sipQtGuiQPrinter.cpp"
#line 632 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtGuiQPrinter.cpp"


class sipQPrinter : public QPrinter
{
public:
    sipQPrinter(QPrinter::PrinterMode);
    sipQPrinter(const QPrinterInfo&,QPrinter::PrinterMode);
    virtual ~sipQPrinter();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_setEngines(QPrintEngine *,QPaintEngine *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const;
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPrinter(const sipQPrinter &);
    sipQPrinter &operator = (const sipQPrinter &);

    char sipPyMethods[3];
};

sipQPrinter::sipQPrinter(QPrinter::PrinterMode a0): QPrinter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::sipQPrinter(const QPrinterInfo& a0,QPrinter::PrinterMode a1): QPrinter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::~sipQPrinter()
{
    sipCommonDtor(sipPySelf);
}

int sipQPrinter::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QPrinter::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QPaintEngine * sipQPrinter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QPrinter::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

int sipQPrinter::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QPrinter::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

int sipQPrinter::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QPrinter::metric(a0) : metric(a0));
}

void sipQPrinter::sipProtect_setEngines(QPrintEngine *a0,QPaintEngine *a1)
{
    QPrinter::setEngines(a0,a1);
}


extern "C" {static PyObject *meth_QPrinter_devType(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::devType() : sipCpp->devType());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_devType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPrinterName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrinterName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrinterName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrinterName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printerName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printerName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setOutputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_outputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->outputFileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPrintProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrintProgram(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintProgram, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printProgram());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printProgram, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setDocName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDocName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDocName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_docName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_docName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->docName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_docName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setCreator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCreator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCreator(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCreator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_creator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_creator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->creator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_creator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::Orientation a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Orientation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOrientation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_orientation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageSize a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageSize sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageSize();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageSize);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageOrder a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageOrder, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageOrder(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageOrder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_pageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageOrder sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageOrder();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageOrder, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResolution(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_resolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolution();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_resolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setColorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setColorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::ColorMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_ColorMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColorMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setColorMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_colorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_colorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::ColorMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->colorMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_ColorMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_colorMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setCollateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCollateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCollateCopies(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCollateCopies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_collateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_collateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->collateCopies();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_collateCopies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setFullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFullPage(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFullPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_fullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fullPage();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fullPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setNumCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setNumCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumCopies(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setNumCopies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_numCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_numCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numCopies();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_numCopies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPaperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PaperSource a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PaperSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSource(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_paperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PaperSource sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paperSource();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PaperSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_supportedResolutions(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QList<int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->supportedResolutions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportedResolutions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_paperRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->paperRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->paperRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_pageRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->pageRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->pageRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printerSelectionOption(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerSelectionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->printerSelectionOption());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerSelectionOption, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPrinterSelectionOption(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrinterSelectionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrinterSelectionOption(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrinterSelectionOption, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_newPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_newPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->newPage();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_newPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_abort(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->abort();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_abort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printerState(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrinterState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printerState();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrinterState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paintEngine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setOutputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::OutputFormat a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_OutputFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_outputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::OutputFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->outputFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_OutputFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontEmbeddingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFontEmbeddingEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontEmbeddingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fontEmbeddingEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printEngine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPrintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printEngine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setFromTo(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFromTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFromTo(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFromTo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_fromPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fromPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fromPage();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fromPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_toPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_toPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toPage();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_toPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPrintRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PrintRange a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PrintRange, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrintRange(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintRange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_printRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrintRange sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->printRange();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrintRange);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printRange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDoubleSidedPrinting(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDoubleSidedPrinting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doubleSidedPrinting();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_doubleSidedPrinting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPaperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageSize a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSizeF * a0;
        QPrinter::Unit a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QSizeF, &a0, sipType_QPrinter_Unit, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaperSize(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_paperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageSize sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paperSize();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageSize);
        }
    }

    {
        QPrinter::Unit a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->paperSize(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setDuplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDuplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::DuplexMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_DuplexMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDuplex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDuplex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_duplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_duplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::DuplexMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->duplex();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPrinter_DuplexMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_duplex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddddE", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPrinter_Unit, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageMargins(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageMargins, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_getPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_getPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getPageMargins(&a0,&a1,&a2,&a3,a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_getPageMargins, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_actualNumCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_actualNumCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actualNumCopies();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_actualNumCopies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_metric(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setEngines(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setEngines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintEngine * a0;
        PyObject *a0Keep;
        QPaintEngine * a1;
        PyObject *a1Keep;
        sipQPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8@J8", &sipSelf, sipType_QPrinter, &sipCpp, &a0Keep, sipType_QPrintEngine, &a0, &a1Keep, sipType_QPaintEngine, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setEngines(a0,a1);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -52, a0Keep);

            sipKeepReference(sipSelf, -53, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setEngines, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_setCopyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCopyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCopyCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCopyCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_copyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_copyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copyCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_copyCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsMultipleCopies();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportsMultipleCopies, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPrinter(void *, const sipTypeDef *);}
static void *cast_QPrinter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPrinter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QPrinter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPrinter(void *, int);}
static void release_QPrinter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPrinter *>(sipCppV);
    else
        delete reinterpret_cast<QPrinter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPrinter(sipSimpleWrapper *);}
static void dealloc_QPrinter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPrinter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPrinter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QPrinter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QPrinter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPrinter *sipCpp = 0;

    {
        QPrinter::PrinterMode a0 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QPrinter_PrinterMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrinter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPrinterInfo * a0;
        QPrinter::PrinterMode a1 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QPrinterInfo, &a0, sipType_QPrinter_PrinterMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPrinter(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPrinter[] = {{356, 255, 1}};


static PyMethodDef methods_QPrinter[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QPrinter_abort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actualNumCopies), meth_QPrinter_actualNumCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_collateCopies), meth_QPrinter_collateCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_colorMode), meth_QPrinter_colorMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copyCount), meth_QPrinter_copyCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_creator), meth_QPrinter_creator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_devType), meth_QPrinter_devType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_docName), meth_QPrinter_docName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doubleSidedPrinting), meth_QPrinter_doubleSidedPrinting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_duplex), meth_QPrinter_duplex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontEmbeddingEnabled), meth_QPrinter_fontEmbeddingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromPage), meth_QPrinter_fromPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fullPage), meth_QPrinter_fullPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPageMargins), meth_QPrinter_getPageMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPrinter_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPrinter_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_newPage), meth_QPrinter_newPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numCopies), meth_QPrinter_numCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QPrinter_orientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_outputFileName), meth_QPrinter_outputFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_outputFormat), meth_QPrinter_outputFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageOrder), meth_QPrinter_pageOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageRect), meth_QPrinter_pageRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QPrinter_pageSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPrinter_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paperRect), meth_QPrinter_paperRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paperSize), meth_QPrinter_paperSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paperSource), meth_QPrinter_paperSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printEngine), meth_QPrinter_printEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printProgram), meth_QPrinter_printProgram, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printRange), meth_QPrinter_printRange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printerName), meth_QPrinter_printerName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printerSelectionOption), meth_QPrinter_printerSelectionOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_printerState), meth_QPrinter_printerState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QPrinter_resolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCollateCopies), meth_QPrinter_setCollateCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorMode), meth_QPrinter_setColorMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCopyCount), meth_QPrinter_setCopyCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCreator), meth_QPrinter_setCreator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocName), meth_QPrinter_setDocName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDoubleSidedPrinting), meth_QPrinter_setDoubleSidedPrinting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDuplex), meth_QPrinter_setDuplex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEngines), meth_QPrinter_setEngines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontEmbeddingEnabled), meth_QPrinter_setFontEmbeddingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFromTo), meth_QPrinter_setFromTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFullPage), meth_QPrinter_setFullPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumCopies), meth_QPrinter_setNumCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QPrinter_setOrientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutputFileName), meth_QPrinter_setOutputFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutputFormat), meth_QPrinter_setOutputFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPageMargins), meth_QPrinter_setPageMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPageOrder), meth_QPrinter_setPageOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QPrinter_setPageSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPaperSize), meth_QPrinter_setPaperSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPaperSource), meth_QPrinter_setPaperSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrintProgram), meth_QPrinter_setPrintProgram, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrintRange), meth_QPrinter_setPrintRange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrinterName), meth_QPrinter_setPrinterName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrinterSelectionOption), meth_QPrinter_setPrinterSelectionOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QPrinter_setResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), meth_QPrinter_supportedResolutions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsMultipleCopies), meth_QPrinter_supportsMultipleCopies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPage), meth_QPrinter_toPage, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPrinter[] = {
    {sipName_A0, QPrinter::A0, 409},
    {sipName_A1, QPrinter::A1, 409},
    {sipName_A2, QPrinter::A2, 409},
    {sipName_A3, QPrinter::A3, 409},
    {sipName_A4, QPrinter::A4, 409},
    {sipName_A5, QPrinter::A5, 409},
    {sipName_A6, QPrinter::A6, 409},
    {sipName_A7, QPrinter::A7, 409},
    {sipName_A8, QPrinter::A8, 409},
    {sipName_A9, QPrinter::A9, 409},
    {sipName_Aborted, QPrinter::Aborted, 413},
    {sipName_Active, QPrinter::Active, 413},
    {sipName_AllPages, QPrinter::AllPages, 411},
    {sipName_Auto, QPrinter::Auto, 410},
    {sipName_B0, QPrinter::B0, 409},
    {sipName_B1, QPrinter::B1, 409},
    {sipName_B10, QPrinter::B10, 409},
    {sipName_B2, QPrinter::B2, 409},
    {sipName_B3, QPrinter::B3, 409},
    {sipName_B4, QPrinter::B4, 409},
    {sipName_B5, QPrinter::B5, 409},
    {sipName_B6, QPrinter::B6, 409},
    {sipName_B7, QPrinter::B7, 409},
    {sipName_B8, QPrinter::B8, 409},
    {sipName_B9, QPrinter::B9, 409},
    {sipName_C5E, QPrinter::C5E, 409},
    {sipName_Cassette, QPrinter::Cassette, 410},
    {sipName_Cicero, QPrinter::Cicero, 414},
    {sipName_Color, QPrinter::Color, 404},
    {sipName_Comm10E, QPrinter::Comm10E, 409},
    {sipName_CurrentPage, QPrinter::CurrentPage, 411},
    {sipName_Custom, QPrinter::Custom, 409},
    {sipName_DLE, QPrinter::DLE, 409},
    {sipName_DevicePixel, QPrinter::DevicePixel, 414},
    {sipName_Didot, QPrinter::Didot, 414},
    {sipName_DuplexAuto, QPrinter::DuplexAuto, 405},
    {sipName_DuplexLongSide, QPrinter::DuplexLongSide, 405},
    {sipName_DuplexNone, QPrinter::DuplexNone, 405},
    {sipName_DuplexShortSide, QPrinter::DuplexShortSide, 405},
    {sipName_Envelope, QPrinter::Envelope, 410},
    {sipName_EnvelopeManual, QPrinter::EnvelopeManual, 410},
    {sipName_Error, QPrinter::Error, 413},
    {sipName_Executive, QPrinter::Executive, 409},
    {sipName_FirstPageFirst, QPrinter::FirstPageFirst, 408},
    {sipName_Folio, QPrinter::Folio, 409},
    {sipName_FormSource, QPrinter::FormSource, 410},
    {sipName_GrayScale, QPrinter::GrayScale, 404},
    {sipName_HighResolution, QPrinter::HighResolution, 412},
    {sipName_Idle, QPrinter::Idle, 413},
    {sipName_Inch, QPrinter::Inch, 414},
    {sipName_Landscape, QPrinter::Landscape, 406},
    {sipName_LargeCapacity, QPrinter::LargeCapacity, 410},
    {sipName_LargeFormat, QPrinter::LargeFormat, 410},
    {sipName_LastPageFirst, QPrinter::LastPageFirst, 408},
    {sipName_Ledger, QPrinter::Ledger, 409},
    {sipName_Legal, QPrinter::Legal, 409},
    {sipName_Letter, QPrinter::Letter, 409},
    {sipName_Lower, QPrinter::Lower, 410},
    {sipName_Manual, QPrinter::Manual, 410},
    {sipName_MaxPageSource, QPrinter::MaxPageSource, 410},
    {sipName_Middle, QPrinter::Middle, 410},
    {sipName_Millimeter, QPrinter::Millimeter, 414},
    {sipName_NativeFormat, QPrinter::NativeFormat, 407},
    {sipName_OnlyOne, QPrinter::OnlyOne, 410},
    {sipName_PageRange, QPrinter::PageRange, 411},
    {sipName_PdfFormat, QPrinter::PdfFormat, 407},
    {sipName_Pica, QPrinter::Pica, 414},
    {sipName_Point, QPrinter::Point, 414},
    {sipName_Portrait, QPrinter::Portrait, 406},
    {sipName_PostScriptFormat, QPrinter::PostScriptFormat, 407},
    {sipName_PrinterResolution, QPrinter::PrinterResolution, 412},
    {sipName_ScreenResolution, QPrinter::ScreenResolution, 412},
    {sipName_Selection, QPrinter::Selection, 411},
    {sipName_SmallFormat, QPrinter::SmallFormat, 410},
    {sipName_Tabloid, QPrinter::Tabloid, 409},
    {sipName_Tractor, QPrinter::Tractor, 410},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPrinter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPrinter,
        {0}
    },
    {
        sipNameNr_QPrinter,
        {0, 0, 1},
        63, methods_QPrinter,
        76, enummembers_QPrinter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QPrinter,
    0,
    init_QPrinter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPrinter,
    0,
    0,
    0,
    release_QPrinter,
    cast_QPrinter,
    0,
    0,
    0
},
    0,
    0,
    0
};
