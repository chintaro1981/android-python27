/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 39 "sipQtGuiQTextInlineObject.cpp"

#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43 "sipQtGuiQTextInlineObject.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQTextInlineObject.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQTextInlineObject.cpp"


extern "C" {static PyObject *meth_QTextInlineObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_rect(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->rect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_rect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_width(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_width, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_ascent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ascent();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_ascent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_descent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->descent();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_descent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_height(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_height, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_setAscent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setAscent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAscent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setAscent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_setDescent(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_setDescent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextInlineObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_setDescent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_textPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_textPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textPosition();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_textPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_formatIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_formatIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->formatIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_formatIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextInlineObject_format(PyObject *, PyObject *);}
static PyObject *meth_QTextInlineObject_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextInlineObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextInlineObject, &sipCpp))
        {
            QTextFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFormat(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextInlineObject, sipName_format, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextInlineObject(void *, const sipTypeDef *);}
static void *cast_QTextInlineObject(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextInlineObject)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextInlineObject(void *, int);}
static void release_QTextInlineObject(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextInlineObject *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextInlineObject(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextInlineObject(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextInlineObject *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextInlineObject *>(sipSrc);
}


extern "C" {static void *array_QTextInlineObject(SIP_SSIZE_T);}
static void *array_QTextInlineObject(SIP_SSIZE_T sipNrElem)
{
    return new QTextInlineObject[sipNrElem];
}


extern "C" {static void *copy_QTextInlineObject(const void *, SIP_SSIZE_T);}
static void *copy_QTextInlineObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextInlineObject(reinterpret_cast<const QTextInlineObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextInlineObject(sipSimpleWrapper *);}
static void dealloc_QTextInlineObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextInlineObject(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextInlineObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextInlineObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextInlineObject *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextInlineObject();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextInlineObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextInlineObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextInlineObject(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTextInlineObject[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QTextInlineObject_ascent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_descent), meth_QTextInlineObject_descent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextInlineObject_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_formatIndex), meth_QTextInlineObject_formatIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QTextInlineObject_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextInlineObject_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rect), meth_QTextInlineObject_rect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAscent), meth_QTextInlineObject_setAscent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDescent), meth_QTextInlineObject_setDescent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextInlineObject_setWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QTextInlineObject_textDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textPosition), meth_QTextInlineObject_textPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextInlineObject_width, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextInlineObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextInlineObject,
        {0}
    },
    {
        sipNameNr_QTextInlineObject,
        {0, 0, 1},
        13, methods_QTextInlineObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QTextInlineObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextInlineObject,
    assign_QTextInlineObject,
    array_QTextInlineObject,
    copy_QTextInlineObject,
    release_QTextInlineObject,
    cast_QTextInlineObject,
    0,
    0,
    0
},
    0,
    0,
    0
};
