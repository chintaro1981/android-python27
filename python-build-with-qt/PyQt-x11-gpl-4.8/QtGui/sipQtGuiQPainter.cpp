/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:17 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 41 "sipQtGuiQPainter.cpp"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 45 "sipQtGuiQPainter.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 51 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 54 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 57 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 62 "sipQtGuiQPainter.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 65 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 68 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 71 "sipQtGuiQPainter.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 74 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 77 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 80 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83 "sipQtGuiQPainter.cpp"
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 86 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qline.sip"
#include <qline.h>
#line 89 "sipQtGuiQPainter.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 92 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 95 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 98 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 101 "sipQtGuiQPainter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 104 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 112 "sipQtGuiQPainter.cpp"
#line 336 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 115 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 118 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 121 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 124 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 127 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 130 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 133 "sipQtGuiQPainter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 136 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 55 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 141 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 144 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 147 "sipQtGuiQPainter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 150 "sipQtGuiQPainter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 153 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 156 "sipQtGuiQPainter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 159 "sipQtGuiQPainter.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
// Return an array on the heap of class instances extracted from a set of
// Python arguments.
template<class TYPE>
static TYPE *qtgui_inst_array(const TYPE *first, PyObject *t, sipTypeDef *td)
{
    TYPE *arr = new TYPE[1 + PyTuple_GET_SIZE(t)];

    arr[0] = *first;

    for (SIP_SSIZE_T i = 0; i < PyTuple_GET_SIZE(t); ++i)
    {
        int iserr = 0, state;
        TYPE *itm;

        itm  = reinterpret_cast<TYPE *>(sipForceConvertToType(PyTuple_GET_ITEM(t, i), td, 0, SIP_NOT_NONE, &state, &iserr));

        if (iserr)
        {
            sipReleaseType(itm, td, state);

            PyErr_Format(PyExc_TypeError, "each argument must be an instance of %s", sipTypeAsPyTypeObject(td)->tp_name);

            delete[] arr;
            return 0;
        }

        arr[1 + i] = *itm;

        sipReleaseType(itm, td, state);
    }

    return arr;
}
#line 194 "sipQtGuiQPainter.cpp"


extern "C" {static PyObject *meth_QPainter_device(PyObject *, PyObject *);}
static PyObject *meth_QPainter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPaintDevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_device, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintDevice * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPaintDevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_begin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_end(PyObject *, PyObject *);}
static PyObject *meth_QPainter_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->end();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_end, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPainter_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_isActive, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_initFrom(PyObject *, PyObject *);}
static PyObject *meth_QPainter_initFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPainter, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initFrom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_initFrom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setCompositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setCompositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::CompositionMode a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_CompositionMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompositionMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setCompositionMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_compositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_compositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainter::CompositionMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compositionMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPainter_CompositionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_compositionMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_font(PyObject *, PyObject *);}
static PyObject *meth_QPainter_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setFont(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setFont, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFontMetrics *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFontMetrics(sipCpp->fontMetrics());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontMetrics, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_fontInfo(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFontInfo *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFontInfo(sipCpp->fontInfo());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFontInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setPen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPen(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPen * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPen(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::PenStyle a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setPen, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_pen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPen *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPen(sipCpp->pen());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_pen, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrush(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::BrushStyle a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BrushStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrush(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrush, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_brush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->brush());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brush, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setBackgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::BGMode a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BGMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackgroundMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_backgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_backgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Qt::BGMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->backgroundMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_BGMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_backgroundMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_brushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->brushOrigin());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brushOrigin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setBrushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrushOrigin(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrushOrigin(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrushOrigin(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrushOrigin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_background(PyObject *, PyObject *);}
static PyObject *meth_QPainter_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_background, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->clipRegion());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipRegion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_clipPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainterPath *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath(sipCpp->clipPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setClipRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_ClipOperation, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::ClipOperation a4 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ClipOperation, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipRect(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_ClipOperation, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setClipRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion * a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRegion, &a0, sipType_Qt_ClipOperation, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipRegion(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRegion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setClipPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath * a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ClipOperation, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipPath(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipping, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_hasClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_hasClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasClipping();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_hasClipping, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_save(PyObject *, PyObject *);}
static PyObject *meth_QPainter_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_restore(PyObject *, PyObject *);}
static PyObject *meth_QPainter_restore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->restore();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_restore, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setMatrix(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setMatrix(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix * a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QMatrix, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatrix(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_matrix(PyObject *, PyObject *);}
static PyObject *meth_QPainter_matrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->matrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_matrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_deviceMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPainter_deviceMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->deviceMatrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_deviceMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_resetMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPainter_resetMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetMatrix();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_resetMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMatrixEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setMatrixEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_matrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_matrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->matrixEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_matrixEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_scale(PyObject *, PyObject *);}
static PyObject *meth_QPainter_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scale(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_scale, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_shear(PyObject *, PyObject *);}
static PyObject *meth_QPainter_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->shear(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_shear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_rotate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_rotate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_translate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_window(PyObject *, PyObject *);}
static PyObject *meth_QPainter_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->window());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_window, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setWindow(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindow(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindow(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWindow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_viewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->viewport());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewport, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setViewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewport(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewport(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewport, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewTransformEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewTransformEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_viewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewTransformEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewTransformEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_strokePath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_strokePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath * a0;
        const QPen * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QPen, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->strokePath(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_strokePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_fillPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath * a0;
        const QBrush * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QBrush, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillPath(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPath(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPoints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 231 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1778 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPoints(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 245 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1829 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPoints(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawLines(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLines(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 259 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QLineF *lines = qtgui_inst_array<QLineF>(a0, a1, sipType_QLineF);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_GET_SIZE(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1892 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QLineF> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLineF,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLines(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QLineF> *>(a0),sipType_QVector_0100QLineF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pointPair,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 273 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPointF *pairs = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_GET_SIZE(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 1945 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QPointF> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPointF,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLines(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLine * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0, &a1))
        {
            int sipIsErr = 0;

#line 287 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QLine *lines = qtgui_inst_array<QLine>(a0, a1, sipType_QLine);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_GET_SIZE(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1998 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QLine> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLine,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLines(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QLine> *>(a0),sipType_QVector_0100QLine,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pointPair,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 301 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPoint *pairs = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_GET_SIZE(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 2051 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QPoint> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPoint,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLines(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QPoint> *>(a0),sipType_QVector_0100QPoint,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLines, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawRects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QRectF *rects = qtgui_inst_array<QRectF>(a0, a1, sipType_QRectF);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_GET_SIZE(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 2116 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QRectF> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRectF,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRects(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QRectF> *>(a0),sipType_QVector_0100QRectF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1))
        {
            int sipIsErr = 0;

#line 329 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QRect *rects = qtgui_inst_array<QRect>(a0, a1, sipType_QRect);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_GET_SIZE(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 2169 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QRect> * a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRect,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRects(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QRect> *>(a0),sipType_QVector_0100QRect,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRects, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawEllipse(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawEllipse(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawEllipse(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        qreal a1;
        qreal a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9dd", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawEllipse(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawEllipse(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawEllipse, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPolyline(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolyline(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 345 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2328 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPolyline(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 359 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2379 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPolyline(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolyline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPolygon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolygon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 373 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2442 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF * a0;
        Qt::FillRule a1 = Qt::OddEvenFill;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0, sipType_Qt_FillRule, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPolygon(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 387 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2499 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon * a0;
        Qt::FillRule a1 = Qt::OddEvenFill;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0, sipType_Qt_FillRule, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPolygon(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolygon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawConvexPolygon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawConvexPolygon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 401 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2568 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawConvexPolygon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        PyObject * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 415 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2619 "sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon * a0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawConvexPolygon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawConvexPolygon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawArc(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawArc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawArc(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawArc(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawArc(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawArc, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPie(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPie(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPie(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPie(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPie, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawChord(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawChord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawChord(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawChord(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawChord(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawChord, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawRoundRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRoundRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        int a1 = 25;
        int a2 = 25;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xRound,
            sipName_yRound,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundRect(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 25;
        int a5 = 25;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_xRound,
            sipName_yRound,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|ii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundRect(a0,a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        int a1 = 25;
        int a2 = 25;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xRound,
            sipName_yRound,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundRect(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRoundRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawTiledPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        const QPixmap * a1;
        const QPointF& a2def = QPointF();
        const QPointF * a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QPointF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QPixmap * a1;
        const QPoint& a2def = QPoint();
        const QPoint * a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QPoint, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap * a4;
        int a5 = 0;
        int a6 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_sx,
            sipName_sy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiiiJ9|ii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTiledPixmap(a0,a1,a2,a3,*a4,a5,a6);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawTiledPixmap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPicture(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        const QPicture * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QPicture, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPicture(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPicture * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPicture, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPicture(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QPicture * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPicture, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPicture(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPicture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        const QPixmap * a1;
        const QRectF * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QPixmap * a1;
        const QRect * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        const QPixmap * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QPixmap * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QPixmap * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPixmap * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap * a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap * a4;
        int a5;
        int a6;
        int a7;
        int a8;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6, &a7, &a8))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4,a5,a6,a7,a8);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPixmap * a2;
        int a3;
        int a4;
        int a5;
        int a6;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2, &a3, &a4, &a5, &a6))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(a0,a1,*a2,a3,a4,a5,a6);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        const QPixmap * a1;
        const QRectF * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QPixmap * a1;
        const QRect * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setLayoutDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layoutDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_layoutDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        const QString * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QRectF * a3;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_boundingRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new QRectF();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(*a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRectF,NULL);
        }
    }

    {
        const QRect * a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QRect * a3;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_boundingRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new QRect();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(*a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRect,NULL);
        }
    }

    {
        const QRectF * a0;
        const QString * a1;
        int a1State = 0;
        const QTextOption& a2def = QTextOption();
        const QTextOption * a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QString * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const QString * a5;
        int a5State = 0;
        QRect * a6;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_boundingRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            a6 = new QRect();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(a0,a1,a2,a3,a4,*a5,a6);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(a6,sipType_QRect,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawText(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundingRect(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    {
        const QRect * a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRectF * a0;
        const QString * a1;
        int a1State = 0;
        const QTextOption& a2def = QTextOption();
        const QTextOption * a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundingRect(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const QString * a5;
        int a5State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect(a0,a1,a2,a3,a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_boundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_fillRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        const QBrush * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QBrush, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QBrush * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QBrush, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QBrush * a4;
        int a4State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QBrush, &a4, &a4State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        const QColor * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QColor * a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QColor * a4;
        int a4State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QColor, &a4, &a4State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a4),sipType_QColor,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::GlobalColor a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_GlobalColor, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        Qt::GlobalColor a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_GlobalColor, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        Qt::GlobalColor a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_GlobalColor, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::BrushStyle a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_BrushStyle, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        Qt::BrushStyle a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_BrushStyle, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        Qt::BrushStyle a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_BrushStyle, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fillRect(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_eraseRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_eraseRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->eraseRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->eraseRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->eraseRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_eraseRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QPainter_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainter::RenderHints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_renderHints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setRenderHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints * a0;
        int a0State = 0;
        bool a1 = 1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paintEngine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_paintEngine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setRedirected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRedirected(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintDevice * a0;
        QPaintDevice * a1;
        const QPoint& a2def = QPoint();
        const QPoint * a2 = &a2def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J8|J9", sipType_QPaintDevice, &a0, sipType_QPaintDevice, &a1, sipType_QPoint, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            QPainter::setRedirected(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRedirected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_redirected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_redirected(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintDevice * a0;
        QPoint * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J8", sipType_QPaintDevice, &a0, sipType_QPoint, &a1))
        {
            QPaintDevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QPainter::redirected(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_redirected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_restoreRedirected(PyObject *, PyObject *);}
static PyObject *meth_QPainter_restoreRedirected(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintDevice * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QPaintDevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QPainter::restoreRedirected(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_restoreRedirected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawLine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLine(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLine * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLine(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLine(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QPoint * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLine(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        const QPointF * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawLine(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPoint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPoint(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPoint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPoint(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        const QImage * a1;
        const QRectF * a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QImage * a1;
        const QRect * a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        const QImage * a1;
        const QRectF * a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QImage * a1;
        const QRect * a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        const QImage * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        const QImage * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        const QImage * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QImage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QImage * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QImage * a2;
        int a3 = 0;
        int a4 = 0;
        int a5 = -1;
        int a6 = -1;
        Qt::ImageConversionFlags a7def = Qt::AutoColor;
        Qt::ImageConversionFlags * a7 = &a7def;
        int a7State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_sx,
            sipName_sy,
            sipName_sw,
            sipName_sh,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ9|iiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QImage, &a2, &a3, &a4, &a5, &a6, sipType_Qt_ImageConversionFlags, &a7, &a7State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawImage(a0,a1,*a2,a3,a4,a5,a6,*a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(a7,sipType_Qt_ImageConversionFlags,a7State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_combinedMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPainter_combinedMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->combinedMatrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_combinedMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_opacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->opacity();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_opacity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpacity(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setOpacity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_worldMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(sipCpp->worldMatrix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setWorldMatrix(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldMatrix(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix * a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QMatrix, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWorldMatrix(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldMatrix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->worldMatrixEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldMatrixEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWorldMatrixEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldMatrixEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransform(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_transform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->transform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_transform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_deviceTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_deviceTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->deviceTransform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_deviceTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_resetTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_resetTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetTransform();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_resetTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_setWorldTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform * a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWorldTransform(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_worldTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->worldTransform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_combinedTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_combinedTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(sipCpp->combinedTransform());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_combinedTransform, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_testRenderHint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_testRenderHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testRenderHint(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_testRenderHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawRoundedRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRoundedRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        qreal a1;
        qreal a2;
        Qt::SizeMode a3 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        qreal a4;
        qreal a5;
        Qt::SizeMode a6 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiidd|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_Qt_SizeMode, &a6))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundedRect(a0,a1,a2,a3,a4,a5,a6);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        qreal a1;
        qreal a2;
        Qt::SizeMode a3 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRoundedRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_beginNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_beginNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginNativePainting();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_beginNativePainting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_endNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_endNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endNativePainting();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_endNativePainting, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawPixmapFragments(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmapFragments(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const QPixmap * a1;
        QPainter::PixmapFragmentHints a2def = 0;
        QPainter::PixmapFragmentHints * a2 = &a2def;
        int a2State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fragments,
            sipName_pixmap,
            sipName_hints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BTJ9|J1", &sipSelf, sipType_QPainter, &sipCpp, &PyList_Type, &a0, sipType_QPixmap, &a1, sipType_QPainter_PixmapFragmentHints, &a2, &a2State))
        {
            int sipIsErr = 0;

#line 643 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
        // Allocate temporary storage for the C++ conversions.
        SIP_SSIZE_T numFragments = PyList_GET_SIZE(a0);
        QPainter::PixmapFragment *fragments = new QPainter::PixmapFragment[numFragments];
        
        // Convert the fragments.
        for (SIP_SSIZE_T i = 0; i < numFragments; ++i)
        {
            void *cpp = sipForceConvertToType(PyList_GET_ITEM(a0, i), sipType_QPainter_PixmapFragment, NULL, SIP_NO_CONVERTORS, NULL, &sipIsErr);
        
            fragments[i] = *reinterpret_cast<QPainter::PixmapFragment *>(cpp);
        }
        
        if (!sipIsErr)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmapFragments(fragments, numFragments, *a1, *a2);
            Py_END_ALLOW_THREADS
        }
        
        delete[] fragments;
#line 5187 "sipQtGuiQPainter.cpp"
            sipReleaseType(a2,sipType_QPainter_PixmapFragmentHints,a2State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmapFragments, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPainter_drawStaticText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawStaticText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        const QStaticText * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_topLeftPosition,
            sipName_staticText,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, sipType_QStaticText, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawStaticText(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        const QStaticText * a1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
            sipName_staticText,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QStaticText, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawStaticText(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QStaticText * a2;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_staticText,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QStaticText, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawStaticText(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawStaticText, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPainter(void *, const sipTypeDef *);}
static void *cast_QPainter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPainter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter(void *, int);}
static void release_QPainter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QPainter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPainter(sipSimpleWrapper *);}
static void dealloc_QPainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPainter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QPainter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QPainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPainter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPainter();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QPaintDevice * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QPaintDevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPainter(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QPainter[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QPainter_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backgroundMode), meth_QPainter_backgroundMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_begin), meth_QPainter_begin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginNativePainting), meth_QPainter_beginNativePainting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), (PyCFunction)meth_QPainter_boundingRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPainter_brush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_brushOrigin), meth_QPainter_brushOrigin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clipPath), meth_QPainter_clipPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clipRegion), meth_QPainter_clipRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_combinedMatrix), meth_QPainter_combinedMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_combinedTransform), meth_QPainter_combinedTransform, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_compositionMode), meth_QPainter_compositionMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QPainter_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deviceMatrix), meth_QPainter_deviceMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deviceTransform), meth_QPainter_deviceTransform, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawArc), meth_QPainter_drawArc, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawChord), meth_QPainter_drawChord, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawConvexPolygon), (PyCFunction)meth_QPainter_drawConvexPolygon, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPainter_drawEllipse, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawImage), (PyCFunction)meth_QPainter_drawImage, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawLine), meth_QPainter_drawLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawLines), (PyCFunction)meth_QPainter_drawLines, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPainter_drawPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPicture), meth_QPainter_drawPicture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPie), meth_QPainter_drawPie, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPainter_drawPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPixmapFragments), (PyCFunction)meth_QPainter_drawPixmapFragments, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPoint), meth_QPainter_drawPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPoints), (PyCFunction)meth_QPainter_drawPoints, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPolygon), (PyCFunction)meth_QPainter_drawPolygon, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPolyline), (PyCFunction)meth_QPainter_drawPolyline, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRect), meth_QPainter_drawRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRects), (PyCFunction)meth_QPainter_drawRects, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRoundRect), (PyCFunction)meth_QPainter_drawRoundRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRoundedRect), (PyCFunction)meth_QPainter_drawRoundedRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawStaticText), (PyCFunction)meth_QPainter_drawStaticText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawText), (PyCFunction)meth_QPainter_drawText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), (PyCFunction)meth_QPainter_drawTiledPixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_end), meth_QPainter_end, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endNativePainting), meth_QPainter_endNativePainting, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_eraseRect), meth_QPainter_eraseRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fillPath), meth_QPainter_fillPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fillRect), meth_QPainter_fillRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QPainter_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontInfo), meth_QPainter_fontInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QPainter_fontMetrics, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasClipping), meth_QPainter_hasClipping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initFrom), meth_QPainter_initFrom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPainter_isActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QPainter_layoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_matrix), meth_QPainter_matrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_matrixEnabled), meth_QPainter_matrixEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QPainter_opacity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPainter_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pen), meth_QPainter_pen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_redirected), (PyCFunction)meth_QPainter_redirected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QPainter_renderHints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetMatrix), meth_QPainter_resetMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetTransform), meth_QPainter_resetTransform, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_restore), meth_QPainter_restore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_restoreRedirected), meth_QPainter_restoreRedirected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate), meth_QPainter_rotate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_QPainter_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scale), meth_QPainter_scale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QPainter_setBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundMode), meth_QPainter_setBackgroundMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPainter_setBrush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBrushOrigin), meth_QPainter_setBrushOrigin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipPath), (PyCFunction)meth_QPainter_setClipPath, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipRect), (PyCFunction)meth_QPainter_setClipRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipRegion), (PyCFunction)meth_QPainter_setClipRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipping), meth_QPainter_setClipping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompositionMode), meth_QPainter_setCompositionMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QPainter_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QPainter_setLayoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMatrix), (PyCFunction)meth_QPainter_setMatrix, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMatrixEnabled), meth_QPainter_setMatrixEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QPainter_setOpacity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPen), meth_QPainter_setPen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRedirected), (PyCFunction)meth_QPainter_setRedirected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QPainter_setRenderHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setRenderHints), (PyCFunction)meth_QPainter_setRenderHints, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setTransform), (PyCFunction)meth_QPainter_setTransform, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewTransformEnabled), meth_QPainter_setViewTransformEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewport), meth_QPainter_setViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindow), meth_QPainter_setWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWorldMatrix), (PyCFunction)meth_QPainter_setWorldMatrix, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setWorldMatrixEnabled), meth_QPainter_setWorldMatrixEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWorldTransform), (PyCFunction)meth_QPainter_setWorldTransform, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_shear), meth_QPainter_shear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_strokePath), meth_QPainter_strokePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testRenderHint), meth_QPainter_testRenderHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transform), meth_QPainter_transform, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPainter_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewTransformEnabled), meth_QPainter_viewTransformEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewport), meth_QPainter_viewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_window), meth_QPainter_window, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_worldMatrix), meth_QPainter_worldMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_worldMatrixEnabled), meth_QPainter_worldMatrixEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_worldTransform), meth_QPainter_worldTransform, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPainter[] = {
    {sipName_Antialiasing, QPainter::Antialiasing, 372},
    {sipName_CompositionMode_Clear, QPainter::CompositionMode_Clear, 368},
    {sipName_CompositionMode_ColorBurn, QPainter::CompositionMode_ColorBurn, 368},
    {sipName_CompositionMode_ColorDodge, QPainter::CompositionMode_ColorDodge, 368},
    {sipName_CompositionMode_Darken, QPainter::CompositionMode_Darken, 368},
    {sipName_CompositionMode_Destination, QPainter::CompositionMode_Destination, 368},
    {sipName_CompositionMode_DestinationAtop, QPainter::CompositionMode_DestinationAtop, 368},
    {sipName_CompositionMode_DestinationIn, QPainter::CompositionMode_DestinationIn, 368},
    {sipName_CompositionMode_DestinationOut, QPainter::CompositionMode_DestinationOut, 368},
    {sipName_CompositionMode_DestinationOver, QPainter::CompositionMode_DestinationOver, 368},
    {sipName_CompositionMode_Difference, QPainter::CompositionMode_Difference, 368},
    {sipName_CompositionMode_Exclusion, QPainter::CompositionMode_Exclusion, 368},
    {sipName_CompositionMode_HardLight, QPainter::CompositionMode_HardLight, 368},
    {sipName_CompositionMode_Lighten, QPainter::CompositionMode_Lighten, 368},
    {sipName_CompositionMode_Multiply, QPainter::CompositionMode_Multiply, 368},
    {sipName_CompositionMode_Overlay, QPainter::CompositionMode_Overlay, 368},
    {sipName_CompositionMode_Plus, QPainter::CompositionMode_Plus, 368},
    {sipName_CompositionMode_Screen, QPainter::CompositionMode_Screen, 368},
    {sipName_CompositionMode_SoftLight, QPainter::CompositionMode_SoftLight, 368},
    {sipName_CompositionMode_Source, QPainter::CompositionMode_Source, 368},
    {sipName_CompositionMode_SourceAtop, QPainter::CompositionMode_SourceAtop, 368},
    {sipName_CompositionMode_SourceIn, QPainter::CompositionMode_SourceIn, 368},
    {sipName_CompositionMode_SourceOut, QPainter::CompositionMode_SourceOut, 368},
    {sipName_CompositionMode_SourceOver, QPainter::CompositionMode_SourceOver, 368},
    {sipName_CompositionMode_Xor, QPainter::CompositionMode_Xor, 368},
    {sipName_HighQualityAntialiasing, QPainter::HighQualityAntialiasing, 372},
    {sipName_NonCosmeticDefaultPen, QPainter::NonCosmeticDefaultPen, 372},
    {sipName_OpaqueHint, QPainter::OpaqueHint, 370},
    {sipName_RasterOp_NotSource, QPainter::RasterOp_NotSource, 368},
    {sipName_RasterOp_NotSourceAndDestination, QPainter::RasterOp_NotSourceAndDestination, 368},
    {sipName_RasterOp_NotSourceAndNotDestination, QPainter::RasterOp_NotSourceAndNotDestination, 368},
    {sipName_RasterOp_NotSourceOrNotDestination, QPainter::RasterOp_NotSourceOrNotDestination, 368},
    {sipName_RasterOp_NotSourceXorDestination, QPainter::RasterOp_NotSourceXorDestination, 368},
    {sipName_RasterOp_SourceAndDestination, QPainter::RasterOp_SourceAndDestination, 368},
    {sipName_RasterOp_SourceAndNotDestination, QPainter::RasterOp_SourceAndNotDestination, 368},
    {sipName_RasterOp_SourceOrDestination, QPainter::RasterOp_SourceOrDestination, 368},
    {sipName_RasterOp_SourceXorDestination, QPainter::RasterOp_SourceXorDestination, 368},
    {sipName_SmoothPixmapTransform, QPainter::SmoothPixmapTransform, 372},
    {sipName_TextAntialiasing, QPainter::TextAntialiasing, 372},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPainter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPainter,
        {0}
    },
    {
        sipNameNr_QPainter,
        {0, 0, 1},
        100, methods_QPainter,
        39, enummembers_QPainter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QPainter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPainter,
    0,
    0,
    0,
    release_QPainter,
    cast_QPainter,
    0,
    0,
    0
},
    0,
    0,
    0
};
