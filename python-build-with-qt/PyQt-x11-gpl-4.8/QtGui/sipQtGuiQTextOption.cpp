/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 41 "sipQtGuiQTextOption.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "sipQtGuiQTextOption.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "sipQtGuiQTextOption.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 53 "sipQtGuiQTextOption.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 56 "sipQtGuiQTextOption.cpp"
#line 756 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 59 "sipQtGuiQTextOption.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "sipQtGuiQTextOption.cpp"


extern "C" {static PyObject *meth_QTextOption_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_alignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setTextDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTextDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTextDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_textDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption::WrapMode a0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setWrapMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QTextOption::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_wrapMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_flags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QTextOption::Flags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextOption::Flags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextOption_Flags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_flags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_tabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabStop();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabStop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setTabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList<qreal> * a0;
        int a0State = 0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_2400,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabArray(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QList_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_tabArray(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QList<qreal> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<qreal>(sipCpp->tabArray());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_2400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setUseDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUseDesignMetrics(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setUseDesignMetrics, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_useDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_useDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->useDesignMetrics();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_useDesignMetrics, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption::Flags * a0;
        int a0State = 0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QTextOption_Flags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextOption_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setTabStop(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextOption, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabStop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabStop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_setTabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_setTabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList<QTextOption::Tab> * a0;
        int a0State = 0;
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextOption, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabs(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_setTabs, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextOption_tabs(PyObject *, PyObject *);}
static PyObject *meth_QTextOption_tabs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextOption, &sipCpp))
        {
            QList<QTextOption::Tab> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextOption::Tab>(sipCpp->tabs());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextOption, sipName_tabs, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextOption(void *, const sipTypeDef *);}
static void *cast_QTextOption(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextOption)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextOption(void *, int);}
static void release_QTextOption(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextOption *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextOption(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextOption(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextOption *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextOption *>(sipSrc);
}


extern "C" {static void *array_QTextOption(SIP_SSIZE_T);}
static void *array_QTextOption(SIP_SSIZE_T sipNrElem)
{
    return new QTextOption[sipNrElem];
}


extern "C" {static void *copy_QTextOption(const void *, SIP_SSIZE_T);}
static void *copy_QTextOption(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextOption(reinterpret_cast<const QTextOption *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextOption(sipSimpleWrapper *);}
static void dealloc_QTextOption(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextOption(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextOption(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextOption(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextOption *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextOption();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        Qt::Alignment * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextOption(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipCpp;
        }
    }

    {
        const QTextOption * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextOption, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextOption(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTextOption[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextOption_alignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTextOption_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextOption_setAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTextOption_setFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabArray), meth_QTextOption_setTabArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabStop), meth_QTextOption_setTabStop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabs), meth_QTextOption_setTabs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextDirection), meth_QTextOption_setTextDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUseDesignMetrics), meth_QTextOption_setUseDesignMetrics, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QTextOption_setWrapMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabArray), meth_QTextOption_tabArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabStop), meth_QTextOption_tabStop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabs), meth_QTextOption_tabs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QTextOption_textDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_useDesignMetrics), meth_QTextOption_useDesignMetrics, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QTextOption_wrapMode, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextOption[] = {
    {sipName_AddSpaceForLineAndParagraphSeparators, QTextOption::AddSpaceForLineAndParagraphSeparators, 693},
    {sipName_CenterTab, QTextOption::CenterTab, 696},
    {sipName_DelimiterTab, QTextOption::DelimiterTab, 696},
    {sipName_IncludeTrailingSpaces, QTextOption::IncludeTrailingSpaces, 693},
    {sipName_LeftTab, QTextOption::LeftTab, 696},
    {sipName_ManualWrap, QTextOption::ManualWrap, 697},
    {sipName_NoWrap, QTextOption::NoWrap, 697},
    {sipName_RightTab, QTextOption::RightTab, 696},
    {sipName_ShowLineAndParagraphSeparators, QTextOption::ShowLineAndParagraphSeparators, 693},
    {sipName_ShowTabsAndSpaces, QTextOption::ShowTabsAndSpaces, 693},
    {sipName_SuppressColors, QTextOption::SuppressColors, 693},
    {sipName_WordWrap, QTextOption::WordWrap, 697},
    {sipName_WrapAnywhere, QTextOption::WrapAnywhere, 697},
    {sipName_WrapAtWordBoundaryOrAnywhere, QTextOption::WrapAtWordBoundaryOrAnywhere, 697},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextOption = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextOption,
        {0}
    },
    {
        sipNameNr_QTextOption,
        {0, 0, 1},
        16, methods_QTextOption,
        14, enummembers_QTextOption,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QTextOption,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextOption,
    assign_QTextOption,
    array_QTextOption,
    copy_QTextOption,
    release_QTextOption,
    cast_QTextOption,
    0,
    0,
    0
},
    0,
    0,
    0
};
