/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 554 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "sipQtGuiQStyleOptionHeader.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 43 "sipQtGuiQStyleOptionHeader.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQStyleOptionHeader.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQStyleOptionHeader.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtGuiQStyleOptionHeader.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 55 "sipQtGuiQStyleOptionHeader.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStyleOptionHeader(void *, const sipTypeDef *);}
static void *cast_QStyleOptionHeader(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStyleOptionHeader)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QStyleOption)->ctd_cast((QStyleOption *)(QStyleOptionHeader *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStyleOptionHeader(void *, int);}
static void release_QStyleOptionHeader(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QStyleOptionHeader *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QStyleOptionHeader(void *, SIP_SSIZE_T, const void *);}
static void assign_QStyleOptionHeader(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QStyleOptionHeader *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QStyleOptionHeader *>(sipSrc);
}


extern "C" {static void *array_QStyleOptionHeader(SIP_SSIZE_T);}
static void *array_QStyleOptionHeader(SIP_SSIZE_T sipNrElem)
{
    return new QStyleOptionHeader[sipNrElem];
}


extern "C" {static void *copy_QStyleOptionHeader(const void *, SIP_SSIZE_T);}
static void *copy_QStyleOptionHeader(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QStyleOptionHeader(reinterpret_cast<const QStyleOptionHeader *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStyleOptionHeader(sipSimpleWrapper *);}
static void dealloc_QStyleOptionHeader(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStyleOptionHeader(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QStyleOptionHeader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QStyleOptionHeader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QStyleOptionHeader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStyleOptionHeader();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QStyleOptionHeader * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QStyleOptionHeader, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStyleOptionHeader(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStyleOptionHeader[] = {{489, 255, 1}};

static sipEnumMemberDef enummembers_QStyleOptionHeader[] = {
    {sipName_Beginning, QStyleOptionHeader::Beginning, 528},
    {sipName_End, QStyleOptionHeader::End, 528},
    {sipName_Middle, QStyleOptionHeader::Middle, 528},
    {sipName_NextAndPreviousAreSelected, QStyleOptionHeader::NextAndPreviousAreSelected, 529},
    {sipName_NextIsSelected, QStyleOptionHeader::NextIsSelected, 529},
    {sipName_None, QStyleOptionHeader::None, 530},
    {sipName_NotAdjacent, QStyleOptionHeader::NotAdjacent, 529},
    {sipName_OnlyOneSection, QStyleOptionHeader::OnlyOneSection, 528},
    {sipName_PreviousIsSelected, QStyleOptionHeader::PreviousIsSelected, 529},
    {sipName_SortDown, QStyleOptionHeader::SortDown, 530},
    {sipName_SortUp, QStyleOptionHeader::SortUp, 530},
    {sipName_Type, QStyleOptionHeader::Type, 531},
    {sipName_Version, QStyleOptionHeader::Version, 532},
};


extern "C" {static PyObject *varget_QStyleOptionHeader_icon(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_icon(void *sipSelf, PyObject *)
{
    QIcon *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = &sipCpp->icon;

    return sipConvertFromType(sipVal,sipType_QIcon, NULL);
}


extern "C" {static int varset_QStyleOptionHeader_icon(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_icon(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QIcon *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<QIcon *>(sipForceConvertToType(sipPy,sipType_QIcon,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->icon = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_iconAlignment(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_iconAlignment(void *sipSelf, PyObject *)
{
    Qt::Alignment *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = &sipCpp->iconAlignment;

    return sipConvertFromType(sipVal,sipType_Qt_Alignment, NULL);
}


extern "C" {static int varset_QStyleOptionHeader_iconAlignment(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_iconAlignment(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Qt::Alignment *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<Qt::Alignment *>(sipForceConvertToType(sipPy,sipType_Qt_Alignment,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->iconAlignment = *sipVal;

    sipReleaseType(sipVal, sipType_Qt_Alignment, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_orientation(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_orientation(void *sipSelf, PyObject *)
{
    Qt::Orientation sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = sipCpp->orientation;

    return sipConvertFromEnum(sipVal, sipType_Qt_Orientation);
}


extern "C" {static int varset_QStyleOptionHeader_orientation(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_orientation(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Qt::Orientation sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = (Qt::Orientation)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->orientation = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_position(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_position(void *sipSelf, PyObject *)
{
    QStyleOptionHeader::SectionPosition sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = sipCpp->position;

    return sipConvertFromEnum(sipVal, sipType_QStyleOptionHeader_SectionPosition);
}


extern "C" {static int varset_QStyleOptionHeader_position(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_position(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QStyleOptionHeader::SectionPosition sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = (QStyleOptionHeader::SectionPosition)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->position = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_section(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_section(void *sipSelf, PyObject *)
{
    int sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = sipCpp->section;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QStyleOptionHeader_section(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_section(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->section = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_selectedPosition(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_selectedPosition(void *sipSelf, PyObject *)
{
    QStyleOptionHeader::SelectedPosition sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = sipCpp->selectedPosition;

    return sipConvertFromEnum(sipVal, sipType_QStyleOptionHeader_SelectedPosition);
}


extern "C" {static int varset_QStyleOptionHeader_selectedPosition(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_selectedPosition(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QStyleOptionHeader::SelectedPosition sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = (QStyleOptionHeader::SelectedPosition)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->selectedPosition = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_sortIndicator(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_sortIndicator(void *sipSelf, PyObject *)
{
    QStyleOptionHeader::SortIndicator sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = sipCpp->sortIndicator;

    return sipConvertFromEnum(sipVal, sipType_QStyleOptionHeader_SortIndicator);
}


extern "C" {static int varset_QStyleOptionHeader_sortIndicator(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_sortIndicator(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QStyleOptionHeader::SortIndicator sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = (QStyleOptionHeader::SortIndicator)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->sortIndicator = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_text(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_text(void *sipSelf, PyObject *)
{
    QString *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = &sipCpp->text;

    return sipConvertFromType(sipVal,sipType_QString, NULL);
}


extern "C" {static int varset_QStyleOptionHeader_text(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_text(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->text = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QStyleOptionHeader_textAlignment(void *, PyObject *);}
static PyObject *varget_QStyleOptionHeader_textAlignment(void *sipSelf, PyObject *)
{
    Qt::Alignment *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    sipVal = &sipCpp->textAlignment;

    return sipConvertFromType(sipVal,sipType_Qt_Alignment, NULL);
}


extern "C" {static int varset_QStyleOptionHeader_textAlignment(void *, PyObject *, PyObject *);}
static int varset_QStyleOptionHeader_textAlignment(void *sipSelf, PyObject *sipPy, PyObject *)
{
    Qt::Alignment *sipVal;
    QStyleOptionHeader *sipCpp = reinterpret_cast<QStyleOptionHeader *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<Qt::Alignment *>(sipForceConvertToType(sipPy,sipType_Qt_Alignment,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->textAlignment = *sipVal;

    sipReleaseType(sipVal, sipType_Qt_Alignment, sipValState);

    return 0;
}

sipVariableDef variables_QStyleOptionHeader[] = {
    {sipName_icon, varget_QStyleOptionHeader_icon, varset_QStyleOptionHeader_icon, 0},
    {sipName_iconAlignment, varget_QStyleOptionHeader_iconAlignment, varset_QStyleOptionHeader_iconAlignment, 0},
    {sipName_orientation, varget_QStyleOptionHeader_orientation, varset_QStyleOptionHeader_orientation, 0},
    {sipName_position, varget_QStyleOptionHeader_position, varset_QStyleOptionHeader_position, 0},
    {sipName_section, varget_QStyleOptionHeader_section, varset_QStyleOptionHeader_section, 0},
    {sipName_selectedPosition, varget_QStyleOptionHeader_selectedPosition, varset_QStyleOptionHeader_selectedPosition, 0},
    {sipName_sortIndicator, varget_QStyleOptionHeader_sortIndicator, varset_QStyleOptionHeader_sortIndicator, 0},
    {sipName_text, varget_QStyleOptionHeader_text, varset_QStyleOptionHeader_text, 0},
    {sipName_textAlignment, varget_QStyleOptionHeader_textAlignment, varset_QStyleOptionHeader_textAlignment, 0},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QStyleOptionHeader = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStyleOptionHeader,
        {0}
    },
    {
        sipNameNr_QStyleOptionHeader,
        {0, 0, 1},
        0, 0,
        13, enummembers_QStyleOptionHeader,
        9, variables_QStyleOptionHeader,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QStyleOptionHeader,
    0,
    init_QStyleOptionHeader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStyleOptionHeader,
    assign_QStyleOptionHeader,
    array_QStyleOptionHeader,
    copy_QStyleOptionHeader,
    release_QStyleOptionHeader,
    cast_QStyleOptionHeader,
    0,
    0,
    0
},
    0,
    0,
    0
};
