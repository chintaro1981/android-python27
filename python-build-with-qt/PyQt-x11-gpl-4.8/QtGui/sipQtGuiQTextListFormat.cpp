/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 478 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "sipQtGuiQTextListFormat.cpp"

#line 653 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 43 "sipQtGuiQTextListFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 46 "sipQtGuiQTextListFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQTextListFormat.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 52 "sipQtGuiQTextListFormat.cpp"
#line 510 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 55 "sipQtGuiQTextListFormat.cpp"
#line 527 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 58 "sipQtGuiQTextListFormat.cpp"
#line 620 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 61 "sipQtGuiQTextListFormat.cpp"
#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 64 "sipQtGuiQTextListFormat.cpp"
#line 439 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 67 "sipQtGuiQTextListFormat.cpp"
#line 149 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 70 "sipQtGuiQTextListFormat.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtGuiQTextListFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76 "sipQtGuiQTextListFormat.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 79 "sipQtGuiQTextListFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 82 "sipQtGuiQTextListFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 85 "sipQtGuiQTextListFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 88 "sipQtGuiQTextListFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtGuiQTextListFormat.cpp"


extern "C" {static PyObject *meth_QTextListFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextListFormat_style(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            QTextListFormat::Style sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->style();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextListFormat_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_style, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextListFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_indent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextListFormat_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextListFormat::Style a0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setStyle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextListFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextListFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setIndent, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextListFormat(void *, const sipTypeDef *);}
static void *cast_QTextListFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextListFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFormat)->ctd_cast((QTextFormat *)(QTextListFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextListFormat(void *, int);}
static void release_QTextListFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextListFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextListFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextListFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextListFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextListFormat *>(sipSrc);
}


extern "C" {static void *array_QTextListFormat(SIP_SSIZE_T);}
static void *array_QTextListFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextListFormat[sipNrElem];
}


extern "C" {static void *copy_QTextListFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextListFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextListFormat(reinterpret_cast<const QTextListFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextListFormat(sipSimpleWrapper *);}
static void dealloc_QTextListFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextListFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextListFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextListFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextListFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextListFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextListFormat * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextListFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextListFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextListFormat[] = {{662, 255, 1}};


static PyMethodDef methods_QTextListFormat[] = {
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextListFormat_indent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextListFormat_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextListFormat_setIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QTextListFormat_setStyle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_style), meth_QTextListFormat_style, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextListFormat[] = {
    {sipName_ListCircle, QTextListFormat::ListCircle, 689},
    {sipName_ListDecimal, QTextListFormat::ListDecimal, 689},
    {sipName_ListDisc, QTextListFormat::ListDisc, 689},
    {sipName_ListLowerAlpha, QTextListFormat::ListLowerAlpha, 689},
    {sipName_ListLowerRoman, QTextListFormat::ListLowerRoman, 689},
    {sipName_ListSquare, QTextListFormat::ListSquare, 689},
    {sipName_ListUpperAlpha, QTextListFormat::ListUpperAlpha, 689},
    {sipName_ListUpperRoman, QTextListFormat::ListUpperRoman, 689},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextListFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextListFormat,
        {0}
    },
    {
        sipNameNr_QTextListFormat,
        {0, 0, 1},
        5, methods_QTextListFormat,
        8, enummembers_QTextListFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTextListFormat,
    0,
    init_QTextListFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextListFormat,
    assign_QTextListFormat,
    array_QTextListFormat,
    copy_QTextListFormat,
    release_QTextListFormat,
    cast_QTextListFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};
