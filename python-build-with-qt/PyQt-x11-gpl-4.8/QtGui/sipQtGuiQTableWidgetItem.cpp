/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 59 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtablewidget.sip"
#include <qtablewidget.h>
#line 39 "sipQtGuiQTableWidgetItem.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 46 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 49 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 52 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 55 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQTableWidgetItem.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 61 "sipQtGuiQTableWidgetItem.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQTableWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 70 "sipQtGuiQTableWidgetItem.cpp"
#line 163 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtablewidget.sip"
#include <qtablewidget.h>
#line 73 "sipQtGuiQTableWidgetItem.cpp"


class sipQTableWidgetItem : public QTableWidgetItem
{
public:
    sipQTableWidgetItem(int);
    sipQTableWidgetItem(const QString&,int);
    sipQTableWidgetItem(const QIcon&,const QString&,int);
    sipQTableWidgetItem(const QTableWidgetItem&);
    virtual ~sipQTableWidgetItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QTableWidgetItem * clone() const;
    QVariant data(int) const;
    void setData(int,const QVariant&);
    bool operator<(const QTableWidgetItem&) const;
    void read(QDataStream&);
    void write(QDataStream&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTableWidgetItem(const sipQTableWidgetItem &);
    sipQTableWidgetItem &operator = (const sipQTableWidgetItem &);

    char sipPyMethods[6];
};

sipQTableWidgetItem::sipQTableWidgetItem(int a0): QTableWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QString& a0,int a1): QTableWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QIcon& a0,const QString& a1,int a2): QTableWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QTableWidgetItem& a0): QTableWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::~sipQTableWidgetItem()
{
    sipCommonDtor(sipPySelf);
}

QTableWidgetItem * sipQTableWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_clone);

    if (!meth)
        return QTableWidgetItem::clone();

    extern QTableWidgetItem * sipVH_QtGui_70(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_70(sipGILState,meth);
}

QVariant sipQTableWidgetItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QTableWidgetItem::data(a0);

    extern QVariant sipVH_QtGui_69(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_69(sipGILState,meth,a0);
}

void sipQTableWidgetItem::setData(int a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setData);

    if (!meth)
    {
        QTableWidgetItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_68(sip_gilstate_t,PyObject *,int,const QVariant&);

    sipVH_QtGui_68(sipGILState,meth,a0,a1);
}

bool sipQTableWidgetItem::operator<(const QTableWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName___lt__);

    if (!meth)
        return QTableWidgetItem::operator<(a0);

    extern bool sipVH_QtGui_67(sip_gilstate_t,PyObject *,const QTableWidgetItem&);

    return sipVH_QtGui_67(sipGILState,meth,a0);
}

void sipQTableWidgetItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_read);

    if (!meth)
    {
        QTableWidgetItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_40(sip_gilstate_t,PyObject *,QDataStream&);

    sipVH_QtGui_40(sipGILState,meth,a0);
}

void sipQTableWidgetItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_write);

    if (!meth)
    {
        QTableWidgetItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_40(sip_gilstate_t,PyObject *,QDataStream&);

    sipVH_QtGui_40(sipGILState,meth,a0);
}


extern "C" {static PyObject *meth_QTableWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QTableWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTableWidgetItem::clone() : sipCpp->clone());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_clone, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_tableWidget(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_tableWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QTableWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tableWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTableWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_tableWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_flags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_text, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->statusTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_statusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toolTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_toolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->whatsThis());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_whatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textAlignment();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_textAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextAlignment(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setTextAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->backgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_backgroundColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setBackgroundColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->textColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_textColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setTextColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            Qt::CheckState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->checkState();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_checkState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CheckState a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_Qt_CheckState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setCheckState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTableWidgetItem::data(a0) : sipCpp->data(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QVariant * a1;
        int a1State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::setData(a0,*a1) : sipCpp->setData(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_read, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_write, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemFlags * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon * a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QIcon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setIcon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setStatusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setToolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhatsThis(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setWhatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setFont, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_sizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize * a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeHint(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setSizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_background, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setBackground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foreground());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_foreground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForeground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setForeground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_row(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_row, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_column(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->column();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_column, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelected(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelected();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_isSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QTableWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTableWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTableWidgetItem *sipCpp = reinterpret_cast<QTableWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTableWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTableWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QTableWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QTableWidgetItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTableWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTableWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTableWidgetItem *sipCpp = reinterpret_cast<QTableWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTableWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTableWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTableWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QTableWidgetItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTableWidgetItem(void *, const sipTypeDef *);}
static void *cast_QTableWidgetItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTableWidgetItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableWidgetItem(void *, int);}
static void release_QTableWidgetItem(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTableWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast<QTableWidgetItem *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTableWidgetItem(sipSimpleWrapper *);}
static void dealloc_QTableWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTableWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTableWidgetItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTableWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTableWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTableWidgetItem *sipCpp = 0;

    {
        int a0 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTableWidgetItem(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        int a1 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTableWidgetItem(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QIcon * a0;
        const QString * a1;
        int a1State = 0;
        int a2 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1|i", sipType_QIcon, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTableWidgetItem(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTableWidgetItem * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTableWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTableWidgetItem(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTableWidgetItem[] = {
    {(void *)slot_QTableWidgetItem___ge__, ge_slot},
    {(void *)slot_QTableWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTableWidgetItem[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QTableWidgetItem_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QTableWidgetItem_backgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QTableWidgetItem_checkState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clone), meth_QTableWidgetItem_clone, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_column), meth_QTableWidgetItem_column, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QTableWidgetItem_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTableWidgetItem_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QTableWidgetItem_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTableWidgetItem_foreground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QTableWidgetItem_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QTableWidgetItem_isSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QTableWidgetItem_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QTableWidgetItem_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTableWidgetItem_setBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QTableWidgetItem_setBackgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QTableWidgetItem_setCheckState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QTableWidgetItem_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTableWidgetItem_setFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTableWidgetItem_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTableWidgetItem_setForeground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QTableWidgetItem_setIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelected), meth_QTableWidgetItem_setSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QTableWidgetItem_setSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QTableWidgetItem_setStatusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTableWidgetItem_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QTableWidgetItem_setTextAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QTableWidgetItem_setTextColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTableWidgetItem_setToolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QTableWidgetItem_setWhatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTableWidgetItem_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QTableWidgetItem_statusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tableWidget), meth_QTableWidgetItem_tableWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QTableWidgetItem_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QTableWidgetItem_textAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QTableWidgetItem_textColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTableWidgetItem_toolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QTableWidgetItem_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QTableWidgetItem_whatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_QTableWidgetItem_write, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTableWidgetItem[] = {
    {sipName_Type, QTableWidgetItem::Type, 629},
    {sipName_UserType, QTableWidgetItem::UserType, 629},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTableWidgetItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTableWidgetItem,
        {0}
    },
    {
        sipNameNr_QTableWidgetItem,
        {0, 0, 1},
        39, methods_QTableWidgetItem,
        2, enummembers_QTableWidgetItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QTableWidgetItem,
    init_QTableWidgetItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTableWidgetItem,
    0,
    0,
    0,
    release_QTableWidgetItem,
    cast_QTableWidgetItem,
    0,
    0,
    0
},
    0,
    0,
    0
};
