/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 280 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "sipQtGuiQConicalGradient.cpp"

#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 43 "sipQtGuiQConicalGradient.cpp"
#line 152 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 46 "sipQtGuiQConicalGradient.cpp"
#line 208 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 50 "sipQtGuiQConicalGradient.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 53 "sipQtGuiQConicalGradient.cpp"


extern "C" {static PyObject *meth_QConicalGradient_center(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QConicalGradient, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->center());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_center, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QConicalGradient_angle(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_angle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QConicalGradient, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->angle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_angle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QConicalGradient_setCenter(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_setCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QConicalGradient, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCenter(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QConicalGradient, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCenter(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_setCenter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QConicalGradient_setAngle(PyObject *, PyObject *);}
static PyObject *meth_QConicalGradient_setAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QConicalGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QConicalGradient, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QConicalGradient, sipName_setAngle, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QConicalGradient(void *, const sipTypeDef *);}
static void *cast_QConicalGradient(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QConicalGradient)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGradient)->ctd_cast((QGradient *)(QConicalGradient *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QConicalGradient(void *, int);}
static void release_QConicalGradient(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QConicalGradient *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QConicalGradient(void *, SIP_SSIZE_T, const void *);}
static void assign_QConicalGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QConicalGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QConicalGradient *>(sipSrc);
}


extern "C" {static void *array_QConicalGradient(SIP_SSIZE_T);}
static void *array_QConicalGradient(SIP_SSIZE_T sipNrElem)
{
    return new QConicalGradient[sipNrElem];
}


extern "C" {static void *copy_QConicalGradient(const void *, SIP_SSIZE_T);}
static void *copy_QConicalGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QConicalGradient(reinterpret_cast<const QConicalGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QConicalGradient(sipSimpleWrapper *);}
static void dealloc_QConicalGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QConicalGradient(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QConicalGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QConicalGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QConicalGradient *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QConicalGradient();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPointF * a0;
        qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9d", sipType_QPointF, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QConicalGradient(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ddd", &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QConicalGradient(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QConicalGradient * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QConicalGradient, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QConicalGradient(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QConicalGradient[] = {{150, 255, 1}};


static PyMethodDef methods_QConicalGradient[] = {
    {SIP_MLNAME_CAST(sipName_angle), meth_QConicalGradient_angle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_center), meth_QConicalGradient_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAngle), meth_QConicalGradient_setAngle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCenter), meth_QConicalGradient_setCenter, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QConicalGradient = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QConicalGradient,
        {0}
    },
    {
        sipNameNr_QConicalGradient,
        {0, 0, 1},
        4, methods_QConicalGradient,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QConicalGradient,
    0,
    init_QConicalGradient,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QConicalGradient,
    assign_QConicalGradient,
    array_QConicalGradient,
    copy_QConicalGradient,
    release_QConicalGradient,
    cast_QConicalGradient,
    0,
    0,
    0
},
    0,
    0,
    0
};
