/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:15 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 208 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 39 "sipQtGuiQTreeWidget.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQTreeWidget.cpp"
#line 84 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 49 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 52 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtGuiQTreeWidget.cpp"
#line 547 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 64 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 70 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 79 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 82 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 88 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 91 "sipQtGuiQTreeWidget.cpp"
#line 84 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 94 "sipQtGuiQTreeWidget.cpp"
#line 156 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 97 "sipQtGuiQTreeWidget.cpp"
#line 571 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 100 "sipQtGuiQTreeWidget.cpp"
#line 344 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 103 "sipQtGuiQTreeWidget.cpp"
#line 236 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 111 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 114 "sipQtGuiQTreeWidget.cpp"
#line 1014 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 117 "sipQtGuiQTreeWidget.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "sipQtGuiQTreeWidget.cpp"
#line 391 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "sipQtGuiQTreeWidget.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 132 "sipQtGuiQTreeWidget.cpp"
#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 522 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "sipQtGuiQTreeWidget.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 140 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 143 "sipQtGuiQTreeWidget.cpp"
#line 418 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "sipQtGuiQTreeWidget.cpp"
#line 372 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "sipQtGuiQTreeWidget.cpp"
#line 598 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "sipQtGuiQTreeWidget.cpp"
#line 587 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "sipQtGuiQTreeWidget.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 158 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 161 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 164 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 167 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 170 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 173 "sipQtGuiQTreeWidget.cpp"
#line 475 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "sipQtGuiQTreeWidget.cpp"
#line 275 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "sipQtGuiQTreeWidget.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 182 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 185 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 188 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 191 "sipQtGuiQTreeWidget.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 194 "sipQtGuiQTreeWidget.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 197 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 200 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 203 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 206 "sipQtGuiQTreeWidget.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 209 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 212 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 215 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 218 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 221 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 224 "sipQtGuiQTreeWidget.cpp"
#line 464 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "sipQtGuiQTreeWidget.cpp"
#line 453 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "sipQtGuiQTreeWidget.cpp"
#line 650 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "sipQtGuiQTreeWidget.cpp"
#line 296 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 236 "sipQtGuiQTreeWidget.cpp"
#line 431 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 239 "sipQtGuiQTreeWidget.cpp"
#line 405 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 242 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 245 "sipQtGuiQTreeWidget.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 248 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 251 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 254 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 257 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 260 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 263 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 266 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 269 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 272 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 275 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 278 "sipQtGuiQTreeWidget.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 281 "sipQtGuiQTreeWidget.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 284 "sipQtGuiQTreeWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 287 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 290 "sipQtGuiQTreeWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 293 "sipQtGuiQTreeWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 296 "sipQtGuiQTreeWidget.cpp"


class sipQTreeWidget : public QTreeWidget
{
public:
    sipQTreeWidget(QWidget *);
    virtual ~sipQTreeWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtect_drawFrame(QPainter *);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtect_setupViewport(QWidget *);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget *,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget *);
    void sipProtectVirt_editorDestroyed(bool,QObject *);
    void sipProtect_setHorizontalStepsPerItem(int);
    int sipProtect_horizontalStepsPerItem() const;
    void sipProtect_setVerticalStepsPerItem(int);
    int sipProtect_verticalStepsPerItem() const;
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent *) const;
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtect_columnResized(int,int,int);
    void sipProtect_columnCountChanged(int,int);
    void sipProtect_columnMoved();
    void sipProtect_reexpand();
    void sipProtect_rowsRemoved(const QModelIndex&,int,int);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_drawRow(bool,QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void sipProtectVirt_drawBranches(bool,QPainter *,const QRect&,const QModelIndex&) const;
    void sipProtect_drawTree(QPainter *,const QRegion&) const;
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_updateGeometries(bool);
    int sipProtectVirt_sizeHintForColumn(bool,int) const;
    int sipProtect_indexRowSizeHint(const QModelIndex&) const;
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    bool sipProtectVirt_viewportEvent(bool,QEvent *);
    int sipProtect_rowHeight(const QModelIndex&) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);
    QStringList sipProtectVirt_mimeTypes(bool) const;
    QMimeData * sipProtectVirt_mimeData(bool,const QList<QTreeWidgetItem *>) const;
    bool sipProtectVirt_dropMimeData(bool,QTreeWidgetItem *,int,const QMimeData *,Qt::DropAction);
    Qt::DropActions sipProtectVirt_supportedDropActions(bool) const;
    QList<QTreeWidgetItem *> sipProtect_items(const QMimeData *) const;
    QModelIndex sipProtect_indexFromItem(QTreeWidgetItem *,int) const;
    QTreeWidgetItem * sipProtect_itemFromIndex(const QModelIndex&) const;
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QList<QTreeWidgetItem *>) const;
    bool dropMimeData(QTreeWidgetItem *,int,const QMimeData *,Qt::DropAction);
    Qt::DropActions supportedDropActions() const;
    bool event(QEvent *);
    void dropEvent(QDropEvent *);
    void setSelectionModel(QItemSelectionModel *);
    void setRootIndex(const QModelIndex&);
    void keyboardSearch(const QString&);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    void doItemsLayout();
    void reset();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void selectAll();
    void scrollContentsBy(int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    void paintEvent(QPaintEvent *);
    void timerEvent(QTimerEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void drawRow(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void drawBranches(QPainter *,const QRect&,const QModelIndex&) const;
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void keyPressEvent(QKeyEvent *);
    void updateGeometries();
    int sizeHintForColumn(int) const;
    void horizontalScrollbarAction(int);
    bool isIndexHidden(const QModelIndex&) const;
    void dragMoveEvent(QDragMoveEvent *);
    bool viewportEvent(QEvent *);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    int sizeHintForRow(int) const;
    void updateEditorData();
    void updateEditorGeometries();
    void verticalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void resizeEvent(QResizeEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidget(const sipQTreeWidget &);
    sipQTreeWidget &operator = (const sipQTreeWidget &);

    char sipPyMethods[92];
};

sipQTreeWidget::sipQTreeWidget(QWidget *a0): QTreeWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidget::~sipQTreeWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTreeWidget);
}

int sipQTreeWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTreeWidget,_c,_id,_a);

    return _id;
}

void *sipQTreeWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTreeWidget,_clname)) ? this : QTreeWidget::qt_metacast(_clname);
}

QStringList sipQTreeWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QTreeWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtGui_QtCore->em_virthandlers[27]))(sipGILState,meth);
}

QMimeData * sipQTreeWidget::mimeData(const QList<QTreeWidgetItem *> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QTreeWidget::mimeData(a0);

    extern QMimeData * sipVH_QtGui_39(sip_gilstate_t,PyObject *,const QList<QTreeWidgetItem *>);

    return sipVH_QtGui_39(sipGILState,meth,a0);
}

bool sipQTreeWidget::dropMimeData(QTreeWidgetItem *a0,int a1,const QMimeData *a2,Qt::DropAction a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QTreeWidget::dropMimeData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_38(sip_gilstate_t,PyObject *,QTreeWidgetItem *,int,const QMimeData *,Qt::DropAction);

    return sipVH_QtGui_38(sipGILState,meth,a0,a1,a2,a3);
}

Qt::DropActions sipQTreeWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QTreeWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtGui_QtCore->em_virthandlers[53]))(sipGILState,meth);
}

bool sipQTreeWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QTreeWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTreeWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QTreeWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQTreeWidget::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QTreeWidget::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,QItemSelectionModel *);

    sipVH_QtGui_37(sipGILState,meth,a0);
}

void sipQTreeWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QTreeView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_QtGui_QtCore->em_virthandlers[51]))(sipGILState,meth,a0);
}

void sipQTreeWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QTreeView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

QRect sipQTreeWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QTreeView::visualRect(a0);

    extern QRect sipVH_QtGui_56(sip_gilstate_t,PyObject *,const QModelIndex&);

    return sipVH_QtGui_56(sipGILState,meth,a0);
}

void sipQTreeWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_55(sipGILState,meth,a0,a1);
}

QModelIndex sipQTreeWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QTreeView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_54(sip_gilstate_t,PyObject *,const QPoint&);

    return sipVH_QtGui_54(sipGILState,meth,a0);
}

void sipQTreeWidget::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QTreeView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QTreeView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QTreeView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QTreeView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t,PyObject *,int,int);

    sipVH_QtGui_32(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t,PyObject *,const QModelIndex&,int,int);

    sipVH_QtGui_53(sipGILState,meth,a0,a1,a2);
}

QModelIndex sipQTreeWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QTreeView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_52(sip_gilstate_t,PyObject *,int,Qt::KeyboardModifiers);

    return sipVH_QtGui_52(sipGILState,meth,(int)a0,a1);
}

int sipQTreeWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QTreeView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQTreeWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QTreeView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTreeWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t,PyObject *,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_51(sipGILState,meth,a0,a1);
}

QRegion sipQTreeWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QTreeView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_50(sip_gilstate_t,PyObject *,const QItemSelection&);

    return sipVH_QtGui_50(sipGILState,meth,a0);
}

QModelIndexList sipQTreeWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QTreeView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_49(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_49(sipGILState,meth);
}

void sipQTreeWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTreeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_4(sipGILState,meth,a0);
}

void sipQTreeWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTreeView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QTreeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::drawRow(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_drawRow);

    if (!meth)
    {
        QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t,PyObject *,QPainter *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::drawBranches(QPainter *a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_drawBranches);

    if (!meth)
    {
        QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t,PyObject *,QPainter *,const QRect&,const QModelIndex&);

    sipVH_QtGui_47(sipGILState,meth,a0,a1,a2);
}

void sipQTreeWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QTreeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QTreeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQTreeWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QTreeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTreeWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QTreeView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

int sipQTreeWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QTreeView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQTreeWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

bool sipQTreeWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QTreeView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtGui_QtCore->em_virthandlers[42]))(sipGILState,meth,a0);
}

void sipQTreeWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

bool sipQTreeWidget::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QTreeView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQTreeWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_46(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t,PyObject *,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_45(sipGILState,meth,a0,a1);
}

int sipQTreeWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

void sipQTreeWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQTreeWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQTreeWidget::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_235(sip_gilstate_t,PyObject *,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_235(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQTreeWidget::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_234(sip_gilstate_t,PyObject *,QObject *);

    sipVH_QtGui_234(sipGILState,meth,a0);
}

bool sipQTreeWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_233(sip_gilstate_t,PyObject *,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_233(sipGILState,meth,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQTreeWidget::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_232(sip_gilstate_t,PyObject *,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_232(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_153(sip_gilstate_t,PyObject *,Qt::DropActions);

    sipVH_QtGui_153(sipGILState,meth,a0);
}

QStyleOptionViewItem sipQTreeWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_71(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_71(sipGILState,meth);
}

void sipQTreeWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQTreeWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQTreeWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTreeWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQTreeWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

QVariant sipQTreeWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[60]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQTreeWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQTreeWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QSize sipQTreeWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

QSize sipQTreeWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

void sipQTreeWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

void sipQTreeWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQTreeWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

int sipQTreeWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQTreeWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

int sipQTreeWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQTreeWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQTreeWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQTreeWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQTreeWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQTreeWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQTreeWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQTreeWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQTreeWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

int sipQTreeWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQTreeWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTreeWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQTreeWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQTreeWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQTreeWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQTreeWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQTreeWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQTreeWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQTreeWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[90],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQTreeWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[91],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQTreeWidget::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTreeWidget::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQTreeWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTreeWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQTreeWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTreeWidget::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTreeWidget::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQTreeWidget::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTreeWidget::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTreeWidget::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTreeWidget::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTreeWidget::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQTreeWidget::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQTreeWidget::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQTreeWidget::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQTreeWidget::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQTreeWidget::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQTreeWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQTreeWidget::sipProtect_drawFrame(QPainter *a0)
{
    QFrame::drawFrame(a0);
}

void sipQTreeWidget::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTreeWidget::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

void sipQTreeWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQTreeWidget::sipProtect_setupViewport(QWidget *a0)
{
    QAbstractScrollArea::setupViewport(a0);
}

bool sipQTreeWidget::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQTreeWidget::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQTreeWidget::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQTreeWidget::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQTreeWidget::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQTreeWidget::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQTreeWidget::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQTreeWidget::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget *a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQTreeWidget::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject *a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

void sipQTreeWidget::sipProtect_setHorizontalStepsPerItem(int a0)
{
    QAbstractItemView::setHorizontalStepsPerItem(a0);
}

int sipQTreeWidget::sipProtect_horizontalStepsPerItem() const
{
    return QAbstractItemView::horizontalStepsPerItem();
}

void sipQTreeWidget::sipProtect_setVerticalStepsPerItem(int a0)
{
    QAbstractItemView::setVerticalStepsPerItem(a0);
}

int sipQTreeWidget::sipProtect_verticalStepsPerItem() const
{
    return QAbstractItemView::verticalStepsPerItem();
}

QItemSelectionModel::SelectionFlags sipQTreeWidget::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent *a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQTreeWidget::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QAbstractItemView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQTreeWidget::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractItemView::viewOptions() : viewOptions());
}

int sipQTreeWidget::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQTreeWidget::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQTreeWidget::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQTreeWidget::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQTreeWidget::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQTreeWidget::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQTreeWidget::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

void sipQTreeWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

int sipQTreeWidget::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQTreeWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTreeWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTreeWidget::sipProtect_columnResized(int a0,int a1,int a2)
{
    QTreeView::columnResized(a0,a1,a2);
}

void sipQTreeWidget::sipProtect_columnCountChanged(int a0,int a1)
{
    QTreeView::columnCountChanged(a0,a1);
}

void sipQTreeWidget::sipProtect_columnMoved()
{
    QTreeView::columnMoved();
}

void sipQTreeWidget::sipProtect_reexpand()
{
    QTreeView::reexpand();
}

void sipQTreeWidget::sipProtect_rowsRemoved(const QModelIndex& a0,int a1,int a2)
{
    QTreeView::rowsRemoved(a0,a1,a2);
}

void sipQTreeWidget::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTreeView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQTreeWidget::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQTreeWidget::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

QModelIndex sipQTreeWidget::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QTreeView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

int sipQTreeWidget::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::horizontalOffset() : horizontalOffset());
}

int sipQTreeWidget::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::verticalOffset() : verticalOffset());
}

void sipQTreeWidget::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QTreeView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQTreeWidget::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QTreeView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQTreeWidget::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::selectedIndexes() : selectedIndexes());
}

void sipQTreeWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QTreeView::paintEvent(a0) : paintEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QTreeView::timerEvent(a0) : timerEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_drawRow(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawRow(a0,a1,a2) : drawRow(a0,a1,a2));
}

void sipQTreeWidget::sipProtectVirt_drawBranches(bool sipSelfWasArg,QPainter *a0,const QRect& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawBranches(a0,a1,a2) : drawBranches(a0,a1,a2));
}

void sipQTreeWidget::sipProtect_drawTree(QPainter *a0,const QRegion& a1) const
{
    QTreeView::drawTree(a0,a1);
}

void sipQTreeWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QTreeView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTreeWidget::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QTreeView::updateGeometries() : updateGeometries());
}

int sipQTreeWidget::sipProtectVirt_sizeHintForColumn(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ? QTreeView::sizeHintForColumn(a0) : sizeHintForColumn(a0));
}

int sipQTreeWidget::sipProtect_indexRowSizeHint(const QModelIndex& a0) const
{
    return QTreeView::indexRowSizeHint(a0);
}

void sipQTreeWidget::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTreeView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

bool sipQTreeWidget::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QTreeView::isIndexHidden(a0) : isIndexHidden(a0));
}

void sipQTreeWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QTreeView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

bool sipQTreeWidget::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QTreeView::viewportEvent(a0) : viewportEvent(a0));
}

int sipQTreeWidget::sipProtect_rowHeight(const QModelIndex& a0) const
{
    return QTreeView::rowHeight(a0);
}

void sipQTreeWidget::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QTreeView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQTreeWidget::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QTreeView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

QStringList sipQTreeWidget::sipProtectVirt_mimeTypes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeWidget::mimeTypes() : mimeTypes());
}

QMimeData * sipQTreeWidget::sipProtectVirt_mimeData(bool sipSelfWasArg,const QList<QTreeWidgetItem *> a0) const
{
    return (sipSelfWasArg ? QTreeWidget::mimeData(a0) : mimeData(a0));
}

bool sipQTreeWidget::sipProtectVirt_dropMimeData(bool sipSelfWasArg,QTreeWidgetItem *a0,int a1,const QMimeData *a2,Qt::DropAction a3)
{
    return (sipSelfWasArg ? QTreeWidget::dropMimeData(a0,a1,a2,a3) : dropMimeData(a0,a1,a2,a3));
}

Qt::DropActions sipQTreeWidget::sipProtectVirt_supportedDropActions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeWidget::supportedDropActions() : supportedDropActions());
}

QList<QTreeWidgetItem *> sipQTreeWidget::sipProtect_items(const QMimeData *a0) const
{
    return QTreeWidget::items(a0);
}

QModelIndex sipQTreeWidget::sipProtect_indexFromItem(QTreeWidgetItem *a0,int a1) const
{
    return QTreeWidget::indexFromItem(a0,a1);
}

QTreeWidgetItem * sipQTreeWidget::sipProtect_itemFromIndex(const QModelIndex& a0) const
{
    return QTreeWidget::itemFromIndex(a0);
}

bool sipQTreeWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QTreeWidget::event(a0) : event(a0));
}

void sipQTreeWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QTreeWidget::dropEvent(a0) : dropEvent(a0));
}


extern "C" {static PyObject *meth_QTreeWidget_sender(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 2732 "sipQtGuiQTreeWidget.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_receivers(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 2774 "sipQtGuiQTreeWidget.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_enterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_leaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTabletEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_tabletEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QActionEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_actionEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_metric(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_resetInputContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|mbb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_destroy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_focusNextChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_focusPreviousChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_enabledChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPalette, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_paletteChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_fontChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_windowActivationChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_languageChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_drawFrame(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_drawFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_drawFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setViewportMargins(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMargins, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setViewportMargins, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setupViewport, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_edit(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->edit(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView::EditTrigger a1;
        QEvent * a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_edit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_updateEditorData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_updateEditorGeometries, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_verticalScrollbarAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_verticalScrollbarValueChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_horizontalScrollbarValueChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closeEditor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_commitData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_commitData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_editorDestroyed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setHorizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHorizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setHorizontalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHorizontalStepsPerItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_horizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_horizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_horizontalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_horizontalStepsPerItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setVerticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setVerticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setVerticalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setVerticalStepsPerItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_verticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_verticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_verticalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_verticalStepsPerItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QEvent * a1 = 0;
        sipQTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectionCommand, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions * a0;
        int a0State = 0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_startDrag, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_viewOptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_state(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_state, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scheduleDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scheduleDelayedItemsLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_executeDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_executeDelayedItemsLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollDirtyRegion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QRegion, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setDirtyRegion(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setDirtyRegion, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dirtyRegionOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_dropIndicatorPosition();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropIndicatorPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnResized(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnResized, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnCountChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnCountChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnMoved();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnMoved, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_reexpand(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_reexpand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_reexpand();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_reexpand, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_rowsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_rowsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_rowsRemoved(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_rowsRemoved, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollContentsBy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_rowsInserted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_rowsAboutToBeRemoved, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_moveCursor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_horizontalOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_verticalOffset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSelection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_visualRegionForSelection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectedIndexes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_paintEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_drawRow(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_drawRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawRow(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_drawRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_drawBranches(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_drawBranches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QRect * a1;
        const QModelIndex * a2;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QModelIndex, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawBranches(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_drawBranches, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_drawTree(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_drawTree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter * a0;
        const QRegion * a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPainter, &a0, sipType_QRegion, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawTree(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_drawTree, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_keyPressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_updateGeometries, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sizeHintForColumn(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sizeHintForColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_indexRowSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexRowSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_indexRowSizeHint(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexRowSizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_horizontalScrollbarAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isIndexHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_viewportEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_rowHeight(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_rowHeight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectionChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setColumnCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_topLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topLevelItemCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItemCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem * a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_takeTopLevelItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfTopLevelItem(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexOfTopLevelItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem *> * a1;
        int a1State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertTopLevelItems(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem *> * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addTopLevelItems(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_headerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_headerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->headerItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_headerItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabels, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_currentColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem * a0;
        int a1;
        QItemSelectionModel::SelectionFlags * a2;
        int a2State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QItemSelectionModel_SelectionFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QItemSelectionModel_SelectionFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setCurrentItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->visualItemRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_visualItemRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sortColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortColumn, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_sortItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortItems(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSortingEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isSortingEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_editItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_editItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->editItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_editItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->openPersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_openPersistentEditor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closePersistentEditor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closePersistentEditor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_itemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemWidget(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QWidget * a2;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemWidget(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemSelected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemSelected(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->selectedItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectedItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        Qt::MatchFlags * a1;
        int a1State = 0;
        int a2 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->findItems(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_findItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemExpanded(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isItemExpanded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemExpanded(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemExpanded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_scrollToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollToItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_expandItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_expandItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_expandItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_collapseItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_collapseItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapseItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_collapseItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->sipProtectVirt_mimeTypes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeTypes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QTreeWidgetItem *> * a0;
        int a0State = 0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_mimeData(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidgetItem * a0;
        int a1;
        const QMimeData * a2;
        Qt::DropAction a3;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ8E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QMimeData, &a2, sipType_Qt_DropAction, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_dropMimeData(sipSelfWasArg,a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropMimeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions(sipCpp->sipProtectVirt_supportedDropActions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_supportedDropActions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_items(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_items(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QMimeData, &a0))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->sipProtect_items(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_items, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_indexFromItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1 = 0;
        sipQTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtect_indexFromItem(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexFromItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemFromIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->invisibleRootItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_invisibleRootItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderLabel(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstItemColumnSpanned(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isFirstItemColumnSpanned, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstItemColumnSpanned(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setFirstItemColumnSpanned, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_itemAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAbove(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAbove, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_itemBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemBelow(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemBelow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItemWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_removeItemWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidget::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -70, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSelectionModel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QTreeWidget, sipName_setModel, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidget(void *, const sipTypeDef *);}
static void *cast_QTreeWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTreeView)->ctd_cast((QTreeView *)(QTreeWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidget(void *, int);}
static void release_QTreeWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeWidget *>(sipCppV);
    else
        delete reinterpret_cast<QTreeWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeWidget(sipSimpleWrapper *);}
static void dealloc_QTreeWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTreeWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTreeWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidget *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidget(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeWidget[] = {{713, 255, 1}};


static PyMethodDef methods_QTreeWidget[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QTreeWidget_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addTopLevelItem), meth_QTreeWidget_addTopLevelItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addTopLevelItems), meth_QTreeWidget_addTopLevelItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTreeWidget_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QTreeWidget_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTreeWidget_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QTreeWidget_closeEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QTreeWidget_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), (PyCFunction)meth_QTreeWidget_closePersistentEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_collapseItem), meth_QTreeWidget_collapseItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidget_columnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), meth_QTreeWidget_columnCountChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnMoved), meth_QTreeWidget_columnMoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnResized), meth_QTreeWidget_columnResized, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QTreeWidget_commitData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QTreeWidget_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QTreeWidget_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QTreeWidget_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QTreeWidget_currentChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentColumn), meth_QTreeWidget_currentColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QTreeWidget_currentItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QTreeWidget_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QTreeWidget_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QTreeWidget_dirtyRegionOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QTreeWidget_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QTreeWidget_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QTreeWidget_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QTreeWidget_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawBranches), meth_QTreeWidget_drawBranches, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), meth_QTreeWidget_drawFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRow), meth_QTreeWidget_drawRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTree), meth_QTreeWidget_drawTree, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTreeWidget_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QTreeWidget_dropIndicatorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QTreeWidget_dropMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), meth_QTreeWidget_edit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editItem), (PyCFunction)meth_QTreeWidget_editItem, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QTreeWidget_editorDestroyed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QTreeWidget_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QTreeWidget_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QTreeWidget_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QTreeWidget_executeDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandItem), meth_QTreeWidget_expandItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QTreeWidget_findItems, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QTreeWidget_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QTreeWidget_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QTreeWidget_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QTreeWidget_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QTreeWidget_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QTreeWidget_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_headerItem), meth_QTreeWidget_headerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QTreeWidget_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QTreeWidget_horizontalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QTreeWidget_horizontalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QTreeWidget_horizontalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalStepsPerItem), meth_QTreeWidget_horizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexFromItem), (PyCFunction)meth_QTreeWidget_indexFromItem, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfTopLevelItem), meth_QTreeWidget_indexOfTopLevelItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexRowSizeHint), meth_QTreeWidget_indexRowSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QTreeWidget_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItem), meth_QTreeWidget_insertTopLevelItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItems), meth_QTreeWidget_insertTopLevelItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QTreeWidget_invisibleRootItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFirstItemColumnSpanned), meth_QTreeWidget_isFirstItemColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QTreeWidget_isIndexHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isItemExpanded), meth_QTreeWidget_isItemExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isItemHidden), meth_QTreeWidget_isItemHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isItemSelected), meth_QTreeWidget_isItemSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeWidget_isSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAbove), meth_QTreeWidget_itemAbove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QTreeWidget_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemBelow), meth_QTreeWidget_itemBelow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QTreeWidget_itemFromIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemWidget), meth_QTreeWidget_itemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_items), meth_QTreeWidget_items, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTreeWidget_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QTreeWidget_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QTreeWidget_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QTreeWidget_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QTreeWidget_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QTreeWidget_mimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QTreeWidget_mimeTypes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QTreeWidget_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTreeWidget_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTreeWidget_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTreeWidget_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QTreeWidget_moveCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QTreeWidget_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), (PyCFunction)meth_QTreeWidget_openPersistentEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTreeWidget_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QTreeWidget_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QTreeWidget_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reexpand), meth_QTreeWidget_reexpand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeItemWidget), meth_QTreeWidget_removeItemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QTreeWidget_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTreeWidget_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowHeight), meth_QTreeWidget_rowHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QTreeWidget_rowsAboutToBeRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QTreeWidget_rowsInserted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsRemoved), meth_QTreeWidget_rowsRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QTreeWidget_scheduleDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTreeWidget_scrollContentsBy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QTreeWidget_scrollDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollToItem), (PyCFunction)meth_QTreeWidget_scrollToItem, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QTreeWidget_selectedIndexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QTreeWidget_selectedItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QTreeWidget_selectionChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QTreeWidget_selectionCommand, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QTreeWidget_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QTreeWidget_setColumnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QTreeWidget_setCurrentItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QTreeWidget_setDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFirstItemColumnSpanned), meth_QTreeWidget_setFirstItemColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeaderItem), meth_QTreeWidget_setHeaderItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeaderLabel), meth_QTreeWidget_setHeaderLabel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeaderLabels), meth_QTreeWidget_setHeaderLabels, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalStepsPerItem), meth_QTreeWidget_setHorizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemExpanded), meth_QTreeWidget_setItemExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemHidden), meth_QTreeWidget_setItemHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemSelected), meth_QTreeWidget_setItemSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemWidget), meth_QTreeWidget_setItemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QTreeWidget_setSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeWidget_setSelectionModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeWidget_setSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setState), meth_QTreeWidget_setState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalStepsPerItem), meth_QTreeWidget_setVerticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), meth_QTreeWidget_setViewportMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QTreeWidget_setupViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTreeWidget_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QTreeWidget_sizeHintForColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortColumn), meth_QTreeWidget_sortColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortItems), meth_QTreeWidget_sortItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QTreeWidget_startDrag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QTreeWidget_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QTreeWidget_supportedDropActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QTreeWidget_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeTopLevelItem), meth_QTreeWidget_takeTopLevelItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTreeWidget_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLevelItem), meth_QTreeWidget_topLevelItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLevelItemCount), meth_QTreeWidget_topLevelItemCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QTreeWidget_updateEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QTreeWidget_updateEditorGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QTreeWidget_updateGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QTreeWidget_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QTreeWidget_verticalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QTreeWidget_verticalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QTreeWidget_verticalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalStepsPerItem), meth_QTreeWidget_verticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QTreeWidget_viewOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QTreeWidget_viewportEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QTreeWidget_visualItemRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QTreeWidget_visualRegionForSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QTreeWidget_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QTreeWidget_windowActivationChange, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTreeWidget[] = {
    {"itemSelectionChanged()", 0, 0},
    {"currentItemChanged(QTreeWidgetItem *,QTreeWidgetItem *)", 0, 0},
    {"itemCollapsed(QTreeWidgetItem *)", 0, 0},
    {"itemExpanded(QTreeWidgetItem *)", 0, 0},
    {"itemChanged(QTreeWidgetItem *,int)", 0, 0},
    {"itemEntered(QTreeWidgetItem *,int)", 0, 0},
    {"itemActivated(QTreeWidgetItem *,int)", 0, 0},
    {"itemDoubleClicked(QTreeWidgetItem *,int)", 0, 0},
    {"itemClicked(QTreeWidgetItem *,int)", 0, 0},
    {"itemPressed(QTreeWidgetItem *,int)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidget,
        {0}
    },
    {
        sipNameNr_QTreeWidget,
        {0, 0, 1},
        155, methods_QTreeWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTreeWidget,
    0,
    init_QTreeWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidget,
    0,
    0,
    0,
    release_QTreeWidget,
    cast_QTreeWidget,
    0,
    0,
    0
},
    &QTreeWidget::staticMetaObject,
    0,
    pyqt4_signals_QTreeWidget
};
