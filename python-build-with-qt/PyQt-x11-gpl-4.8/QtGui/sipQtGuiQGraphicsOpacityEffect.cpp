/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:19 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 212 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "sipQtGuiQGraphicsOpacityEffect.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 48 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 51 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 54 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 60 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 63 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 69 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 90 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 96 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "sipQtGuiQGraphicsOpacityEffect.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "sipQtGuiQGraphicsOpacityEffect.cpp"


class sipQGraphicsOpacityEffect : public QGraphicsOpacityEffect
{
public:
    sipQGraphicsOpacityEffect(QObject *);
    virtual ~sipQGraphicsOpacityEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_sourceChanged(bool,QGraphicsEffect::ChangeFlags);
    void sipProtect_updateBoundingRect();
    bool sipProtect_sourceIsPixmap() const;
    QRectF sipProtect_sourceBoundingRect(Qt::CoordinateSystem) const;
    void sipProtect_drawSource(QPainter *);
    QPixmap sipProtect_sourcePixmap(Qt::CoordinateSystem,QPoint *,QGraphicsEffect::PixmapPadMode) const;
    void sipProtectVirt_draw(bool,QPainter *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(QPainter *);
    QRectF boundingRectFor(const QRectF&) const;
    void sourceChanged(QGraphicsEffect::ChangeFlags);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsOpacityEffect(const sipQGraphicsOpacityEffect &);
    sipQGraphicsOpacityEffect &operator = (const sipQGraphicsOpacityEffect &);

    char sipPyMethods[10];
};

sipQGraphicsOpacityEffect::sipQGraphicsOpacityEffect(QObject *a0): QGraphicsOpacityEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsOpacityEffect::~sipQGraphicsOpacityEffect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsOpacityEffect::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsOpacityEffect);
}

int sipQGraphicsOpacityEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsOpacityEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsOpacityEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsOpacityEffect::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGraphicsOpacityEffect,_clname)) ? this : QGraphicsOpacityEffect::qt_metacast(_clname);
}

void sipQGraphicsOpacityEffect::draw(QPainter *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_draw);

    if (!meth)
    {
        QGraphicsOpacityEffect::draw(a0);
        return;
    }

    extern void sipVH_QtGui_108(sip_gilstate_t,PyObject *,QPainter *);

    sipVH_QtGui_108(sipGILState,meth,a0);
}

QRectF sipQGraphicsOpacityEffect::boundingRectFor(const QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!meth)
        return QGraphicsEffect::boundingRectFor(a0);

    extern QRectF sipVH_QtGui_211(sip_gilstate_t,PyObject *,const QRectF&);

    return sipVH_QtGui_211(sipGILState,meth,a0);
}

void sipQGraphicsOpacityEffect::sourceChanged(QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sourceChanged);

    if (!meth)
    {
        QGraphicsEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtGui_212(sip_gilstate_t,PyObject *,QGraphicsEffect::ChangeFlags);

    sipVH_QtGui_212(sipGILState,meth,a0);
}

bool sipQGraphicsOpacityEffect::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQGraphicsOpacityEffect::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsOpacityEffect::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGraphicsOpacityEffect::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsOpacityEffect::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsOpacityEffect::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsOpacityEffect::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQGraphicsOpacityEffect::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGraphicsOpacityEffect::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsOpacityEffect::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsOpacityEffect::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsOpacityEffect::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsOpacityEffect::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsOpacityEffect::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQGraphicsOpacityEffect::sipProtectVirt_sourceChanged(bool sipSelfWasArg,QGraphicsEffect::ChangeFlags a0)
{
    (sipSelfWasArg ? QGraphicsEffect::sourceChanged(a0) : sourceChanged(a0));
}

void sipQGraphicsOpacityEffect::sipProtect_updateBoundingRect()
{
    QGraphicsEffect::updateBoundingRect();
}

bool sipQGraphicsOpacityEffect::sipProtect_sourceIsPixmap() const
{
    return QGraphicsEffect::sourceIsPixmap();
}

QRectF sipQGraphicsOpacityEffect::sipProtect_sourceBoundingRect(Qt::CoordinateSystem a0) const
{
    return QGraphicsEffect::sourceBoundingRect(a0);
}

void sipQGraphicsOpacityEffect::sipProtect_drawSource(QPainter *a0)
{
    QGraphicsEffect::drawSource(a0);
}

QPixmap sipQGraphicsOpacityEffect::sipProtect_sourcePixmap(Qt::CoordinateSystem a0,QPoint *a1,QGraphicsEffect::PixmapPadMode a2) const
{
    return QGraphicsEffect::sourcePixmap(a0,a1,a2);
}

void sipQGraphicsOpacityEffect::sipProtectVirt_draw(bool sipSelfWasArg,QPainter *a0)
{
    (sipSelfWasArg ? QGraphicsOpacityEffect::draw(a0) : draw(a0));
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_sender(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 458 "sipQtGuiQGraphicsOpacityEffect.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_receivers(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 500 "sipQtGuiQGraphicsOpacityEffect.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_sourceChanged(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_sourceChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsEffect::ChangeFlags * a0;
        int a0State = 0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QGraphicsEffect_ChangeFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_sourceChanged(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGraphicsEffect_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_sourceChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_updateBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_updateBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateBoundingRect();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_updateBoundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_sourceIsPixmap(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_sourceIsPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_sourceIsPixmap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_sourceIsPixmap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_sourceBoundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_sourceBoundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
        sipQGraphicsOpacityEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->sipProtect_sourceBoundingRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_sourceBoundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_drawSource(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_drawSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawSource(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_drawSource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_sourcePixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_sourcePixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CoordinateSystem a0 = Qt::LogicalCoordinates;
        QPoint * a1;
        QGraphicsEffect::PixmapPadMode a2 = QGraphicsEffect::PadToEffectiveBoundingRect;
        sipQGraphicsOpacityEffect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_system,
            sipName_offset,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|EE", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_Qt_CoordinateSystem, &a0, sipType_QGraphicsEffect_PixmapPadMode, &a2))
        {
            QPixmap *sipRes;
            a1 = new QPoint();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->sipProtect_sourcePixmap(a0,a1,a2));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
            return sipBuildResult(0,"(RN)",sipResObj,a1,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_sourcePixmap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_opacity(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->opacity();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_opacity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_opacityMask(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_opacityMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->opacityMask());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_opacityMask, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpacity(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_setOpacity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_setOpacityMask(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_setOpacityMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOpacityMask(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_setOpacityMask, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsOpacityEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsOpacityEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        sipQGraphicsOpacityEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsOpacityEffect, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_draw(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsOpacityEffect, sipName_draw, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsOpacityEffect(void *, const sipTypeDef *);}
static void *cast_QGraphicsOpacityEffect(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsOpacityEffect)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsEffect)->ctd_cast((QGraphicsEffect *)(QGraphicsOpacityEffect *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsOpacityEffect(void *, int);}
static void release_QGraphicsOpacityEffect(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsOpacityEffect *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsOpacityEffect *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsOpacityEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsOpacityEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsOpacityEffect *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsOpacityEffect(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsOpacityEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGraphicsOpacityEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsOpacityEffect *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsOpacityEffect(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsOpacityEffect[] = {{161, 255, 1}};


static PyMethodDef methods_QGraphicsOpacityEffect[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QGraphicsOpacityEffect_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QGraphicsOpacityEffect_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QGraphicsOpacityEffect_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QGraphicsOpacityEffect_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_draw), meth_QGraphicsOpacityEffect_draw, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawSource), meth_QGraphicsOpacityEffect_drawSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QGraphicsOpacityEffect_opacity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_opacityMask), meth_QGraphicsOpacityEffect_opacityMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QGraphicsOpacityEffect_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QGraphicsOpacityEffect_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QGraphicsOpacityEffect_setOpacity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpacityMask), meth_QGraphicsOpacityEffect_setOpacityMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sourceBoundingRect), (PyCFunction)meth_QGraphicsOpacityEffect_sourceBoundingRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sourceChanged), meth_QGraphicsOpacityEffect_sourceChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sourceIsPixmap), meth_QGraphicsOpacityEffect_sourceIsPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sourcePixmap), (PyCFunction)meth_QGraphicsOpacityEffect_sourcePixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QGraphicsOpacityEffect_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateBoundingRect), meth_QGraphicsOpacityEffect_updateBoundingRect, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QGraphicsOpacityEffect[] = {
    {"opacityMaskChanged(QBrush)", 0, 0},
    {"opacityChanged(qreal)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsOpacityEffect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsOpacityEffect,
        {0}
    },
    {
        sipNameNr_QGraphicsOpacityEffect,
        {0, 0, 1},
        18, methods_QGraphicsOpacityEffect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGraphicsOpacityEffect,
    0,
    init_QGraphicsOpacityEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsOpacityEffect,
    0,
    0,
    0,
    release_QGraphicsOpacityEffect,
    cast_QGraphicsOpacityEffect,
    0,
    0,
    0
},
    &QGraphicsOpacityEffect::staticMetaObject,
    0,
    pyqt4_signals_QGraphicsOpacityEffect
};
