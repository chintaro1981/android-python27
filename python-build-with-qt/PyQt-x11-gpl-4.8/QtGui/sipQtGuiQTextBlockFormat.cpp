/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 439 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "sipQtGuiQTextBlockFormat.cpp"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 43 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 107 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 48 "sipQtGuiQTextBlockFormat.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "sipQtGuiQTextBlockFormat.cpp"
#line 653 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 60 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "sipQtGuiQTextBlockFormat.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "sipQtGuiQTextBlockFormat.cpp"
#line 510 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "sipQtGuiQTextBlockFormat.cpp"
#line 527 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "sipQtGuiQTextBlockFormat.cpp"
#line 620 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 75 "sipQtGuiQTextBlockFormat.cpp"
#line 478 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 78 "sipQtGuiQTextBlockFormat.cpp"
#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 81 "sipQtGuiQTextBlockFormat.cpp"
#line 149 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 84 "sipQtGuiQTextBlockFormat.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "sipQtGuiQTextBlockFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "sipQtGuiQTextBlockFormat.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 93 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 96 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 99 "sipQtGuiQTextBlockFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 102 "sipQtGuiQTextBlockFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 105 "sipQtGuiQTextBlockFormat.cpp"


extern "C" {static PyObject *meth_QTextBlockFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_alignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTopMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_topMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setBottomMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottomMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_bottomMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeftMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setLeftMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leftMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_leftMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRightMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setRightMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rightMargin();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_rightMargin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTextIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTextIndent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_textIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_textIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textIndent();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_textIndent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_indent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setNonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNonBreakableLines(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setNonBreakableLines, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_nonBreakableLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nonBreakableLines();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_nonBreakableLines, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBlockFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setIndent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat::PageBreakFlags * a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPageBreakPolicy(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setPageBreakPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QTextFormat::PageBreakFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_pageBreakPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_setTabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTextOption::Tab> * a0;
        int a0State = 0;
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBlockFormat, &sipCpp, sipType_QList_0100QTextOption_Tab,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabPositions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTextOption::Tab> *>(a0),sipType_QList_0100QTextOption_Tab,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_setTabPositions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *, PyObject *);}
static PyObject *meth_QTextBlockFormat_tabPositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBlockFormat, &sipCpp))
        {
            QList<QTextOption::Tab> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextOption::Tab>(sipCpp->tabPositions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextOption_Tab,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBlockFormat, sipName_tabPositions, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextBlockFormat(void *, const sipTypeDef *);}
static void *cast_QTextBlockFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextBlockFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFormat)->ctd_cast((QTextFormat *)(QTextBlockFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBlockFormat(void *, int);}
static void release_QTextBlockFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextBlockFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextBlockFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextBlockFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextBlockFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextBlockFormat *>(sipSrc);
}


extern "C" {static void *array_QTextBlockFormat(SIP_SSIZE_T);}
static void *array_QTextBlockFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextBlockFormat[sipNrElem];
}


extern "C" {static void *copy_QTextBlockFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextBlockFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextBlockFormat(reinterpret_cast<const QTextBlockFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBlockFormat(sipSimpleWrapper *);}
static void dealloc_QTextBlockFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextBlockFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextBlockFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextBlockFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextBlockFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextBlockFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextBlockFormat * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextBlockFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextBlockFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBlockFormat[] = {{662, 255, 1}};


static PyMethodDef methods_QTextBlockFormat[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextBlockFormat_alignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottomMargin), meth_QTextBlockFormat_bottomMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextBlockFormat_indent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBlockFormat_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leftMargin), meth_QTextBlockFormat_leftMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nonBreakableLines), meth_QTextBlockFormat_nonBreakableLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageBreakPolicy), meth_QTextBlockFormat_pageBreakPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rightMargin), meth_QTextBlockFormat_rightMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextBlockFormat_setAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QTextBlockFormat_setBottomMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextBlockFormat_setIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QTextBlockFormat_setLeftMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNonBreakableLines), meth_QTextBlockFormat_setNonBreakableLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPageBreakPolicy), meth_QTextBlockFormat_setPageBreakPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QTextBlockFormat_setRightMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabPositions), meth_QTextBlockFormat_setTabPositions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextIndent), meth_QTextBlockFormat_setTextIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QTextBlockFormat_setTopMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabPositions), meth_QTextBlockFormat_tabPositions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textIndent), meth_QTextBlockFormat_textIndent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topMargin), meth_QTextBlockFormat_topMargin, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextBlockFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextBlockFormat,
        {0}
    },
    {
        sipNameNr_QTextBlockFormat,
        {0, 0, 1},
        21, methods_QTextBlockFormat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTextBlockFormat,
    0,
    init_QTextBlockFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextBlockFormat,
    assign_QTextBlockFormat,
    array_QTextBlockFormat,
    copy_QTextBlockFormat,
    release_QTextBlockFormat,
    cast_QTextBlockFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};
