/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:19 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qdockwidget.sip"
#include <qdockwidget.h>
#line 39 "sipQtGuiQDockWidget.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 46 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtGuiQDockWidget.cpp"
#line 391 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "sipQtGuiQDockWidget.cpp"
#line 431 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQDockWidget.cpp"
#line 967 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 61 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qdockwidget.sip"
#include <qdockwidget.h>
#line 70 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 73 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQDockWidget.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 79 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQDockWidget.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 85 "sipQtGuiQDockWidget.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 88 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 91 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 94 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 97 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 100 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 103 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 108 "sipQtGuiQDockWidget.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 111 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 114 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 117 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 120 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 123 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 129 "sipQtGuiQDockWidget.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 132 "sipQtGuiQDockWidget.cpp"
#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 522 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "sipQtGuiQDockWidget.cpp"
#line 464 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "sipQtGuiQDockWidget.cpp"
#line 453 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "sipQtGuiQDockWidget.cpp"
#line 547 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "sipQtGuiQDockWidget.cpp"
#line 598 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 149 "sipQtGuiQDockWidget.cpp"
#line 571 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "sipQtGuiQDockWidget.cpp"
#line 587 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "sipQtGuiQDockWidget.cpp"
#line 650 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 158 "sipQtGuiQDockWidget.cpp"
#line 296 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 161 "sipQtGuiQDockWidget.cpp"
#line 475 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 164 "sipQtGuiQDockWidget.cpp"
#line 418 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 167 "sipQtGuiQDockWidget.cpp"
#line 405 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 170 "sipQtGuiQDockWidget.cpp"
#line 372 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 173 "sipQtGuiQDockWidget.cpp"
#line 344 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 176 "sipQtGuiQDockWidget.cpp"
#line 275 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "sipQtGuiQDockWidget.cpp"
#line 236 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 182 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 185 "sipQtGuiQDockWidget.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 188 "sipQtGuiQDockWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 191 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 194 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 197 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 200 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 203 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 206 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 209 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 212 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 215 "sipQtGuiQDockWidget.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 218 "sipQtGuiQDockWidget.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 221 "sipQtGuiQDockWidget.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 224 "sipQtGuiQDockWidget.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 227 "sipQtGuiQDockWidget.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 230 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 233 "sipQtGuiQDockWidget.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 236 "sipQtGuiQDockWidget.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 239 "sipQtGuiQDockWidget.cpp"


class sipQDockWidget : public QDockWidget
{
public:
    sipQDockWidget(const QString&,QWidget *,Qt::WindowFlags);
    sipQDockWidget(QWidget *,Qt::WindowFlags);
    virtual ~sipQDockWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtect_initStyleOption(QStyleOptionDockWidget *) const;
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void changeEvent(QEvent *);
    void closeEvent(QCloseEvent *);
    void paintEvent(QPaintEvent *);
    bool event(QEvent *);
    int devType() const;
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDockWidget(const sipQDockWidget &);
    sipQDockWidget &operator = (const sipQDockWidget &);

    char sipPyMethods[47];
};

sipQDockWidget::sipQDockWidget(const QString& a0,QWidget *a1,Qt::WindowFlags a2): QDockWidget(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDockWidget::sipQDockWidget(QWidget *a0,Qt::WindowFlags a1): QDockWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDockWidget::~sipQDockWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDockWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QDockWidget);
}

int sipQDockWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDockWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDockWidget,_c,_id,_a);

    return _id;
}

void *sipQDockWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QDockWidget,_clname)) ? this : QDockWidget::qt_metacast(_clname);
}

void sipQDockWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QDockWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDockWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QDockWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,QCloseEvent *);

    sipVH_QtGui_22(sipGILState,meth,a0);
}

void sipQDockWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QDockWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t,PyObject *,QPaintEvent *);

    sipVH_QtGui_4(sipGILState,meth,a0);
}

bool sipQDockWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QDockWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

int sipQDockWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQDockWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

QSize sipQDockWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

QSize sipQDockWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

int sipQDockWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QPaintEngine * sipQDockWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_27(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_27(sipGILState,meth);
}

void sipQDockWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQDockWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQDockWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQDockWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,QMouseEvent *);

    sipVH_QtGui_26(sipGILState,meth,a0);
}

void sipQDockWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,QWheelEvent *);

    sipVH_QtGui_0(sipGILState,meth,a0);
}

void sipQDockWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQDockWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,QKeyEvent *);

    sipVH_QtGui_25(sipGILState,meth,a0);
}

void sipQDockWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQDockWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,QFocusEvent *);

    sipVH_QtGui_24(sipGILState,meth,a0);
}

void sipQDockWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDockWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDockWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,QMoveEvent *);

    sipVH_QtGui_23(sipGILState,meth,a0);
}

void sipQDockWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,QResizeEvent *);

    sipVH_QtGui_3(sipGILState,meth,a0);
}

void sipQDockWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    sipVH_QtGui_21(sipGILState,meth,a0);
}

void sipQDockWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,QTabletEvent *);

    sipVH_QtGui_20(sipGILState,meth,a0);
}

void sipQDockWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,QActionEvent *);

    sipVH_QtGui_19(sipGILState,meth,a0);
}

void sipQDockWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    sipVH_QtGui_18(sipGILState,meth,a0);
}

void sipQDockWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    sipVH_QtGui_17(sipGILState,meth,a0);
}

void sipQDockWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    sipVH_QtGui_16(sipGILState,meth,a0);
}

void sipQDockWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t,PyObject *,QDropEvent *);

    sipVH_QtGui_15(sipGILState,meth,a0);
}

void sipQDockWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,QShowEvent *);

    sipVH_QtGui_2(sipGILState,meth,a0);
}

void sipQDockWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,QHideEvent *);

    sipVH_QtGui_1(sipGILState,meth,a0);
}

int sipQDockWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_14(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_14(sipGILState,meth,a0);
}

void sipQDockWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    sipVH_QtGui_13(sipGILState,meth,a0);
}

QVariant sipQDockWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState,meth,a0);
}

bool sipQDockWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool);

    return sipVH_QtGui_11(sipGILState,meth,a0);
}

void sipQDockWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQDockWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,const QPalette&);

    sipVH_QtGui_10(sipGILState,meth,a0);
}

void sipQDockWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t,PyObject *,const QFont&);

    sipVH_QtGui_9(sipGILState,meth,a0);
}

void sipQDockWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool);

    sipVH_QtGui_6(sipGILState,meth,a0);
}

void sipQDockWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQDockWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQDockWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQDockWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQDockWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQDockWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQDockWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQDockWidget::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQDockWidget::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQDockWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQDockWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQDockWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQDockWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQDockWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQDockWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQDockWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQDockWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQDockWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQDockWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQDockWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQDockWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQDockWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQDockWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQDockWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQDockWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQDockWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQDockWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQDockWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQDockWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQDockWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQDockWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQDockWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQDockWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQDockWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQDockWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQDockWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQDockWidget::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQDockWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQDockWidget::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQDockWidget::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQDockWidget::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQDockWidget::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQDockWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQDockWidget::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQDockWidget::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQDockWidget::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQDockWidget::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQDockWidget::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQDockWidget::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQDockWidget::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQDockWidget::sipProtect_initStyleOption(QStyleOptionDockWidget *a0) const
{
    QDockWidget::initStyleOption(a0);
}

void sipQDockWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QDockWidget::changeEvent(a0) : changeEvent(a0));
}

void sipQDockWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QDockWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQDockWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QDockWidget::paintEvent(a0) : paintEvent(a0));
}

bool sipQDockWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QDockWidget::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QDockWidget_sender(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 1487 "sipQtGuiQDockWidget.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_receivers(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 1529 "sipQtGuiQDockWidget.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_keyPressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_enterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_leaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QTabletEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_tabletEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QActionEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_actionEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_metric(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_resetInputContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQDockWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|mbb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQDockWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_destroy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_focusNextChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_focusPreviousChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_enabledChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QPalette, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_paletteChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_fontChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_windowActivationChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_languageChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_widget(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_widget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_setWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_setFeatures(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_setFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget::DockWidgetFeatures * a0;
        int a0State = 0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QDockWidget_DockWidgetFeatures, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFeatures(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDockWidget_DockWidgetFeatures,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_setFeatures, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_features(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_features(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            QDockWidget::DockWidgetFeatures *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDockWidget::DockWidgetFeatures(sipCpp->features());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDockWidget_DockWidgetFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_features, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_setFloating(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_setFloating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDockWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFloating(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_setFloating, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_isFloating(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_isFloating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFloating();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_isFloating, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_setAllowedAreas(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_setAllowedAreas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetAreas * a0;
        int a0State = 0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_Qt_DockWidgetAreas, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAllowedAreas(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_setAllowedAreas, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_allowedAreas(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_allowedAreas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            Qt::DockWidgetAreas *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DockWidgetAreas(sipCpp->allowedAreas());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_allowedAreas, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_isAreaAllowed(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_isAreaAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetArea a0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_Qt_DockWidgetArea, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAreaAllowed(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_isAreaAllowed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_toggleViewAction(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_toggleViewAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toggleViewAction();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_toggleViewAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_setTitleBarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_setTitleBarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QWidget, &a0))
        {
#line 84 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qdockwidget.sip"
        // We have to implement /TransferBack/ on any existing title bar widget.
        QWidget *w = sipCpp->widget();
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setTitleBarWidget(a0);
        Py_END_ALLOW_THREADS
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBack(wo);
        }
#line 2998 "sipQtGuiQDockWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_setTitleBarWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_titleBarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_titleBarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDockWidget, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->titleBarWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_titleBarWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionDockWidget * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QStyleOptionDockWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_initStyleOption(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_initStyleOption, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_paintEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDockWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QDockWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDockWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDockWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDockWidget, sipName_event, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDockWidget(void *, const sipTypeDef *);}
static void *cast_QDockWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDockWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QDockWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDockWidget(void *, int);}
static void release_QDockWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDockWidget *>(sipCppV);
    else
        delete reinterpret_cast<QDockWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDockWidget(sipSimpleWrapper *);}
static void dealloc_QDockWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDockWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDockWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDockWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDockWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDockWidget *sipCpp = 0;

    {
        const QString * a0;
        int a0State = 0;
        QWidget * a1 = 0;
        Qt::WindowFlags a2def = 0;
        Qt::WindowFlags * a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JHJ1", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDockWidget(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget * a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDockWidget(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDockWidget[] = {{745, 255, 1}};


static PyMethodDef methods_QDockWidget[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QDockWidget_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allowedAreas), meth_QDockWidget_allowedAreas, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QDockWidget_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QDockWidget_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QDockWidget_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDockWidget_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QDockWidget_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QDockWidget_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QDockWidget_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QDockWidget_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDockWidget_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QDockWidget_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QDockWidget_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QDockWidget_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QDockWidget_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QDockWidget_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QDockWidget_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QDockWidget_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_features), meth_QDockWidget_features, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QDockWidget_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QDockWidget_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QDockWidget_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QDockWidget_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QDockWidget_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QDockWidget_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QDockWidget_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QDockWidget_initStyleOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QDockWidget_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAreaAllowed), meth_QDockWidget_isAreaAllowed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFloating), meth_QDockWidget_isFloating, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QDockWidget_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QDockWidget_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QDockWidget_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QDockWidget_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QDockWidget_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QDockWidget_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QDockWidget_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QDockWidget_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QDockWidget_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QDockWidget_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QDockWidget_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QDockWidget_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QDockWidget_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QDockWidget_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QDockWidget_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QDockWidget_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllowedAreas), meth_QDockWidget_setAllowedAreas, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFeatures), meth_QDockWidget_setFeatures, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFloating), meth_QDockWidget_setFloating, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTitleBarWidget), meth_QDockWidget_setTitleBarWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QDockWidget_setWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QDockWidget_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QDockWidget_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QDockWidget_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_titleBarWidget), meth_QDockWidget_titleBarWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toggleViewAction), meth_QDockWidget_toggleViewAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QDockWidget_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QDockWidget_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widget), meth_QDockWidget_widget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QDockWidget_windowActivationChange, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDockWidget[] = {
    {sipName_AllDockWidgetFeatures, QDockWidget::AllDockWidgetFeatures, 92},
    {sipName_DockWidgetClosable, QDockWidget::DockWidgetClosable, 92},
    {sipName_DockWidgetFloatable, QDockWidget::DockWidgetFloatable, 92},
    {sipName_DockWidgetMovable, QDockWidget::DockWidgetMovable, 92},
    {sipName_DockWidgetVerticalTitleBar, QDockWidget::DockWidgetVerticalTitleBar, 92},
    {sipName_NoDockWidgetFeatures, QDockWidget::NoDockWidgetFeatures, 92},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QDockWidget[] = {
    {"visibilityChanged(bool)", 0, 0},
    {"dockLocationChanged(Qt::DockWidgetArea)", 0, 0},
    {"allowedAreasChanged(Qt::DockWidgetAreas)", 0, 0},
    {"topLevelChanged(bool)", 0, 0},
    {"featuresChanged(QDockWidget::DockWidgetFeatures)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QDockWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDockWidget,
        {0}
    },
    {
        sipNameNr_QDockWidget,
        {0, 0, 1},
        60, methods_QDockWidget,
        6, enummembers_QDockWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDockWidget,
    0,
    init_QDockWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDockWidget,
    0,
    0,
    0,
    release_QDockWidget,
    cast_QDockWidget,
    0,
    0,
    0
},
    &QDockWidget::staticMetaObject,
    0,
    pyqt4_signals_QDockWidget
};
