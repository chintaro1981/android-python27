/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:18 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 39 "sipQtGuiQInputContext.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQInputContext.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 46 "sipQtGuiQInputContext.cpp"
#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 522 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "sipQtGuiQInputContext.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "sipQtGuiQInputContext.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 57 "sipQtGuiQInputContext.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 60 "sipQtGuiQInputContext.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 63 "sipQtGuiQInputContext.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 66 "sipQtGuiQInputContext.cpp"
#line 236 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "sipQtGuiQInputContext.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "sipQtGuiQInputContext.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "sipQtGuiQInputContext.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "sipQtGuiQInputContext.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "sipQtGuiQInputContext.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "sipQtGuiQInputContext.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "sipQtGuiQInputContext.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "sipQtGuiQInputContext.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 93 "sipQtGuiQInputContext.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "sipQtGuiQInputContext.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "sipQtGuiQInputContext.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "sipQtGuiQInputContext.cpp"


class sipQInputContext : public QInputContext
{
public:
    sipQInputContext(QObject *);
    virtual ~sipQInputContext();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QString identifierName();
    QString language();
    void reset();
    void update();
    void mouseHandler(int,QMouseEvent *);
    QFont font() const;
    bool isComposing() const;
    void setFocusWidget(QWidget *);
    void widgetDestroyed(QWidget *);
    QList<QAction *> actions();
    bool filterEvent(const QEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQInputContext(const sipQInputContext &);
    sipQInputContext &operator = (const sipQInputContext &);

    char sipPyMethods[18];
};

sipQInputContext::sipQInputContext(QObject *a0): QInputContext(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQInputContext::~sipQInputContext()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQInputContext::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QInputContext);
}

int sipQInputContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QInputContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QInputContext,_c,_id,_a);

    return _id;
}

void *sipQInputContext::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QInputContext,_clname)) ? this : QInputContext::qt_metacast(_clname);
}

QString sipQInputContext::identifierName()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QInputContext,sipName_identifierName);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtGui_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

QString sipQInputContext::language()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QInputContext,sipName_language);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtGui_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

void sipQInputContext::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QInputContext,sipName_reset);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQInputContext::update()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_update);

    if (!meth)
    {
        QInputContext::update();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQInputContext::mouseHandler(int a0,QMouseEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_mouseHandler);

    if (!meth)
    {
        QInputContext::mouseHandler(a0,a1);
        return;
    }

    extern void sipVH_QtGui_170(sip_gilstate_t,PyObject *,int,QMouseEvent *);

    sipVH_QtGui_170(sipGILState,meth,a0,a1);
}

QFont sipQInputContext::font() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_font);

    if (!meth)
        return QInputContext::font();

    extern QFont sipVH_QtGui_169(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_169(sipGILState,meth);
}

bool sipQInputContext::isComposing() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QInputContext,sipName_isComposing);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQInputContext::setFocusWidget(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setFocusWidget);

    if (!meth)
    {
        QInputContext::setFocusWidget(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

void sipQInputContext::widgetDestroyed(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_widgetDestroyed);

    if (!meth)
    {
        QInputContext::widgetDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,QWidget *);

    sipVH_QtGui_7(sipGILState,meth,a0);
}

QList<QAction *> sipQInputContext::actions()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_actions);

    if (!meth)
        return QInputContext::actions();

    extern QList<QAction *> sipVH_QtGui_168(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_168(sipGILState,meth);
}

bool sipQInputContext::filterEvent(const QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_filterEvent);

    if (!meth)
        return QInputContext::filterEvent(a0);

    extern bool sipVH_QtGui_167(sip_gilstate_t,PyObject *,const QEvent *);

    return sipVH_QtGui_167(sipGILState,meth,a0);
}

bool sipQInputContext::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQInputContext::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQInputContext::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQInputContext::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQInputContext::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQInputContext::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQInputContext::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQInputContext::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQInputContext::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQInputContext::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQInputContext::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQInputContext::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQInputContext::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQInputContext::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QInputContext_sender(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 550 "sipQtGuiQInputContext.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_receivers(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QInputContext, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 592 "sipQtGuiQInputContext.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QInputContext, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QInputContext, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_identifierName(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_identifierName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_identifierName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->identifierName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_identifierName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_language(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_language);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->language());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_language, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_reset(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_reset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_update(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QInputContext::update() : sipCpp->update());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_update, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_mouseHandler(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_mouseHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QMouseEvent * a1;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QInputContext, &sipCpp, &a0, sipType_QMouseEvent, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QInputContext::mouseHandler(a0,a1) : sipCpp->mouseHandler(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_mouseHandler, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_font(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont((sipSelfWasArg ? sipCpp->QInputContext::font() : sipCpp->font()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_isComposing(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_isComposing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_isComposing);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isComposing();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_isComposing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_focusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_focusWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_setFocusWidget(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_setFocusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QInputContext::setFocusWidget(a0) : sipCpp->setFocusWidget(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_setFocusWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_widgetDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_widgetDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QInputContext::widgetDestroyed(a0) : sipCpp->widgetDestroyed(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_widgetDestroyed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_actions(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_actions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QList<QAction *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QAction *>((sipSelfWasArg ? sipCpp->QInputContext::actions() : sipCpp->actions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_actions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_filterEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_filterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QEvent * a0;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QInputContext::filterEvent(a0) : sipCpp->filterEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_filterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputMethodEvent * a0;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sendEvent(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_sendEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QInputContext_standardFormat(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_standardFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputContext::StandardFormat a0;
        QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QInputContext_StandardFormat, &a0))
        {
            QTextFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFormat(sipCpp->standardFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_standardFormat, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QInputContext(void *, const sipTypeDef *);}
static void *cast_QInputContext(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QInputContext)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QInputContext *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputContext(void *, int);}
static void release_QInputContext(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQInputContext *>(sipCppV);
    else
        delete reinterpret_cast<QInputContext *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QInputContext(sipSimpleWrapper *);}
static void dealloc_QInputContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQInputContext *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QInputContext(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QInputContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QInputContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQInputContext *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQInputContext(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputContext[] = {{133, 0, 1}};


static PyMethodDef methods_QInputContext[] = {
    {SIP_MLNAME_CAST(sipName_actions), meth_QInputContext_actions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QInputContext_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QInputContext_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QInputContext_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QInputContext_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filterEvent), meth_QInputContext_filterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QInputContext_focusWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QInputContext_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_identifierName), meth_QInputContext_identifierName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isComposing), meth_QInputContext_isComposing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_language), meth_QInputContext_language, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseHandler), meth_QInputContext_mouseHandler, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QInputContext_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QInputContext_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QInputContext_sendEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QInputContext_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFocusWidget), meth_QInputContext_setFocusWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standardFormat), meth_QInputContext_standardFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QInputContext_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_update), meth_QInputContext_update, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetDestroyed), meth_QInputContext_widgetDestroyed, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QInputContext[] = {
    {sipName_PreeditFormat, QInputContext::PreeditFormat, 241},
    {sipName_SelectionFormat, QInputContext::SelectionFormat, 241},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QInputContext = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QInputContext,
        {0}
    },
    {
        sipNameNr_QInputContext,
        {0, 0, 1},
        21, methods_QInputContext,
        2, enummembers_QInputContext,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QInputContext,
    0,
    init_QInputContext,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QInputContext,
    0,
    0,
    0,
    release_QInputContext,
    cast_QInputContext,
    0,
    0,
    0
},
    &QInputContext::staticMetaObject,
    0,
    0
};
