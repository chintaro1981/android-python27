/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 39 "sipQtGuiQAction.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQAction.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 49 "sipQtGuiQAction.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtGuiQAction.cpp"
#line 192 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 55 "sipQtGuiQAction.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 61 "sipQtGuiQAction.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 67 "sipQtGuiQAction.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQAction.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 76 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtGuiQAction.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 82 "sipQtGuiQAction.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qactiongroup.sip"
#include <qactiongroup.h>
#line 85 "sipQtGuiQAction.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 88 "sipQtGuiQAction.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "sipQtGuiQAction.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtGuiQAction.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 97 "sipQtGuiQAction.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipQtGuiQAction.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 103 "sipQtGuiQAction.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 106 "sipQtGuiQAction.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 109 "sipQtGuiQAction.cpp"


class sipQAction : public QAction
{
public:
    sipQAction(QObject *);
    sipQAction(const QString&,QObject *);
    sipQAction(const QIcon&,const QString&,QObject *);
    virtual ~sipQAction();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAction(const sipQAction &);
    sipQAction &operator = (const sipQAction &);

    char sipPyMethods[7];
};

sipQAction::sipQAction(QObject *a0): QAction(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::sipQAction(const QString& a0,QObject *a1): QAction(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::sipQAction(const QIcon& a0,const QString& a1,QObject *a2): QAction(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAction::~sipQAction()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAction::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAction);
}

int sipQAction::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAction::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAction,_c,_id,_a);

    return _id;
}

void *sipQAction::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QAction,_clname)) ? this : QAction::qt_metacast(_clname);
}

bool sipQAction::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAction::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQAction::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQAction::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQAction::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQAction::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQAction::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQAction::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQAction::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQAction::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQAction::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAction::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAction::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAction::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAction::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipQAction::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAction::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QAction_sender(PyObject *, PyObject *);}
static PyObject *meth_QAction_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 387 "sipQtGuiQAction.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_receivers(PyObject *, PyObject *);}
static PyObject *meth_QAction_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 429 "sipQtGuiQAction.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAction_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAction, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QAction_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAction, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QAction_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAction, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAction_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAction_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setActionGroup(PyObject *, PyObject *);}
static PyObject *meth_QAction_setActionGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QActionGroup * a0;
        PyObject *a0Keep;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAction, &sipCpp, &a0Keep, sipType_QActionGroup, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setActionGroup(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -10, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setActionGroup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_actionGroup(PyObject *, PyObject *);}
static PyObject *meth_QAction_actionGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QActionGroup *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionGroup();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QActionGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_actionGroup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon * a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAction, &sipCpp, sipType_QIcon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIcon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_icon(PyObject *, PyObject *);}
static PyObject *meth_QAction_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setText(PyObject *, PyObject *);}
static PyObject *meth_QAction_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_text(PyObject *, PyObject *);}
static PyObject *meth_QAction_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_text, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setIconText(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIconText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_iconText(PyObject *, PyObject *);}
static PyObject *meth_QAction_iconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->iconText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_iconText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setToolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toolTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_toolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setStatusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QAction_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->statusTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_statusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QAction_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhatsThis(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setWhatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QAction_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->whatsThis());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_whatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_menu(PyObject *, PyObject *);}
static PyObject *meth_QAction_menu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menu();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_menu, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_setMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu * a0;
        PyObject *a0Keep;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAction, &sipCpp, &a0Keep, sipType_QMenu, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMenu(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -11, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setMenu, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setSeparator(PyObject *, PyObject *);}
static PyObject *meth_QAction_setSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSeparator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setSeparator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isSeparator(PyObject *, PyObject *);}
static PyObject *meth_QAction_isSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSeparator();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isSeparator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setShortcut(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QKeySequence * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QKeySequence, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcut(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcut, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_shortcut(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QKeySequence *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QKeySequence(sipCpp->shortcut());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcut, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setShortcutContext(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcutContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ShortcutContext a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_Qt_ShortcutContext, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcutContext(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcutContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_shortcutContext(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcutContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            Qt::ShortcutContext sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->shortcutContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ShortcutContext);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcutContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setFont(PyObject *, PyObject *);}
static PyObject *meth_QAction_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAction, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setFont, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_font(PyObject *, PyObject *);}
static PyObject *meth_QAction_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAction_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setCheckable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAction_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCheckable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isCheckable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_data(PyObject *, PyObject *);}
static PyObject *meth_QAction_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->data());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setData(PyObject *, PyObject *);}
static PyObject *meth_QAction_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QVariant,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isChecked(PyObject *, PyObject *);}
static PyObject *meth_QAction_isChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isChecked();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isChecked, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QAction_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isVisible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_activate(PyObject *, PyObject *);}
static PyObject *meth_QAction_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction::ActionEvent a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_ActionEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->activate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_activate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_showStatusText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAction_showStatusText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0 = 0;
        QAction *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8", &sipSelf, sipType_QAction, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->showStatusText(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_showStatusText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QAction_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_parentWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_event(PyObject *, PyObject *);}
static PyObject *meth_QAction_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAction, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_trigger(PyObject *, PyObject *);}
static PyObject *meth_QAction_trigger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->trigger();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_trigger, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_hover(PyObject *, PyObject *);}
static PyObject *meth_QAction_hover(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->hover();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_hover, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setChecked(PyObject *, PyObject *);}
static PyObject *meth_QAction_setChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChecked(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setChecked, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_toggle(PyObject *, PyObject *);}
static PyObject *meth_QAction_toggle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toggle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_toggle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setEnabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QAction_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDisabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setDisabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QAction_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setVisible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setShortcuts(PyObject *, PyObject *);}
static PyObject *meth_QAction_setShortcuts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QKeySequence> * a0;
        int a0State = 0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAction, &sipCpp, sipType_QList_0100QKeySequence,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcuts(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QKeySequence> *>(a0),sipType_QList_0100QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QKeySequence::StandardKey a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QKeySequence_StandardKey, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcuts(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setShortcuts, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_shortcuts(PyObject *, PyObject *);}
static PyObject *meth_QAction_shortcuts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList<QKeySequence> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QKeySequence>(sipCpp->shortcuts());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_shortcuts, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAction_setAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoRepeat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setAutoRepeat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_autoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAction_autoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoRepeat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_autoRepeat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setMenuRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_setMenuRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction::MenuRole a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_MenuRole, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMenuRole(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setMenuRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_menuRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_menuRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QAction::MenuRole sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menuRole();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAction_MenuRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_menuRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_associatedWidgets(PyObject *, PyObject *);}
static PyObject *meth_QAction_associatedWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList<QWidget *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWidget *>(sipCpp->associatedWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_associatedWidgets, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_associatedGraphicsWidgets(PyObject *, PyObject *);}
static PyObject *meth_QAction_associatedGraphicsWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QList<QGraphicsWidget *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGraphicsWidget *>(sipCpp->associatedGraphicsWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_associatedGraphicsWidgets, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setIconVisibleInMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_setIconVisibleInMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAction, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconVisibleInMenu(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setIconVisibleInMenu, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_isIconVisibleInMenu(PyObject *, PyObject *);}
static PyObject *meth_QAction_isIconVisibleInMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isIconVisibleInMenu();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_isIconVisibleInMenu, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QAction_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction::Priority a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_Priority, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPriority(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setPriority, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_priority(PyObject *, PyObject *);}
static PyObject *meth_QAction_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QAction::Priority sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->priority();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAction_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_priority, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_setSoftKeyRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_setSoftKeyRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction::SoftKeyRole a0;
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAction, &sipCpp, sipType_QAction_SoftKeyRole, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSoftKeyRole(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_setSoftKeyRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QAction_softKeyRole(PyObject *, PyObject *);}
static PyObject *meth_QAction_softKeyRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAction, &sipCpp))
        {
            QAction::SoftKeyRole sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->softKeyRole();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAction_SoftKeyRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAction, sipName_softKeyRole, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAction(void *, const sipTypeDef *);}
static void *cast_QAction(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAction)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAction *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAction(void *, int);}
static void release_QAction(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAction *>(sipCppV);
    else
        delete reinterpret_cast<QAction *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAction(sipSimpleWrapper *);}
static void dealloc_QAction(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAction *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAction(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QAction(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QAction(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAction *sipCpp = 0;

    {
        QObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAction(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QObject * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAction(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QIcon * a0;
        const QString * a1;
        int a1State = 0;
        QObject * a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1JH", sipType_QIcon, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAction(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAction[] = {{133, 0, 1}};


static PyMethodDef methods_QAction[] = {
    {SIP_MLNAME_CAST(sipName_actionGroup), meth_QAction_actionGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activate), meth_QAction_activate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_associatedGraphicsWidgets), meth_QAction_associatedGraphicsWidgets, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_associatedWidgets), meth_QAction_associatedWidgets, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoRepeat), meth_QAction_autoRepeat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QAction_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QAction_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QAction_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QAction_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QAction_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QAction_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QAction_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hover), meth_QAction_hover, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QAction_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_iconText), meth_QAction_iconText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QAction_isCheckable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isChecked), meth_QAction_isChecked, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QAction_isEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIconVisibleInMenu), meth_QAction_isIconVisibleInMenu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSeparator), meth_QAction_isSeparator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QAction_isVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_menu), meth_QAction_menu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_menuRole), meth_QAction_menuRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parentWidget), meth_QAction_parentWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_priority), meth_QAction_priority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QAction_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QAction_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setActionGroup), meth_QAction_setActionGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoRepeat), meth_QAction_setAutoRepeat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QAction_setCheckable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setChecked), meth_QAction_setChecked, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QAction_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDisabled), meth_QAction_setDisabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QAction_setEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QAction_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QAction_setIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIconText), meth_QAction_setIconText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIconVisibleInMenu), meth_QAction_setIconVisibleInMenu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMenu), meth_QAction_setMenu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMenuRole), meth_QAction_setMenuRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QAction_setPriority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSeparator), meth_QAction_setSeparator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setShortcut), meth_QAction_setShortcut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setShortcutContext), meth_QAction_setShortcutContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setShortcuts), meth_QAction_setShortcuts, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSoftKeyRole), meth_QAction_setSoftKeyRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QAction_setStatusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QAction_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QAction_setToolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QAction_setVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QAction_setWhatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shortcut), meth_QAction_shortcut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shortcutContext), meth_QAction_shortcutContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shortcuts), meth_QAction_shortcuts, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showStatusText), (PyCFunction)meth_QAction_showStatusText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_softKeyRole), meth_QAction_softKeyRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QAction_statusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QAction_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAction_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toggle), meth_QAction_toggle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QAction_toolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_trigger), meth_QAction_trigger, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QAction_whatsThis, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QAction[] = {
    {sipName_AboutQtRole, QAction::AboutQtRole, 34},
    {sipName_AboutRole, QAction::AboutRole, 34},
    {sipName_ApplicationSpecificRole, QAction::ApplicationSpecificRole, 34},
    {sipName_HighPriority, QAction::HighPriority, 35},
    {sipName_Hover, QAction::Hover, 33},
    {sipName_LowPriority, QAction::LowPriority, 35},
    {sipName_NegativeSoftKey, QAction::NegativeSoftKey, 36},
    {sipName_NoRole, QAction::NoRole, 34},
    {sipName_NoSoftKey, QAction::NoSoftKey, 36},
    {sipName_NormalPriority, QAction::NormalPriority, 35},
    {sipName_PositiveSoftKey, QAction::PositiveSoftKey, 36},
    {sipName_PreferencesRole, QAction::PreferencesRole, 34},
    {sipName_QuitRole, QAction::QuitRole, 34},
    {sipName_SelectSoftKey, QAction::SelectSoftKey, 36},
    {sipName_TextHeuristicRole, QAction::TextHeuristicRole, 34},
    {sipName_Trigger, QAction::Trigger, 33},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAction[] = {
    {"toggled(bool)", 0, 0},
    {"hovered()", 0, 0},
    {"triggered(bool)", 0, 0},
    {"triggered()", 0, 0},
    {"changed()", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QAction = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAction,
        {0}
    },
    {
        sipNameNr_QAction,
        {0, 0, 1},
        63, methods_QAction,
        16, enummembers_QAction,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QAction,
    0,
    init_QAction,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAction,
    0,
    0,
    0,
    release_QAction,
    cast_QAction,
    0,
    0,
    0
},
    &QAction::staticMetaObject,
    0,
    pyqt4_signals_QAction
};
