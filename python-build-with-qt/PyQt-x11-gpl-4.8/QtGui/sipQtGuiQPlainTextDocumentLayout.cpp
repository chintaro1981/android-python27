/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:17 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 178 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 39 "sipQtGuiQPlainTextDocumentLayout.cpp"

#line 65 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 43 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 139 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 164 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 48 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 75 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 56 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 59 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 62 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 65 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 70 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 56 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 77 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 80 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 83 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 86 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 89 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 92 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 95 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 98 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 101 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 104 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 110 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 113 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 116 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 122 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 125 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 128 "sipQtGuiQPlainTextDocumentLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 131 "sipQtGuiQPlainTextDocumentLayout.cpp"


class sipQPlainTextDocumentLayout : public QPlainTextDocumentLayout
{
public:
    sipQPlainTextDocumentLayout(QTextDocument *);
    virtual ~sipQPlainTextDocumentLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_resizeInlineObject(bool,QTextInlineObject,int,const QTextFormat&);
    void sipProtectVirt_positionInlineObject(bool,QTextInlineObject,int,const QTextFormat&);
    void sipProtectVirt_drawInlineObject(bool,QPainter *,const QRectF&,QTextInlineObject,int,const QTextFormat&);
    QTextCharFormat sipProtect_format(int);
    void sipProtectVirt_documentChanged(bool,int,int,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(QPainter *,const QAbstractTextDocumentLayout::PaintContext&);
    int hitTest(const QPointF&,Qt::HitTestAccuracy) const;
    int pageCount() const;
    QSizeF documentSize() const;
    QRectF frameBoundingRect(QTextFrame *) const;
    QRectF blockBoundingRect(const QTextBlock&) const;
    void documentChanged(int,int,int);
    void resizeInlineObject(QTextInlineObject,int,const QTextFormat&);
    void positionInlineObject(QTextInlineObject,int,const QTextFormat&);
    void drawInlineObject(QPainter *,const QRectF&,QTextInlineObject,int,const QTextFormat&);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextDocumentLayout(const sipQPlainTextDocumentLayout &);
    sipQPlainTextDocumentLayout &operator = (const sipQPlainTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQPlainTextDocumentLayout::sipQPlainTextDocumentLayout(QTextDocument *a0): QPlainTextDocumentLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextDocumentLayout::~sipQPlainTextDocumentLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlainTextDocumentLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPlainTextDocumentLayout);
}

int sipQPlainTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlainTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPlainTextDocumentLayout,_c,_id,_a);

    return _id;
}

void *sipQPlainTextDocumentLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QPlainTextDocumentLayout,_clname)) ? this : QPlainTextDocumentLayout::qt_metacast(_clname);
}

void sipQPlainTextDocumentLayout::draw(QPainter *a0,const QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_draw);

    if (!meth)
    {
        QPlainTextDocumentLayout::draw(a0,a1);
        return;
    }

    extern void sipVH_QtGui_125(sip_gilstate_t,PyObject *,QPainter *,const QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtGui_125(sipGILState,meth,a0,a1);
}

int sipQPlainTextDocumentLayout::hitTest(const QPointF& a0,Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_hitTest);

    if (!meth)
        return QPlainTextDocumentLayout::hitTest(a0,a1);

    extern int sipVH_QtGui_124(sip_gilstate_t,PyObject *,const QPointF&,Qt::HitTestAccuracy);

    return sipVH_QtGui_124(sipGILState,meth,a0,a1);
}

int sipQPlainTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_pageCount);

    if (!meth)
        return QPlainTextDocumentLayout::pageCount();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QSizeF sipQPlainTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_documentSize);

    if (!meth)
        return QPlainTextDocumentLayout::documentSize();

    extern QSizeF sipVH_QtGui_123(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_123(sipGILState,meth);
}

QRectF sipQPlainTextDocumentLayout::frameBoundingRect(QTextFrame *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_frameBoundingRect);

    if (!meth)
        return QPlainTextDocumentLayout::frameBoundingRect(a0);

    extern QRectF sipVH_QtGui_122(sip_gilstate_t,PyObject *,QTextFrame *);

    return sipVH_QtGui_122(sipGILState,meth,a0);
}

QRectF sipQPlainTextDocumentLayout::blockBoundingRect(const QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_blockBoundingRect);

    if (!meth)
        return QPlainTextDocumentLayout::blockBoundingRect(a0);

    extern QRectF sipVH_QtGui_121(sip_gilstate_t,PyObject *,const QTextBlock&);

    return sipVH_QtGui_121(sipGILState,meth,a0);
}

void sipQPlainTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_documentChanged);

    if (!meth)
    {
        QPlainTextDocumentLayout::documentChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_120(sip_gilstate_t,PyObject *,int,int,int);

    sipVH_QtGui_120(sipGILState,meth,a0,a1,a2);
}

void sipQPlainTextDocumentLayout::resizeInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_resizeInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_231(sip_gilstate_t,PyObject *,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_231(sipGILState,meth,a0,a1,a2);
}

void sipQPlainTextDocumentLayout::positionInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_positionInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_231(sip_gilstate_t,PyObject *,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_231(sipGILState,meth,a0,a1,a2);
}

void sipQPlainTextDocumentLayout::drawInlineObject(QPainter *a0,const QRectF& a1,QTextInlineObject a2,int a3,const QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_drawInlineObject);

    if (!meth)
    {
        QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtGui_230(sip_gilstate_t,PyObject *,QPainter *,const QRectF&,QTextInlineObject,int,const QTextFormat&);

    sipVH_QtGui_230(sipGILState,meth,a0,a1,a2,a3,a4);
}

bool sipQPlainTextDocumentLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQPlainTextDocumentLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQPlainTextDocumentLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQPlainTextDocumentLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQPlainTextDocumentLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQPlainTextDocumentLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQPlainTextDocumentLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQPlainTextDocumentLayout::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQPlainTextDocumentLayout::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQPlainTextDocumentLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_resizeInlineObject(bool sipSelfWasArg,QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2) : resizeInlineObject(a0,a1,a2));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_positionInlineObject(bool sipSelfWasArg,QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2) : positionInlineObject(a0,a1,a2));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_drawInlineObject(bool sipSelfWasArg,QPainter *a0,const QRectF& a1,QTextInlineObject a2,int a3,const QTextFormat& a4)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4) : drawInlineObject(a0,a1,a2,a3,a4));
}

QTextCharFormat sipQPlainTextDocumentLayout::sipProtect_format(int a0)
{
    return QAbstractTextDocumentLayout::format(a0);
}

void sipQPlainTextDocumentLayout::sipProtectVirt_documentChanged(bool sipSelfWasArg,int a0,int a1,int a2)
{
    (sipSelfWasArg ? QPlainTextDocumentLayout::documentChanged(a0,a1,a2) : documentChanged(a0,a1,a2));
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_sender(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 596 "sipQtGuiQPlainTextDocumentLayout.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_receivers(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 638 "sipQtGuiQPlainTextDocumentLayout.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_resizeInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_resizeInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject * a0;
        int a1;
        const QTextFormat * a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeInlineObject(sipSelfWasArg,*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_resizeInlineObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_positionInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_positionInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject * a0;
        int a1;
        const QTextFormat * a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_positionInlineObject(sipSelfWasArg,*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_positionInlineObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_drawInlineObject(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_drawInlineObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QRectF * a1;
        QTextInlineObject * a2;
        int a3;
        const QTextFormat * a4;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextInlineObject, &a2, &a3, sipType_QTextFormat, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawInlineObject(sipSelfWasArg,a0,*a1,*a2,a3,*a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_drawInlineObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_format(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->sipProtect_format(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_format, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QAbstractTextDocumentLayout::PaintContext * a1;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::draw(a0,*a1) : sipCpp->draw(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_draw, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        Qt::HitTestAccuracy a1;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::hitTest(*a0,a1) : sipCpp->hitTest(*a0,a1));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_hitTest, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::pageCount() : sipCpp->pageCount());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_pageCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::documentSize() : sipCpp->documentSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextFrame * a0;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::frameBoundingRect(a0) : sipCpp->frameBoundingRect(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_frameBoundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTextBlock * a0;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::blockBoundingRect(*a0) : sipCpp->blockBoundingRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_blockBoundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlock * a0;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureBlockLayout(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_ensureBlockLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_setCursorWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_cursorWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->requestUpdate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_requestUpdate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_documentChanged(sipSelfWasArg,a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentChanged, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPlainTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QPlainTextDocumentLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPlainTextDocumentLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractTextDocumentLayout)->ctd_cast((QAbstractTextDocumentLayout *)(QPlainTextDocumentLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextDocumentLayout(void *, int);}
static void release_QPlainTextDocumentLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlainTextDocumentLayout *>(sipCppV);
    else
        delete reinterpret_cast<QPlainTextDocumentLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlainTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlainTextDocumentLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QPlainTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlainTextDocumentLayout *sipCpp = 0;

    {
        QTextDocument * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextDocumentLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextDocumentLayout[] = {{29, 255, 1}};


static PyMethodDef methods_QPlainTextDocumentLayout[] = {
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QPlainTextDocumentLayout_blockBoundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QPlainTextDocumentLayout_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QPlainTextDocumentLayout_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QPlainTextDocumentLayout_cursorWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QPlainTextDocumentLayout_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QPlainTextDocumentLayout_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentChanged), meth_QPlainTextDocumentLayout_documentChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentSize), meth_QPlainTextDocumentLayout_documentSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_draw), meth_QPlainTextDocumentLayout_draw, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawInlineObject), meth_QPlainTextDocumentLayout_drawInlineObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ensureBlockLayout), meth_QPlainTextDocumentLayout_ensureBlockLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QPlainTextDocumentLayout_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frameBoundingRect), meth_QPlainTextDocumentLayout_frameBoundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hitTest), meth_QPlainTextDocumentLayout_hitTest, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QPlainTextDocumentLayout_pageCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_positionInlineObject), meth_QPlainTextDocumentLayout_positionInlineObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QPlainTextDocumentLayout_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUpdate), meth_QPlainTextDocumentLayout_requestUpdate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeInlineObject), meth_QPlainTextDocumentLayout_resizeInlineObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QPlainTextDocumentLayout_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QPlainTextDocumentLayout_setCursorWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QPlainTextDocumentLayout_timerEvent, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPlainTextDocumentLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextDocumentLayout,
        {0}
    },
    {
        sipNameNr_QPlainTextDocumentLayout,
        {0, 0, 1},
        22, methods_QPlainTextDocumentLayout,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QPlainTextDocumentLayout,
    0,
    init_QPlainTextDocumentLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlainTextDocumentLayout,
    0,
    0,
    0,
    release_QPlainTextDocumentLayout,
    cast_QPlainTextDocumentLayout,
    0,
    0,
    0
},
    &QPlainTextDocumentLayout::staticMetaObject,
    0,
    0
};
