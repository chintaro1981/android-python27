/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsyntaxhighlighter.sip"
#include <qsyntaxhighlighter.h>
#line 39 "sipQtGuiQSyntaxHighlighter.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 49 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 45 "sipQtGuiQSyntaxHighlighter.cpp"
#line 65 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 48 "sipQtGuiQSyntaxHighlighter.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "sipQtGuiQSyntaxHighlighter.cpp"
#line 139 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 164 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 56 "sipQtGuiQSyntaxHighlighter.cpp"
#line 260 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 59 "sipQtGuiQSyntaxHighlighter.cpp"
#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "sipQtGuiQSyntaxHighlighter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 65 "sipQtGuiQSyntaxHighlighter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 68 "sipQtGuiQSyntaxHighlighter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 71 "sipQtGuiQSyntaxHighlighter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74 "sipQtGuiQSyntaxHighlighter.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 77 "sipQtGuiQSyntaxHighlighter.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "sipQtGuiQSyntaxHighlighter.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83 "sipQtGuiQSyntaxHighlighter.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 86 "sipQtGuiQSyntaxHighlighter.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 89 "sipQtGuiQSyntaxHighlighter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "sipQtGuiQSyntaxHighlighter.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 95 "sipQtGuiQSyntaxHighlighter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 98 "sipQtGuiQSyntaxHighlighter.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 101 "sipQtGuiQSyntaxHighlighter.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "sipQtGuiQSyntaxHighlighter.cpp"


class sipQSyntaxHighlighter : public QSyntaxHighlighter
{
public:
    sipQSyntaxHighlighter(QTextEdit *);
    sipQSyntaxHighlighter(QTextDocument *);
    sipQSyntaxHighlighter(QObject *);
    virtual ~sipQSyntaxHighlighter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_highlightBlock(const QString&);
    void sipProtect_setFormat(int,int,const QTextCharFormat&);
    void sipProtect_setFormat(int,int,const QColor&);
    void sipProtect_setFormat(int,int,const QFont&);
    QTextCharFormat sipProtect_format(int) const;
    int sipProtect_previousBlockState() const;
    int sipProtect_currentBlockState() const;
    void sipProtect_setCurrentBlockState(int);
    void sipProtect_setCurrentBlockUserData(QTextBlockUserData *);
    QTextBlockUserData * sipProtect_currentBlockUserData() const;
    QTextBlock sipProtect_currentBlock() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void highlightBlock(const QString&);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSyntaxHighlighter(const sipQSyntaxHighlighter &);
    sipQSyntaxHighlighter &operator = (const sipQSyntaxHighlighter &);

    char sipPyMethods[8];
};

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QTextEdit *a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QTextDocument *a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::sipQSyntaxHighlighter(QObject *a0): QSyntaxHighlighter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSyntaxHighlighter::~sipQSyntaxHighlighter()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSyntaxHighlighter::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QSyntaxHighlighter);
}

int sipQSyntaxHighlighter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSyntaxHighlighter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QSyntaxHighlighter,_c,_id,_a);

    return _id;
}

void *sipQSyntaxHighlighter::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QSyntaxHighlighter,_clname)) ? this : QSyntaxHighlighter::qt_metacast(_clname);
}

void sipQSyntaxHighlighter::highlightBlock(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QSyntaxHighlighter,sipName_highlightBlock);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtGui_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

bool sipQSyntaxHighlighter::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQSyntaxHighlighter::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQSyntaxHighlighter::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQSyntaxHighlighter::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQSyntaxHighlighter::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQSyntaxHighlighter::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQSyntaxHighlighter::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQSyntaxHighlighter::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSyntaxHighlighter::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQSyntaxHighlighter::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSyntaxHighlighter::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQSyntaxHighlighter::sipProtect_highlightBlock(const QString& a0)
{
    highlightBlock(a0);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const QTextCharFormat& a2)
{
    QSyntaxHighlighter::setFormat(a0,a1,a2);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const QColor& a2)
{
    QSyntaxHighlighter::setFormat(a0,a1,a2);
}

void sipQSyntaxHighlighter::sipProtect_setFormat(int a0,int a1,const QFont& a2)
{
    QSyntaxHighlighter::setFormat(a0,a1,a2);
}

QTextCharFormat sipQSyntaxHighlighter::sipProtect_format(int a0) const
{
    return QSyntaxHighlighter::format(a0);
}

int sipQSyntaxHighlighter::sipProtect_previousBlockState() const
{
    return QSyntaxHighlighter::previousBlockState();
}

int sipQSyntaxHighlighter::sipProtect_currentBlockState() const
{
    return QSyntaxHighlighter::currentBlockState();
}

void sipQSyntaxHighlighter::sipProtect_setCurrentBlockState(int a0)
{
    QSyntaxHighlighter::setCurrentBlockState(a0);
}

void sipQSyntaxHighlighter::sipProtect_setCurrentBlockUserData(QTextBlockUserData *a0)
{
    QSyntaxHighlighter::setCurrentBlockUserData(a0);
}

QTextBlockUserData * sipQSyntaxHighlighter::sipProtect_currentBlockUserData() const
{
    return QSyntaxHighlighter::currentBlockUserData();
}

QTextBlock sipQSyntaxHighlighter::sipProtect_currentBlock() const
{
    return QSyntaxHighlighter::currentBlock();
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_sender(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 458 "sipQtGuiQSyntaxHighlighter.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_receivers(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 500 "sipQtGuiQSyntaxHighlighter.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument * a0;
        PyObject *a0Keep;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -59, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_document(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_document, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rehighlight();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_rehighlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlock * a0;
        QSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rehighlightBlock(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_rehighlightBlock, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_highlightBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSyntaxHighlighter, sipName_highlightBlock);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_highlightBlock(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_highlightBlock, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTextCharFormat * a2;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QTextCharFormat, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QColor * a2;
        int a2State = 0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QFont * a2;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0, &a1, sipType_QFont, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setFormat(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_format(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->sipProtect_format(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_format, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_previousBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_previousBlockState();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_previousBlockState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_currentBlockState();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setCurrentBlockState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_setCurrentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBlockUserData * a0;
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp, sipType_QTextBlockUserData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setCurrentBlockUserData(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_setCurrentBlockUserData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlockUserData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextBlockUserData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_currentBlockUserData();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextBlockUserData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlockUserData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *, PyObject *);}
static PyObject *meth_QSyntaxHighlighter_currentBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSyntaxHighlighter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSyntaxHighlighter, &sipCpp))
        {
            QTextBlock *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlock(sipCpp->sipProtect_currentBlock());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSyntaxHighlighter, sipName_currentBlock, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSyntaxHighlighter(void *, const sipTypeDef *);}
static void *cast_QSyntaxHighlighter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSyntaxHighlighter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSyntaxHighlighter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSyntaxHighlighter(void *, int);}
static void release_QSyntaxHighlighter(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSyntaxHighlighter *>(sipCppV);
    else
        delete reinterpret_cast<QSyntaxHighlighter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *);}
static void dealloc_QSyntaxHighlighter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSyntaxHighlighter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSyntaxHighlighter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QSyntaxHighlighter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSyntaxHighlighter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSyntaxHighlighter *sipCpp = 0;

    {
        QTextEdit * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QTextEdit, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTextDocument * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QTextDocument, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSyntaxHighlighter(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSyntaxHighlighter[] = {{133, 0, 1}};


static PyMethodDef methods_QSyntaxHighlighter[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QSyntaxHighlighter_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QSyntaxHighlighter_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentBlock), meth_QSyntaxHighlighter_currentBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentBlockState), meth_QSyntaxHighlighter_currentBlockState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentBlockUserData), meth_QSyntaxHighlighter_currentBlockUserData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QSyntaxHighlighter_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QSyntaxHighlighter_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_document), meth_QSyntaxHighlighter_document, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QSyntaxHighlighter_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_highlightBlock), meth_QSyntaxHighlighter_highlightBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previousBlockState), meth_QSyntaxHighlighter_previousBlockState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QSyntaxHighlighter_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rehighlight), meth_QSyntaxHighlighter_rehighlight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rehighlightBlock), meth_QSyntaxHighlighter_rehighlightBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QSyntaxHighlighter_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockState), meth_QSyntaxHighlighter_setCurrentBlockState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentBlockUserData), meth_QSyntaxHighlighter_setCurrentBlockUserData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QSyntaxHighlighter_setDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QSyntaxHighlighter_setFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QSyntaxHighlighter_timerEvent, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QSyntaxHighlighter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSyntaxHighlighter,
        {0}
    },
    {
        sipNameNr_QSyntaxHighlighter,
        {0, 0, 1},
        20, methods_QSyntaxHighlighter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QSyntaxHighlighter,
    0,
    init_QSyntaxHighlighter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSyntaxHighlighter,
    0,
    0,
    0,
    release_QSyntaxHighlighter,
    cast_QSyntaxHighlighter,
    0,
    0,
    0
},
    &QSyntaxHighlighter::staticMetaObject,
    0,
    0
};
