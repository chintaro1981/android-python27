/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 152 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "sipQtGuiQGradient.cpp"

#line 208 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 44 "sipQtGuiQGradient.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 47 "sipQtGuiQGradient.cpp"


extern "C" {static PyObject *meth_QGradient_type(PyObject *, PyObject *);}
static PyObject *meth_QGradient_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
            QGradient::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGradient_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_spread(PyObject *, PyObject *);}
static PyObject *meth_QGradient_spread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
            QGradient::Spread sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spread();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGradient_Spread);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_spread, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_setColorAt(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setColorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QColor * a1;
        int a1State = 0;
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ1", &sipSelf, sipType_QGradient, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColorAt(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setColorAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_setStops(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setStops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGradientStops * a0;
        int a0State = 0;
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGradient, &sipCpp, sipType_QVector_0600QPair_2400_0100QColor,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStops(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QGradientStops *>(a0),sipType_QVector_0600QPair_2400_0100QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setStops, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_stops(PyObject *, PyObject *);}
static PyObject *meth_QGradient_stops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
            QGradientStops *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGradientStops(sipCpp->stops());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0600QPair_2400_0100QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_stops, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_setSpread(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setSpread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient::Spread a0;
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGradient, &sipCpp, sipType_QGradient_Spread, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpread(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setSpread, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_coordinateMode(PyObject *, PyObject *);}
static PyObject *meth_QGradient_coordinateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGradient, &sipCpp))
        {
            QGradient::CoordinateMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->coordinateMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGradient_CoordinateMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_coordinateMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGradient_setCoordinateMode(PyObject *, PyObject *);}
static PyObject *meth_QGradient_setCoordinateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGradient::CoordinateMode a0;
        QGradient *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGradient, &sipCpp, sipType_QGradient_CoordinateMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCoordinateMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGradient, sipName_setCoordinateMode, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QGradient___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGradient___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGradient *sipCpp = reinterpret_cast<QGradient *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGradient));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGradient * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGradient, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QGradient::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QGradient,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGradient___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGradient___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGradient *sipCpp = reinterpret_cast<QGradient *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGradient));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGradient * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGradient, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QGradient::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QGradient,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGradient(void *, const sipTypeDef *);}
static void *cast_QGradient(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QGradient)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGradient(void *, int);}
static void release_QGradient(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QGradient *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QGradient(void *, SIP_SSIZE_T, const void *);}
static void assign_QGradient(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGradient *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGradient *>(sipSrc);
}


extern "C" {static void *array_QGradient(SIP_SSIZE_T);}
static void *array_QGradient(SIP_SSIZE_T sipNrElem)
{
    return new QGradient[sipNrElem];
}


extern "C" {static void *copy_QGradient(const void *, SIP_SSIZE_T);}
static void *copy_QGradient(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGradient(reinterpret_cast<const QGradient *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGradient(sipSimpleWrapper *);}
static void dealloc_QGradient(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGradient(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QGradient(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGradient(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QGradient *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QGradient();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QGradient * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGradient, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QGradient(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGradient[] = {
    {(void *)slot_QGradient___ne__, ne_slot},
    {(void *)slot_QGradient___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGradient[] = {
    {SIP_MLNAME_CAST(sipName_coordinateMode), meth_QGradient_coordinateMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorAt), meth_QGradient_setColorAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCoordinateMode), meth_QGradient_setCoordinateMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSpread), meth_QGradient_setSpread, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStops), meth_QGradient_setStops, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_spread), meth_QGradient_spread, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stops), meth_QGradient_stops, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QGradient_type, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QGradient[] = {
    {sipName_ConicalGradient, QGradient::ConicalGradient, 153},
    {sipName_LinearGradient, QGradient::LinearGradient, 153},
    {sipName_LogicalMode, QGradient::LogicalMode, 151},
    {sipName_NoGradient, QGradient::NoGradient, 153},
    {sipName_ObjectBoundingMode, QGradient::ObjectBoundingMode, 151},
    {sipName_PadSpread, QGradient::PadSpread, 152},
    {sipName_RadialGradient, QGradient::RadialGradient, 153},
    {sipName_ReflectSpread, QGradient::ReflectSpread, 152},
    {sipName_RepeatSpread, QGradient::RepeatSpread, 152},
    {sipName_StretchToDeviceMode, QGradient::StretchToDeviceMode, 151},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QGradient = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGradient,
        {0}
    },
    {
        sipNameNr_QGradient,
        {0, 0, 1},
        8, methods_QGradient,
        10, enummembers_QGradient,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QGradient,
    init_QGradient,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGradient,
    assign_QGradient,
    array_QGradient,
    copy_QGradient,
    release_QGradient,
    cast_QGradient,
    0,
    0,
    0
},
    0,
    0,
    0
};
