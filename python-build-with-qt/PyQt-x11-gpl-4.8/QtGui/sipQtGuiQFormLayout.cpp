/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:19 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qformlayout.sip"
#include <qformlayout.h>
#line 39 "sipQtGuiQFormLayout.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 49 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "sipQtGuiQFormLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 55 "sipQtGuiQFormLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 58 "sipQtGuiQFormLayout.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQFormLayout.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 67 "sipQtGuiQFormLayout.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQFormLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQFormLayout.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtGuiQFormLayout.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 79 "sipQtGuiQFormLayout.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 82 "sipQtGuiQFormLayout.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtGuiQFormLayout.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 88 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91 "sipQtGuiQFormLayout.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtGuiQFormLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 97 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 100 "sipQtGuiQFormLayout.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "sipQtGuiQFormLayout.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 106 "sipQtGuiQFormLayout.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 109 "sipQtGuiQFormLayout.cpp"


class sipQFormLayout : public QFormLayout
{
public:
    sipQFormLayout(QWidget *);
    virtual ~sipQFormLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_widgetEvent(QEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtect_addChildLayout(QLayout *);
    void sipProtect_addChildWidget(QWidget *);
    QRect sipProtect_alignmentRect(const QRect&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void addItem(QLayoutItem *);
    QLayoutItem * itemAt(int) const;
    QLayoutItem * takeAt(int);
    void setGeometry(const QRect&);
    QSize minimumSize() const;
    QSize sizeHint() const;
    void invalidate();
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    Qt::Orientations expandingDirections() const;
    int count() const;
    QRect geometry() const;
    QSize maximumSize() const;
    int indexOf(QWidget *) const;
    bool isEmpty() const;
    QLayout * layout();
    void childEvent(QChildEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    int minimumHeightForWidth(int) const;
    QWidget * widget();
    QSpacerItem * spacerItem();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFormLayout(const sipQFormLayout &);
    sipQFormLayout &operator = (const sipQFormLayout &);

    char sipPyMethods[26];
};

sipQFormLayout::sipQFormLayout(QWidget *a0): QFormLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFormLayout::~sipQFormLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFormLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QFormLayout);
}

int sipQFormLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFormLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QFormLayout,_c,_id,_a);

    return _id;
}

void *sipQFormLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QFormLayout,_clname)) ? this : QFormLayout::qt_metacast(_clname);
}

void sipQFormLayout::addItem(QLayoutItem *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_addItem);

    if (!meth)
    {
        QFormLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtGui_105(sip_gilstate_t,PyObject *,QLayoutItem *);

    sipVH_QtGui_105(sipGILState,meth,a0);
}

QLayoutItem * sipQFormLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_itemAt);

    if (!meth)
        return QFormLayout::itemAt(a0);

    extern QLayoutItem * sipVH_QtGui_104(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_104(sipGILState,meth,a0);
}

QLayoutItem * sipQFormLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_takeAt);

    if (!meth)
        return QFormLayout::takeAt(a0);

    extern QLayoutItem * sipVH_QtGui_103(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_103(sipGILState,meth,a0);
}

void sipQFormLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QFormLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_102(sip_gilstate_t,PyObject *,const QRect&);

    sipVH_QtGui_102(sipGILState,meth,a0);
}

QSize sipQFormLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_minimumSize);

    if (!meth)
        return QFormLayout::minimumSize();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

QSize sipQFormLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QFormLayout::sizeHint();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

void sipQFormLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_invalidate);

    if (!meth)
    {
        QFormLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQFormLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!meth)
        return QFormLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

int sipQFormLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QFormLayout::heightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

Qt::Orientations sipQFormLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_expandingDirections);

    if (!meth)
        return QFormLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtGui_155(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_155(sipGILState,meth);
}

int sipQFormLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_count);

    if (!meth)
        return QFormLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QRect sipQFormLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_geometry);

    if (!meth)
        return QLayout::geometry();

    extern QRect sipVH_QtGui_154(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_154(sipGILState,meth);
}

QSize sipQFormLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_maximumSize);

    if (!meth)
        return QLayout::maximumSize();

    extern QSize sipVH_QtGui_5(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_5(sipGILState,meth);
}

int sipQFormLayout::indexOf(QWidget *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_indexOf);

    if (!meth)
        return QLayout::indexOf(a0);

    extern int sipVH_QtGui_158(sip_gilstate_t,PyObject *,QWidget *);

    return sipVH_QtGui_158(sipGILState,meth,a0);
}

bool sipQFormLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_isEmpty);

    if (!meth)
        return QLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

QLayout * sipQFormLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_layout);

    if (!meth)
        return QLayout::layout();

    extern QLayout * sipVH_QtGui_157(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_157(sipGILState,meth);
}

void sipQFormLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

bool sipQFormLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQFormLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQFormLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQFormLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQFormLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQFormLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

int sipQFormLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!meth)
        return QLayoutItem::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t,PyObject *,int);

    return sipVH_QtGui_28(sipGILState,meth,a0);
}

QWidget * sipQFormLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_widget);

    if (!meth)
        return QLayoutItem::widget();

    extern QWidget * sipVH_QtGui_106(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_106(sipGILState,meth);
}

QSpacerItem * sipQFormLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_spacerItem);

    if (!meth)
        return QLayoutItem::spacerItem();

    extern QSpacerItem * sipVH_QtGui_156(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_156(sipGILState,meth);
}

QObject * sipQFormLayout::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQFormLayout::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQFormLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQFormLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQFormLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQFormLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQFormLayout::sipProtect_widgetEvent(QEvent *a0)
{
    QLayout::widgetEvent(a0);
}

void sipQFormLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QLayout::childEvent(a0) : childEvent(a0));
}

void sipQFormLayout::sipProtect_addChildLayout(QLayout *a0)
{
    QLayout::addChildLayout(a0);
}

void sipQFormLayout::sipProtect_addChildWidget(QWidget *a0)
{
    QLayout::addChildWidget(a0);
}

QRect sipQFormLayout::sipProtect_alignmentRect(const QRect& a0) const
{
    return QLayout::alignmentRect(a0);
}


extern "C" {static PyObject *meth_QFormLayout_sender(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 706 "sipQtGuiQFormLayout.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_receivers(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 748 "sipQtGuiQFormLayout.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_widgetEvent(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_widgetEvent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_widgetEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_addChildLayout(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addChildLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_addChildWidget(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addChildWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_alignmentRect(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        sipQFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QRect, &a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->sipProtect_alignmentRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_alignmentRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout::FieldGrowthPolicy a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_FieldGrowthPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFieldGrowthPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFieldGrowthPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QFormLayout::FieldGrowthPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fieldGrowthPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFormLayout_FieldGrowthPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_fieldGrowthPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout::RowWrapPolicy a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_RowWrapPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowWrapPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setRowWrapPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QFormLayout::RowWrapPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowWrapPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFormLayout_RowWrapPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowWrapPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLabelAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLabelAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_labelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->labelAlignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setFormAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFormAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFormAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_formAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_formAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->formAlignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_formAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setHorizontalSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalSpacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_horizontalSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setVerticalSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_verticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_verticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalSpacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_verticalSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_spacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_addRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QWidget * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget * a0;
        QLayout * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QLayout, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QWidget * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QLayout * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLayout, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QLayout * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget * a1;
        QWidget * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QWidget * a1;
        QLayout * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QLayout, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QWidget * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QLayout * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QLayout, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QWidget * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QLayout * a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QLayout, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_insertRow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QLayoutItem * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayoutItem, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItem(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QWidget * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidget(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setLayout(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QLayout * a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayout, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayout(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QFormLayout::ItemRole a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::itemAt(a0) : sipCpp->itemAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_itemAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_getItemPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getItemPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QFormLayout::ItemRole a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getItemPosition(a0,&a1,&a2);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getItemPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        int a1;
        QFormLayout::ItemRole a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getWidgetPosition(a0,&a1,&a2);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getWidgetPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout * a0;
        int a1;
        QFormLayout::ItemRole a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getLayoutPosition(a0,&a1,&a2);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getLayoutPosition, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_labelForField(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelForField(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->labelForField(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        QLayout * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->labelForField(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelForField, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QFormLayout::addItem(a0) : sipCpp->addItem(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::takeAt(a0) : sipCpp->takeAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_takeAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QFormLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setGeometry, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QFormLayout::minimumSize() : sipCpp->minimumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_minimumSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QFormLayout::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_sizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QFormLayout::invalidate() : sipCpp->invalidate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_invalidate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_hasHeightForWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_heightForWidth, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Orientations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QFormLayout::expandingDirections() : sipCpp->expandingDirections()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_expandingDirections, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::count() : sipCpp->count());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QFormLayout_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowCount, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFormLayout(void *, const sipTypeDef *);}
static void *cast_QFormLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFormLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QLayout)->ctd_cast((QLayout *)(QFormLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFormLayout(void *, int);}
static void release_QFormLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQFormLayout *>(sipCppV);
    else
        delete reinterpret_cast<QFormLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFormLayout(sipSimpleWrapper *);}
static void dealloc_QFormLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFormLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFormLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QFormLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QFormLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFormLayout *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFormLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFormLayout[] = {{270, 255, 1}};


static PyMethodDef methods_QFormLayout[] = {
    {SIP_MLNAME_CAST(sipName_addChildLayout), meth_QFormLayout_addChildLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildWidget), meth_QFormLayout_addChildWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QFormLayout_addItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addRow), meth_QFormLayout_addRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alignmentRect), meth_QFormLayout_alignmentRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QFormLayout_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QFormLayout_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QFormLayout_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QFormLayout_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QFormLayout_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QFormLayout_expandingDirections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fieldGrowthPolicy), meth_QFormLayout_fieldGrowthPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_formAlignment), meth_QFormLayout_formAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getItemPosition), meth_QFormLayout_getItemPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLayoutPosition), meth_QFormLayout_getLayoutPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getWidgetPosition), meth_QFormLayout_getWidgetPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QFormLayout_hasHeightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QFormLayout_heightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalSpacing), meth_QFormLayout_horizontalSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QFormLayout_insertRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QFormLayout_invalidate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QFormLayout_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_labelAlignment), meth_QFormLayout_labelAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_labelForField), meth_QFormLayout_labelForField, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QFormLayout_minimumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QFormLayout_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QFormLayout_rowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowWrapPolicy), meth_QFormLayout_rowWrapPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QFormLayout_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFieldGrowthPolicy), meth_QFormLayout_setFieldGrowthPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormAlignment), meth_QFormLayout_setFormAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QFormLayout_setGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalSpacing), meth_QFormLayout_setHorizontalSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QFormLayout_setItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLabelAlignment), meth_QFormLayout_setLabelAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayout), meth_QFormLayout_setLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRowWrapPolicy), meth_QFormLayout_setRowWrapPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QFormLayout_setSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalSpacing), meth_QFormLayout_setVerticalSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QFormLayout_setWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QFormLayout_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QFormLayout_spacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QFormLayout_takeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QFormLayout_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalSpacing), meth_QFormLayout_verticalSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetEvent), meth_QFormLayout_widgetEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QFormLayout[] = {
    {sipName_AllNonFixedFieldsGrow, QFormLayout::AllNonFixedFieldsGrow, 137},
    {sipName_DontWrapRows, QFormLayout::DontWrapRows, 139},
    {sipName_ExpandingFieldsGrow, QFormLayout::ExpandingFieldsGrow, 137},
    {sipName_FieldRole, QFormLayout::FieldRole, 138},
    {sipName_FieldsStayAtSizeHint, QFormLayout::FieldsStayAtSizeHint, 137},
    {sipName_LabelRole, QFormLayout::LabelRole, 138},
    {sipName_SpanningRole, QFormLayout::SpanningRole, 138},
    {sipName_WrapAllRows, QFormLayout::WrapAllRows, 139},
    {sipName_WrapLongRows, QFormLayout::WrapLongRows, 139},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QFormLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QFormLayout,
        {0}
    },
    {
        sipNameNr_QFormLayout,
        {0, 0, 1},
        46, methods_QFormLayout,
        9, enummembers_QFormLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QFormLayout,
    0,
    init_QFormLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFormLayout,
    0,
    0,
    0,
    release_QFormLayout,
    cast_QFormLayout,
    0,
    0,
    0
},
    &QFormLayout::staticMetaObject,
    0,
    0
};
