/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:17 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 336 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 39 "sipQtGuiQPolygonF.cpp"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 43 "sipQtGuiQPolygonF.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 46 "sipQtGuiQPolygonF.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQPolygonF.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 52 "sipQtGuiQPolygonF.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 55 "sipQtGuiQPolygonF.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 58 "sipQtGuiQPolygonF.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtGuiQPolygonF.cpp"


extern "C" {static PyObject *meth_QPolygonF_translate(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_toPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_toPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPolygon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygon(sipCpp->toPolygon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_toPolygon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_isClosed(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isClosed();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isClosed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundingRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_boundingRect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_containsPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_containsPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        Qt::FillRule a1;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, sipType_Qt_FillRule, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->containsPoint(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_containsPoint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_united(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->united(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_united, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->intersected(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_intersected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->subtracted(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_subtracted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_translated(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->translated(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->translated(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translated, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_append(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_append(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_append, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_at(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_at(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_at, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_clear(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_contains, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_count(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_count(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QPolygonF *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_data(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            void *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        int a1 = -1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_fill, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_first(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->first();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_first, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        int a1 = 0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_indexOf, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_insert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_insert(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF * a1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_insert, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isEmpty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_last(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->last();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_last, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        int a1 = -1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_lastIndexOf, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->mid(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_mid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_prepend(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_prepend(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_prepend, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_remove(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_remove(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
            sipName_count,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_remove, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_replace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_replace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF * a1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->replace(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_replace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_size(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QPolygonF_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->value(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        int a0;
        const QPointF * a1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->value(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_value, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;
        const QMatrix * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygonF, &a0, sipType_QMatrix, &a1))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPolygonF * a0;
        const QTransform * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static int slot_QPolygonF___contains__(PyObject *,PyObject *);}
static int slot_QPolygonF___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointF, &a0))
        {
            int sipRes = 0;

#line 524 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 1053 "sipQtGuiQPolygonF.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___contains__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygonF___delitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 476 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 1092 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 488 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
    for (i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
#line 1121 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___delitem__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygonF___setitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QPointF, &a1))
        {
            int sipIsErr = 0;

#line 433 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 1164 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const QPolygonF * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QPolygonF, &a1))
        {
            int sipIsErr = 0;

#line 445 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QPointF>::const_iterator it = a1->begin();

        for (i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 1209 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QPolygonF___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QPointF *sipRes = 0;
            int sipIsErr = 0;

#line 421 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QPointF(sipCpp->operator[]((int)idx));
#line 1250 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            QPolygonF *sipRes = 0;
            int sipIsErr = 0;

#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
    sipIsErr = 1;
else
{
    sipRes = new QPolygonF();

    for (i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 1284 "sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QPolygonF___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF * a0;
        const QPointF * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygonF, &a0, sipType_QPointF, &a1))
        {
            PyObject * sipRes = 0;

#line 413 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
    *a0 << *a1;

    sipRes = sipArg0;
    Py_INCREF(sipRes);
#line 1318 "sipQtGuiQPolygonF.cpp"

            return sipRes;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPolygonF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QPolygonF::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPolygonF,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPolygonF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPolygonF::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QPointF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPointF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QPolygonF::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___add__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___add__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            QPolygonF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPolygonF(sipCpp->QPolygonF::operator+(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,concat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QPolygonF::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPolygonF,sipSelf,sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *);}
static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *sipSelf)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1493 "sipQtGuiQPolygonF.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPolygonF(void *, const sipTypeDef *);}
static void *cast_QPolygonF(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPolygonF)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPolygonF(void *, int);}
static void release_QPolygonF(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QPolygonF *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QPolygonF(void *, SIP_SSIZE_T, const void *);}
static void assign_QPolygonF(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPolygonF *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPolygonF *>(sipSrc);
}


extern "C" {static void *array_QPolygonF(SIP_SSIZE_T);}
static void *array_QPolygonF(SIP_SSIZE_T sipNrElem)
{
    return new QPolygonF[sipNrElem];
}


extern "C" {static void *copy_QPolygonF(const void *, SIP_SSIZE_T);}
static void *copy_QPolygonF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPolygonF(reinterpret_cast<const QPolygonF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPolygonF(sipSimpleWrapper *);}
static void dealloc_QPolygonF(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPolygonF(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QPolygonF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QPolygonF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPolygonF *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPolygonF * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPolygonF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QVector<QPointF> * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVector_0100QPointF,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const QRectF * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QPolygon * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPolygonF(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPolygonF[] = {
    {(void *)slot_QPolygonF___mul__, mul_slot},
    {(void *)slot_QPolygonF___contains__, contains_slot},
    {(void *)slot_QPolygonF___delitem__, delitem_slot},
    {(void *)slot_QPolygonF___setitem__, setitem_slot},
    {(void *)slot_QPolygonF___getitem__, getitem_slot},
    {(void *)slot_QPolygonF___lshift__, lshift_slot},
    {(void *)slot_QPolygonF___eq__, eq_slot},
    {(void *)slot_QPolygonF___iadd__, iconcat_slot},
    {(void *)slot_QPolygonF___add__, concat_slot},
    {(void *)slot_QPolygonF___ne__, ne_slot},
    {(void *)slot_QPolygonF___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPolygonF[] = {
    {SIP_MLNAME_CAST(sipName_append), (PyCFunction)meth_QPolygonF_append, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_at), (PyCFunction)meth_QPolygonF_at, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPolygonF_boundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPolygonF_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), (PyCFunction)meth_QPolygonF_contains, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_containsPoint), meth_QPolygonF_containsPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), (PyCFunction)meth_QPolygonF_count, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QPolygonF_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fill), (PyCFunction)meth_QPolygonF_fill, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_first), meth_QPolygonF_first, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOf), (PyCFunction)meth_QPolygonF_indexOf, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_insert), (PyCFunction)meth_QPolygonF_insert, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPolygonF_intersected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isClosed), meth_QPolygonF_isClosed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPolygonF_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_last), meth_QPolygonF_last, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), (PyCFunction)meth_QPolygonF_lastIndexOf, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mid), (PyCFunction)meth_QPolygonF_mid, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_prepend), (PyCFunction)meth_QPolygonF_prepend, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), (PyCFunction)meth_QPolygonF_remove, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_replace), (PyCFunction)meth_QPolygonF_replace, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QPolygonF_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPolygonF_subtracted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPolygon), meth_QPolygonF_toPolygon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPolygonF_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPolygonF_translated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_united), meth_QPolygonF_united, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_value), (PyCFunction)meth_QPolygonF_value, METH_VARARGS|METH_KEYWORDS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPolygonF = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPolygonF,
        {0}
    },
    {
        sipNameNr_QPolygonF,
        {0, 0, 1},
        28, methods_QPolygonF,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPolygonF,
    init_QPolygonF,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPolygonF,
    assign_QPolygonF,
    array_QPolygonF,
    copy_QPolygonF,
    release_QPolygonF,
    cast_QPolygonF,
    0,
    0,
    0
},
    0,
    0,
    0
};
