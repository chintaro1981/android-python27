/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 39 "sipQtGuiQTextObjectInterface.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 45 "sipQtGuiQTextObjectInterface.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "sipQtGuiQTextObjectInterface.cpp"
#line 65 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 51 "sipQtGuiQTextObjectInterface.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "sipQtGuiQTextObjectInterface.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "sipQtGuiQTextObjectInterface.cpp"


class sipQTextObjectInterface : public QTextObjectInterface
{
public:
    sipQTextObjectInterface();
    sipQTextObjectInterface(const QTextObjectInterface&);
    virtual ~sipQTextObjectInterface();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSizeF intrinsicSize(QTextDocument *,int,const QTextFormat&);
    void drawObject(QPainter *,const QRectF&,QTextDocument *,int,const QTextFormat&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextObjectInterface(const sipQTextObjectInterface &);
    sipQTextObjectInterface &operator = (const sipQTextObjectInterface &);

    char sipPyMethods[2];
};

sipQTextObjectInterface::sipQTextObjectInterface(): QTextObjectInterface(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextObjectInterface::sipQTextObjectInterface(const QTextObjectInterface& a0): QTextObjectInterface(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextObjectInterface::~sipQTextObjectInterface()
{
    sipCommonDtor(sipPySelf);
}

QSizeF sipQTextObjectInterface::intrinsicSize(QTextDocument *a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QTextObjectInterface,sipName_intrinsicSize);

    if (!meth)
        return QSizeF();

    extern QSizeF sipVH_QtGui_229(sip_gilstate_t,PyObject *,QTextDocument *,int,const QTextFormat&);

    return sipVH_QtGui_229(sipGILState,meth,a0,a1,a2);
}

void sipQTextObjectInterface::drawObject(QPainter *a0,const QRectF& a1,QTextDocument *a2,int a3,const QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QTextObjectInterface,sipName_drawObject);

    if (!meth)
        return;

    extern void sipVH_QtGui_228(sip_gilstate_t,PyObject *,QPainter *,const QRectF&,QTextDocument *,int,const QTextFormat&);

    sipVH_QtGui_228(sipGILState,meth,a0,a1,a2,a3,a4);
}


extern "C" {static PyObject *meth_QTextObjectInterface_intrinsicSize(PyObject *, PyObject *);}
static PyObject *meth_QTextObjectInterface_intrinsicSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QTextDocument * a0;
        int a1;
        const QTextFormat * a2;
        QTextObjectInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ9", &sipSelf, sipType_QTextObjectInterface, &sipCpp, sipType_QTextDocument, &a0, &a1, sipType_QTextFormat, &a2))
        {
            QSizeF *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextObjectInterface, sipName_intrinsicSize);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->intrinsicSize(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObjectInterface, sipName_intrinsicSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextObjectInterface_drawObject(PyObject *, PyObject *);}
static PyObject *meth_QTextObjectInterface_drawObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter * a0;
        const QRectF * a1;
        QTextDocument * a2;
        int a3;
        const QTextFormat * a4;
        QTextObjectInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J8iJ9", &sipSelf, sipType_QTextObjectInterface, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextDocument, &a2, &a3, sipType_QTextFormat, &a4))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextObjectInterface, sipName_drawObject);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawObject(a0,*a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextObjectInterface, sipName_drawObject, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextObjectInterface(void *, const sipTypeDef *);}
static void *cast_QTextObjectInterface(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextObjectInterface)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextObjectInterface(void *, int);}
static void release_QTextObjectInterface(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextObjectInterface *>(sipCppV);
    else
        delete reinterpret_cast<QTextObjectInterface *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextObjectInterface(sipSimpleWrapper *);}
static void dealloc_QTextObjectInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextObjectInterface *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextObjectInterface(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTextObjectInterface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextObjectInterface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextObjectInterface *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextObjectInterface();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTextObjectInterface * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextObjectInterface, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextObjectInterface(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTextObjectInterface[] = {
    {SIP_MLNAME_CAST(sipName_drawObject), meth_QTextObjectInterface_drawObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intrinsicSize), meth_QTextObjectInterface_intrinsicSize, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextObjectInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QTextObjectInterface,
        {0}
    },
    {
        sipNameNr_QTextObjectInterface,
        {0, 0, 1},
        2, methods_QTextObjectInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QTextObjectInterface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextObjectInterface,
    0,
    0,
    0,
    release_QTextObjectInterface,
    cast_QTextObjectInterface,
    0,
    0,
    0
},
    0,
    0,
    0
};
