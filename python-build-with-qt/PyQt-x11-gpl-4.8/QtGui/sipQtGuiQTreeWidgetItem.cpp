/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 39 "sipQtGuiQTreeWidgetItem.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 43 "sipQtGuiQTreeWidgetItem.cpp"
#line 208 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtreewidget.sip"
#include <qtreewidget.h>
#line 46 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 52 "sipQtGuiQTreeWidgetItem.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 58 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 61 "sipQtGuiQTreeWidgetItem.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 64 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 67 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtGuiQTreeWidgetItem.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 73 "sipQtGuiQTreeWidgetItem.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76 "sipQtGuiQTreeWidgetItem.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 79 "sipQtGuiQTreeWidgetItem.cpp"


class sipQTreeWidgetItem : public QTreeWidgetItem
{
public:
    sipQTreeWidgetItem(int);
    sipQTreeWidgetItem(const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidget *,int);
    sipQTreeWidgetItem(QTreeWidget *,const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidget *,QTreeWidgetItem *,int);
    sipQTreeWidgetItem(QTreeWidgetItem *,int);
    sipQTreeWidgetItem(QTreeWidgetItem *,const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidgetItem *,QTreeWidgetItem *,int);
    sipQTreeWidgetItem(const QTreeWidgetItem&);
    virtual ~sipQTreeWidgetItem();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_emitDataChanged();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QTreeWidgetItem * clone() const;
    QVariant data(int,int) const;
    void setData(int,int,const QVariant&);
    bool operator<(const QTreeWidgetItem&) const;
    void read(QDataStream&);
    void write(QDataStream&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidgetItem(const sipQTreeWidgetItem &);
    sipQTreeWidgetItem &operator = (const sipQTreeWidgetItem &);

    char sipPyMethods[6];
};

sipQTreeWidgetItem::sipQTreeWidgetItem(int a0): QTreeWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const QStringList& a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget *a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget *a0,const QStringList& a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget *a0,QTreeWidgetItem *a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem *a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem *a0,const QStringList& a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem *a0,QTreeWidgetItem *a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const QTreeWidgetItem& a0): QTreeWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::~sipQTreeWidgetItem()
{
    sipCommonDtor(sipPySelf);
}

QTreeWidgetItem * sipQTreeWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_clone);

    if (!meth)
        return QTreeWidgetItem::clone();

    extern QTreeWidgetItem * sipVH_QtGui_44(sip_gilstate_t,PyObject *);

    return sipVH_QtGui_44(sipGILState,meth);
}

QVariant sipQTreeWidgetItem::data(int a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QTreeWidgetItem::data(a0,a1);

    extern QVariant sipVH_QtGui_43(sip_gilstate_t,PyObject *,int,int);

    return sipVH_QtGui_43(sipGILState,meth,a0,a1);
}

void sipQTreeWidgetItem::setData(int a0,int a1,const QVariant& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setData);

    if (!meth)
    {
        QTreeWidgetItem::setData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t,PyObject *,int,int,const QVariant&);

    sipVH_QtGui_42(sipGILState,meth,a0,a1,a2);
}

bool sipQTreeWidgetItem::operator<(const QTreeWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName___lt__);

    if (!meth)
        return QTreeWidgetItem::operator<(a0);

    extern bool sipVH_QtGui_41(sip_gilstate_t,PyObject *,const QTreeWidgetItem&);

    return sipVH_QtGui_41(sipGILState,meth,a0);
}

void sipQTreeWidgetItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_read);

    if (!meth)
    {
        QTreeWidgetItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_40(sip_gilstate_t,PyObject *,QDataStream&);

    sipVH_QtGui_40(sipGILState,meth,a0);
}

void sipQTreeWidgetItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_write);

    if (!meth)
    {
        QTreeWidgetItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_40(sip_gilstate_t,PyObject *,QDataStream&);

    sipVH_QtGui_40(sipGILState,meth,a0);
}

void sipQTreeWidgetItem::sipProtect_emitDataChanged()
{
    QTreeWidgetItem::emitDataChanged();
}


extern "C" {static PyObject *meth_QTreeWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidgetItem::clone() : sipCpp->clone());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_clone, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->treeWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_treeWidget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_flags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_text, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->statusTip(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_statusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toolTip(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_toolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->whatsThis(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_whatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textAlignment(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_textAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextAlignment(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setTextAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->backgroundColor(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_backgroundColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QColor * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundColor(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setBackgroundColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->textColor(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_textColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QColor * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextColor(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setTextColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Qt::CheckState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->checkState(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_checkState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::CheckState a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_CheckState, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckState(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setCheckState, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTreeWidgetItem::data(a0,a1) : sipCpp->data(a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QVariant * a2;
        int a2State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1, sipType_QVariant,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::setData(a0,a1,*a2) : sipCpp->setData(a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_read, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_write, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_parent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_child(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->child(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_child, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_childCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->childCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_columnCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_addChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addChild(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem * a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertChild(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QTreeWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeChild(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemFlags * a0;
        int a0State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFlags, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QIcon * a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setIcon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusTip(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setStatusTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setToolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhatsThis(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setWhatsThis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QFont * a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QFont, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFont, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOfChild(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_indexOfChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHint(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSize * a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QSize, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeHint(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem *> * a0;
        int a0State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addChildren(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChildren, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem *> * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertChildren(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QTreeWidgetItem *> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChildren, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QList<QTreeWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTreeWidgetItem *>(sipCpp->takeChildren());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChildren, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_background, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QBrush * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setBackground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foreground(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_foreground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QBrush * a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForeground(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setForeground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortChildren(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sortChildren, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelected(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelected();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isSelected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHidden(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpanded(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setExpanded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isExpanded();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isExpanded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem::ChildIndicatorPolicy a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem_ChildIndicatorPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChildIndicatorPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setChildIndicatorPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem::ChildIndicatorPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->childIndicatorPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTreeWidgetItem_ChildIndicatorPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childIndicatorPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem * a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeChild(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_removeChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstColumnSpanned(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFirstColumnSpanned, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstColumnSpanned();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isFirstColumnSpanned, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDisabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setDisabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDisabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isDisabled, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_emitDataChanged();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_emitDataChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QTreeWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTreeWidgetItem *sipCpp = reinterpret_cast<QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QTreeWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QTreeWidgetItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTreeWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTreeWidgetItem *sipCpp = reinterpret_cast<QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTreeWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QTreeWidgetItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidgetItem(void *, const sipTypeDef *);}
static void *cast_QTreeWidgetItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTreeWidgetItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidgetItem(void *, int);}
static void release_QTreeWidgetItem(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast<QTreeWidgetItem *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeWidgetItem(sipSimpleWrapper *);}
static void dealloc_QTreeWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidgetItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QTreeWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTreeWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidgetItem *sipCpp = 0;

    {
        int a0 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStringList * a0;
        int a0State = 0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QStringList,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget * a0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidget, &a0, sipOwner, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget * a0;
        const QStringList * a1;
        int a1State = 0;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget * a0;
        QTreeWidgetItem * a1;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem * a0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidgetItem, &a0, sipOwner, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem * a0;
        const QStringList * a1;
        int a1State = 0;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem * a0;
        QTreeWidgetItem * a1;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTreeWidgetItem * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTreeWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeWidgetItem(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTreeWidgetItem[] = {
    {(void *)slot_QTreeWidgetItem___ge__, ge_slot},
    {(void *)slot_QTreeWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTreeWidgetItem[] = {
    {SIP_MLNAME_CAST(sipName_addChild), meth_QTreeWidgetItem_addChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildren), meth_QTreeWidgetItem_addChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_background), meth_QTreeWidgetItem_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QTreeWidgetItem_backgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QTreeWidgetItem_checkState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_child), meth_QTreeWidgetItem_child, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childCount), meth_QTreeWidgetItem_childCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childIndicatorPolicy), meth_QTreeWidgetItem_childIndicatorPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clone), meth_QTreeWidgetItem_clone, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidgetItem_columnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QTreeWidgetItem_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_emitDataChanged), meth_QTreeWidgetItem_emitDataChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTreeWidgetItem_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QTreeWidgetItem_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTreeWidgetItem_foreground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QTreeWidgetItem_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOfChild), meth_QTreeWidgetItem_indexOfChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertChild), meth_QTreeWidgetItem_insertChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertChildren), meth_QTreeWidgetItem_insertChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDisabled), meth_QTreeWidgetItem_isDisabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isExpanded), meth_QTreeWidgetItem_isExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFirstColumnSpanned), meth_QTreeWidgetItem_isFirstColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QTreeWidgetItem_isHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QTreeWidgetItem_isSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parent), meth_QTreeWidgetItem_parent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QTreeWidgetItem_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeChild), meth_QTreeWidgetItem_removeChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTreeWidgetItem_setBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QTreeWidgetItem_setBackgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QTreeWidgetItem_setCheckState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setChildIndicatorPolicy), meth_QTreeWidgetItem_setChildIndicatorPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QTreeWidgetItem_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDisabled), meth_QTreeWidgetItem_setDisabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setExpanded), meth_QTreeWidgetItem_setExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFirstColumnSpanned), meth_QTreeWidgetItem_setFirstColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTreeWidgetItem_setFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTreeWidgetItem_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTreeWidgetItem_setForeground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_QTreeWidgetItem_setHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QTreeWidgetItem_setIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelected), meth_QTreeWidgetItem_setSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QTreeWidgetItem_setSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QTreeWidgetItem_setStatusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTreeWidgetItem_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QTreeWidgetItem_setTextAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QTreeWidgetItem_setTextColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTreeWidgetItem_setToolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QTreeWidgetItem_setWhatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTreeWidgetItem_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortChildren), meth_QTreeWidgetItem_sortChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QTreeWidgetItem_statusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeChild), meth_QTreeWidgetItem_takeChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeChildren), meth_QTreeWidgetItem_takeChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QTreeWidgetItem_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QTreeWidgetItem_textAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QTreeWidgetItem_textColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTreeWidgetItem_toolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_treeWidget), meth_QTreeWidgetItem_treeWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QTreeWidgetItem_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QTreeWidgetItem_whatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_QTreeWidgetItem_write, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTreeWidgetItem[] = {
    {sipName_DontShowIndicator, QTreeWidgetItem::DontShowIndicator, 716},
    {sipName_DontShowIndicatorWhenChildless, QTreeWidgetItem::DontShowIndicatorWhenChildless, 716},
    {sipName_ShowIndicator, QTreeWidgetItem::ShowIndicator, 716},
    {sipName_Type, QTreeWidgetItem::Type, 717},
    {sipName_UserType, QTreeWidgetItem::UserType, 717},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeWidgetItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTreeWidgetItem,
        {0}
    },
    {
        sipNameNr_QTreeWidgetItem,
        {0, 0, 1},
        61, methods_QTreeWidgetItem,
        5, enummembers_QTreeWidgetItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QTreeWidgetItem,
    init_QTreeWidgetItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidgetItem,
    0,
    0,
    0,
    release_QTreeWidgetItem,
    cast_QTreeWidgetItem,
    0,
    0,
    0
},
    0,
    0,
    0
};
