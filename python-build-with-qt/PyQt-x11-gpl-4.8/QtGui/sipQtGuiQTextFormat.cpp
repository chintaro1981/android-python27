/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "sipQtGuiQTextFormat.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "sipQtGuiQTextFormat.cpp"
#line 653 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 46 "sipQtGuiQTextFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 49 "sipQtGuiQTextFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtGuiQTextFormat.cpp"
#line 510 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 55 "sipQtGuiQTextFormat.cpp"
#line 527 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 58 "sipQtGuiQTextFormat.cpp"
#line 620 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 61 "sipQtGuiQTextFormat.cpp"
#line 478 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 64 "sipQtGuiQTextFormat.cpp"
#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 67 "sipQtGuiQTextFormat.cpp"
#line 439 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 70 "sipQtGuiQTextFormat.cpp"
#line 149 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 73 "sipQtGuiQTextFormat.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76 "sipQtGuiQTextFormat.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 79 "sipQtGuiQTextFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 82 "sipQtGuiQTextFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 85 "sipQtGuiQTextFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 88 "sipQtGuiQTextFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtGuiQTextFormat.cpp"


extern "C" {static PyObject *meth_QTextFormat_merge(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat * a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->merge(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_merge, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_type(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_objectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->objectIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setObjectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setObjectIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_property(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->property(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_property, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVariant * a1;
        int a1State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector<QTextLength> * a1;
        int a1State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVector_0100QTextLength,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector<QTextLength> *>(a1),sipType_QVector_0100QTextLength,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_clearProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearProperty(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasProperty(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_hasProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_boolProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_boolProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->boolProperty(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_boolProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_intProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_intProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->intProperty(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_intProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_doubleProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_doubleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doubleProperty(a0);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_doubleProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_stringProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_stringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->stringProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_stringProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_colorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_colorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->colorProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_colorProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_penProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_penProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QPen *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPen(sipCpp->penProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_penProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_brushProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_brushProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->brushProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_brushProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_lengthProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QTextLength *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextLength(sipCpp->lengthProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVector<QTextLength> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector<QTextLength>(sipCpp->lengthVectorProperty(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthVectorProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_properties(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QMap<int,QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<int,QVariant>(sipCpp->properties());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_properties, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_objectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->objectType();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCharFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isCharFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBlockFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isBlockFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isListFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isListFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFrameFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isFrameFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isImageFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isImageFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTableFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextBlockFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlockFormat(sipCpp->toBlockFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toBlockFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->toCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toCharFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextListFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextListFormat(sipCpp->toListFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toListFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextTableFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableFormat(sipCpp->toTableFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextFrameFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextFrameFormat(sipCpp->toFrameFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toFrameFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextImageFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextImageFormat(sipCpp->toImageFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextImageFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toImageFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setLayoutDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layoutDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_layoutDirection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setBackground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_background(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_background, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_clearBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearBackground();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearBackground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush * a0;
        int a0State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForeground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setForeground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foreground());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_foreground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_clearForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearForeground();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearForeground, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_setObjectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setObjectType(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->propertyCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_propertyCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTableCellFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableCellFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextTableCellFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextTableCellFormat(sipCpp->toTableCellFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextTableCellFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableCellFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QTextFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextFormat *sipCpp = reinterpret_cast<QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextFormat * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextFormat::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTextFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextFormat *sipCpp = reinterpret_cast<QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextFormat * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextFormat::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTextFormat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextFormat(void *, const sipTypeDef *);}
static void *cast_QTextFormat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextFormat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFormat(void *, int);}
static void release_QTextFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextFormat *>(sipSrc);
}


extern "C" {static void *array_QTextFormat(SIP_SSIZE_T);}
static void *array_QTextFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextFormat[sipNrElem];
}


extern "C" {static void *copy_QTextFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextFormat(reinterpret_cast<const QTextFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFormat(sipSimpleWrapper *);}
static void dealloc_QTextFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextFormat(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextFormat * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QVariant * a0;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_QVariant,&a0, &a0State))
        {
#line 280 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
        sipCpp = new QTextFormat(qVariantValue<QTextFormat>(*a0));
#line 1492 "sipQtGuiQTextFormat.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFormat[] = {
    {(void *)slot_QTextFormat___ne__, ne_slot},
    {(void *)slot_QTextFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFormat[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QTextFormat_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boolProperty), meth_QTextFormat_boolProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_brushProperty), meth_QTextFormat_brushProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearBackground), meth_QTextFormat_clearBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearForeground), meth_QTextFormat_clearForeground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearProperty), meth_QTextFormat_clearProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_colorProperty), meth_QTextFormat_colorProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doubleProperty), meth_QTextFormat_doubleProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTextFormat_foreground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasProperty), meth_QTextFormat_hasProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intProperty), meth_QTextFormat_intProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isBlockFormat), meth_QTextFormat_isBlockFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCharFormat), meth_QTextFormat_isCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFrameFormat), meth_QTextFormat_isFrameFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isImageFormat), meth_QTextFormat_isImageFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isListFormat), meth_QTextFormat_isListFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTableCellFormat), meth_QTextFormat_isTableCellFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTableFormat), meth_QTextFormat_isTableFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFormat_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QTextFormat_layoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lengthProperty), meth_QTextFormat_lengthProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lengthVectorProperty), meth_QTextFormat_lengthVectorProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_merge), meth_QTextFormat_merge, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_objectIndex), meth_QTextFormat_objectIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_objectType), meth_QTextFormat_objectType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_penProperty), meth_QTextFormat_penProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_properties), meth_QTextFormat_properties, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_property), meth_QTextFormat_property, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QTextFormat_propertyCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTextFormat_setBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTextFormat_setForeground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QTextFormat_setLayoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setObjectIndex), meth_QTextFormat_setObjectIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setObjectType), meth_QTextFormat_setObjectType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QTextFormat_setProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stringProperty), meth_QTextFormat_stringProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toBlockFormat), meth_QTextFormat_toBlockFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCharFormat), meth_QTextFormat_toCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFrameFormat), meth_QTextFormat_toFrameFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toImageFormat), meth_QTextFormat_toImageFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toListFormat), meth_QTextFormat_toListFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTableCellFormat), meth_QTextFormat_toTableCellFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTableFormat), meth_QTextFormat_toTableFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextFormat_type, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextFormat[] = {
    {sipName_AnchorHref, QTextFormat::AnchorHref, 667},
    {sipName_AnchorName, QTextFormat::AnchorName, 667},
    {sipName_BackgroundBrush, QTextFormat::BackgroundBrush, 667},
    {sipName_BackgroundImageUrl, QTextFormat::BackgroundImageUrl, 667},
    {sipName_BlockAlignment, QTextFormat::BlockAlignment, 667},
    {sipName_BlockBottomMargin, QTextFormat::BlockBottomMargin, 667},
    {sipName_BlockFormat, QTextFormat::BlockFormat, 663},
    {sipName_BlockIndent, QTextFormat::BlockIndent, 667},
    {sipName_BlockLeftMargin, QTextFormat::BlockLeftMargin, 667},
    {sipName_BlockNonBreakableLines, QTextFormat::BlockNonBreakableLines, 667},
    {sipName_BlockRightMargin, QTextFormat::BlockRightMargin, 667},
    {sipName_BlockTopMargin, QTextFormat::BlockTopMargin, 667},
    {sipName_BlockTrailingHorizontalRulerWidth, QTextFormat::BlockTrailingHorizontalRulerWidth, 667},
    {sipName_CharFormat, QTextFormat::CharFormat, 663},
    {sipName_CssFloat, QTextFormat::CssFloat, 667},
    {sipName_FirstFontProperty, QTextFormat::FirstFontProperty, 667},
    {sipName_FontCapitalization, QTextFormat::FontCapitalization, 667},
    {sipName_FontFamily, QTextFormat::FontFamily, 667},
    {sipName_FontFixedPitch, QTextFormat::FontFixedPitch, 667},
    {sipName_FontItalic, QTextFormat::FontItalic, 667},
    {sipName_FontKerning, QTextFormat::FontKerning, 667},
    {sipName_FontLetterSpacing, QTextFormat::FontLetterSpacing, 667},
    {sipName_FontOverline, QTextFormat::FontOverline, 667},
    {sipName_FontPixelSize, QTextFormat::FontPixelSize, 667},
    {sipName_FontPointSize, QTextFormat::FontPointSize, 667},
    {sipName_FontSizeAdjustment, QTextFormat::FontSizeAdjustment, 667},
    {sipName_FontSizeIncrement, QTextFormat::FontSizeIncrement, 667},
    {sipName_FontStrikeOut, QTextFormat::FontStrikeOut, 667},
    {sipName_FontStyleHint, QTextFormat::FontStyleHint, 667},
    {sipName_FontStyleStrategy, QTextFormat::FontStyleStrategy, 667},
    {sipName_FontUnderline, QTextFormat::FontUnderline, 667},
    {sipName_FontWeight, QTextFormat::FontWeight, 667},
    {sipName_FontWordSpacing, QTextFormat::FontWordSpacing, 667},
    {sipName_ForegroundBrush, QTextFormat::ForegroundBrush, 667},
    {sipName_FrameBorder, QTextFormat::FrameBorder, 667},
    {sipName_FrameBorderBrush, QTextFormat::FrameBorderBrush, 667},
    {sipName_FrameBorderStyle, QTextFormat::FrameBorderStyle, 667},
    {sipName_FrameBottomMargin, QTextFormat::FrameBottomMargin, 667},
    {sipName_FrameFormat, QTextFormat::FrameFormat, 663},
    {sipName_FrameHeight, QTextFormat::FrameHeight, 667},
    {sipName_FrameLeftMargin, QTextFormat::FrameLeftMargin, 667},
    {sipName_FrameMargin, QTextFormat::FrameMargin, 667},
    {sipName_FramePadding, QTextFormat::FramePadding, 667},
    {sipName_FrameRightMargin, QTextFormat::FrameRightMargin, 667},
    {sipName_FrameTopMargin, QTextFormat::FrameTopMargin, 667},
    {sipName_FrameWidth, QTextFormat::FrameWidth, 667},
    {sipName_FullWidthSelection, QTextFormat::FullWidthSelection, 667},
    {sipName_ImageHeight, QTextFormat::ImageHeight, 667},
    {sipName_ImageName, QTextFormat::ImageName, 667},
    {sipName_ImageObject, QTextFormat::ImageObject, 664},
    {sipName_ImageWidth, QTextFormat::ImageWidth, 667},
    {sipName_InvalidFormat, QTextFormat::InvalidFormat, 663},
    {sipName_IsAnchor, QTextFormat::IsAnchor, 667},
    {sipName_LastFontProperty, QTextFormat::LastFontProperty, 667},
    {sipName_LayoutDirection, QTextFormat::LayoutDirection, 667},
    {sipName_ListFormat, QTextFormat::ListFormat, 663},
    {sipName_ListIndent, QTextFormat::ListIndent, 667},
    {sipName_ListStyle, QTextFormat::ListStyle, 667},
    {sipName_NoObject, QTextFormat::NoObject, 664},
    {sipName_ObjectIndex, QTextFormat::ObjectIndex, 667},
    {sipName_ObjectType, QTextFormat::ObjectType, 667},
    {sipName_OutlinePen, QTextFormat::OutlinePen, 667},
    {sipName_PageBreakPolicy, QTextFormat::PageBreakPolicy, 667},
    {sipName_PageBreak_AlwaysAfter, QTextFormat::PageBreak_AlwaysAfter, 665},
    {sipName_PageBreak_AlwaysBefore, QTextFormat::PageBreak_AlwaysBefore, 665},
    {sipName_PageBreak_Auto, QTextFormat::PageBreak_Auto, 665},
    {sipName_TabPositions, QTextFormat::TabPositions, 667},
    {sipName_TableCellBottomPadding, QTextFormat::TableCellBottomPadding, 667},
    {sipName_TableCellColumnSpan, QTextFormat::TableCellColumnSpan, 667},
    {sipName_TableCellLeftPadding, QTextFormat::TableCellLeftPadding, 667},
    {sipName_TableCellObject, QTextFormat::TableCellObject, 664},
    {sipName_TableCellPadding, QTextFormat::TableCellPadding, 667},
    {sipName_TableCellRightPadding, QTextFormat::TableCellRightPadding, 667},
    {sipName_TableCellRowSpan, QTextFormat::TableCellRowSpan, 667},
    {sipName_TableCellSpacing, QTextFormat::TableCellSpacing, 667},
    {sipName_TableCellTopPadding, QTextFormat::TableCellTopPadding, 667},
    {sipName_TableColumnWidthConstraints, QTextFormat::TableColumnWidthConstraints, 667},
    {sipName_TableColumns, QTextFormat::TableColumns, 667},
    {sipName_TableFormat, QTextFormat::TableFormat, 663},
    {sipName_TableHeaderRowCount, QTextFormat::TableHeaderRowCount, 667},
    {sipName_TableObject, QTextFormat::TableObject, 664},
    {sipName_TextIndent, QTextFormat::TextIndent, 667},
    {sipName_TextOutline, QTextFormat::TextOutline, 667},
    {sipName_TextToolTip, QTextFormat::TextToolTip, 667},
    {sipName_TextUnderlineColor, QTextFormat::TextUnderlineColor, 667},
    {sipName_TextUnderlineStyle, QTextFormat::TextUnderlineStyle, 667},
    {sipName_TextVerticalAlignment, QTextFormat::TextVerticalAlignment, 667},
    {sipName_UserFormat, QTextFormat::UserFormat, 663},
    {sipName_UserObject, QTextFormat::UserObject, 664},
    {sipName_UserProperty, QTextFormat::UserProperty, 667},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextFormat,
        {0}
    },
    {
        sipNameNr_QTextFormat,
        {0, 0, 1},
        44, methods_QTextFormat,
        90, enummembers_QTextFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTextFormat,
    init_QTextFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextFormat,
    assign_QTextFormat,
    array_QTextFormat,
    copy_QTextFormat,
    release_QTextFormat,
    cast_QTextFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};
