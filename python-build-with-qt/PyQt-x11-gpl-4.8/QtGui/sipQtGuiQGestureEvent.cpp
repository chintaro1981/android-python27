/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:19 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 777 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "sipQtGuiQGestureEvent.cpp"

#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 43 "sipQtGuiQGestureEvent.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 46 "sipQtGuiQGestureEvent.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 49 "sipQtGuiQGestureEvent.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 52 "sipQtGuiQGestureEvent.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtGuiQGestureEvent.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtGuiQGestureEvent.cpp"


class sipQGestureEvent : public QGestureEvent
{
public:
    sipQGestureEvent(const QList<QGesture *>&);
    sipQGestureEvent(const QGestureEvent&);
    ~sipQGestureEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGestureEvent(const sipQGestureEvent &);
    sipQGestureEvent &operator = (const sipQGestureEvent &);
};

sipQGestureEvent::sipQGestureEvent(const QList<QGesture *>& a0): QGestureEvent(a0), sipPySelf(0)
{
}

sipQGestureEvent::sipQGestureEvent(const QGestureEvent& a0): QGestureEvent(a0), sipPySelf(0)
{
}

sipQGestureEvent::~sipQGestureEvent()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_QGestureEvent_gestures(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_gestures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            QList<QGesture *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGesture *>(sipCpp->gestures());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGesture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_gestures, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_gesture(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_gesture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GestureType a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            QGesture *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gesture(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGesture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_gesture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_activeGestures(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_activeGestures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            QList<QGesture *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGesture *>(sipCpp->activeGestures());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGesture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_activeGestures, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_canceledGestures(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_canceledGestures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            QList<QGesture *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QGesture *>(sipCpp->canceledGestures());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGesture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_canceledGestures, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_setAccepted(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_setAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGestureEvent, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccepted(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGesture * a0;
        bool a1;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_QGesture, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccepted(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::GestureType a0;
        bool a1;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_Qt_GestureType, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccepted(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_setAccepted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_isAccepted(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_isAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAccepted();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QGesture * a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_QGesture, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAccepted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        Qt::GestureType a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAccepted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_isAccepted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_accept(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->accept();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGesture * a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_QGesture, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->accept(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::GestureType a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->accept(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_accept, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_ignore(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignore();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGesture * a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_QGesture, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignore(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::GestureType a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignore(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_ignore, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_widget(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGestureEvent, &sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_widget, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGestureEvent_mapToGraphicsScene(PyObject *, PyObject *);}
static PyObject *meth_QGestureEvent_mapToGraphicsScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF * a0;
        QGestureEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGestureEvent, &sipCpp, sipType_QPointF, &a0))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->mapToGraphicsScene(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGestureEvent, sipName_mapToGraphicsScene, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGestureEvent(void *, const sipTypeDef *);}
static void *cast_QGestureEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGestureEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QEvent)->ctd_cast((QEvent *)(QGestureEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGestureEvent(void *, int);}
static void release_QGestureEvent(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGestureEvent *>(sipCppV);
    else
        delete reinterpret_cast<QGestureEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGestureEvent(sipSimpleWrapper *);}
static void dealloc_QGestureEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGestureEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGestureEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QGestureEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGestureEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGestureEvent *sipCpp = 0;

    {
        const QList<QGesture *> * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QList_0101QGesture,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGestureEvent(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QGesture *> *>(a0),sipType_QList_0101QGesture,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QGestureEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGestureEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGestureEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGestureEvent[] = {{58, 0, 1}};


static PyMethodDef methods_QGestureEvent[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QGestureEvent_accept, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activeGestures), meth_QGestureEvent_activeGestures, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canceledGestures), meth_QGestureEvent_canceledGestures, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_gesture), meth_QGestureEvent_gesture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_gestures), meth_QGestureEvent_gestures, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QGestureEvent_ignore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAccepted), meth_QGestureEvent_isAccepted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mapToGraphicsScene), meth_QGestureEvent_mapToGraphicsScene, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccepted), meth_QGestureEvent_setAccepted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widget), meth_QGestureEvent_widget, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QGestureEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGestureEvent,
        {0}
    },
    {
        sipNameNr_QGestureEvent,
        {0, 0, 1},
        10, methods_QGestureEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGestureEvent,
    0,
    init_QGestureEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGestureEvent,
    0,
    0,
    0,
    release_QGestureEvent,
    cast_QGestureEvent,
    0,
    0,
    0
},
    0,
    0,
    0
};
