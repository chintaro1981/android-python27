/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:16 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 309 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "sipQtGuiQTextCharFormat.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 43 "sipQtGuiQTextCharFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 46 "sipQtGuiQTextCharFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQTextCharFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 52 "sipQtGuiQTextCharFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 55 "sipQtGuiQTextCharFormat.cpp"
#line 653 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 58 "sipQtGuiQTextCharFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 61 "sipQtGuiQTextCharFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQTextCharFormat.cpp"
#line 70 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 67 "sipQtGuiQTextCharFormat.cpp"
#line 510 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 70 "sipQtGuiQTextCharFormat.cpp"
#line 527 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 73 "sipQtGuiQTextCharFormat.cpp"
#line 620 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 76 "sipQtGuiQTextCharFormat.cpp"
#line 478 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 79 "sipQtGuiQTextCharFormat.cpp"
#line 439 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 82 "sipQtGuiQTextCharFormat.cpp"
#line 149 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 85 "sipQtGuiQTextCharFormat.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 88 "sipQtGuiQTextCharFormat.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "sipQtGuiQTextCharFormat.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 94 "sipQtGuiQTextCharFormat.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 97 "sipQtGuiQTextCharFormat.cpp"


extern "C" {static PyObject *meth_QTextCharFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont * a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFont, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_font(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFamily(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFamily, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fontFamily());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFamily, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontPointSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontPointSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontPointSize();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontPointSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontWeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWeight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontWeight();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWeight, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontItalic(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontItalic, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontItalic();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontItalic, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontUnderline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontUnderline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontUnderline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontUnderline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontOverline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontOverline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontOverline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontOverline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontStrikeOut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStrikeOut, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontStrikeOut();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStrikeOut, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnderlineColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_underlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->underlineColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineColor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFixedPitch(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFixedPitch, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontFixedPitch();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFixedPitch, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat::VerticalAlignment a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_VerticalAlignment, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalAlignment(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setVerticalAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QTextCharFormat::VerticalAlignment sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalAlignment();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextCharFormat_VerticalAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_verticalAlignment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnchor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_isAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAnchor();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isAnchor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnchorHref(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorHref, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_anchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->anchorHref());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorHref, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setAnchorName(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnchorName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_anchorName(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->anchorName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tableCellRowSpan();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellRowSpan, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tableCellColumnSpan();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellColumnSpan, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTableCellRowSpan(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellRowSpan, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTableCellColumnSpan(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellColumnSpan, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextOutline(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTextOutline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_textOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_textOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QPen *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPen(sipCpp->textOutline());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_textOutline, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat::UnderlineStyle a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_UnderlineStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUnderlineStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineStyle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QTextCharFormat::UnderlineStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->underlineStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextCharFormat_UnderlineStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineStyle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setToolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toolTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_toolTip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList * a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnchorNames(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorNames, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_anchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->anchorNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorNames, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::Capitalization a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontCapitalization(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontCapitalization, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::Capitalization sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontCapitalization();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_Capitalization);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontCapitalization, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontLetterSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontLetterSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontWordSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWordSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontWordSpacing();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWordSpacing, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleHint a0;
        QFont::StyleStrategy a1 = QFont::PreferDefault;
        QTextCharFormat *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontStyleHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleStrategy a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontStyleStrategy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleStrategy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::StyleHint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontStyleHint();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::StyleStrategy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontStyleStrategy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleStrategy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontKerning(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontKerning, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCharFormat_fontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontKerning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontKerning, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextCharFormat(void *, const sipTypeDef *);}
static void *cast_QTextCharFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextCharFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFormat)->ctd_cast((QTextFormat *)(QTextCharFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCharFormat(void *, int);}
static void release_QTextCharFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextCharFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextCharFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextCharFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextCharFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextCharFormat *>(sipSrc);
}


extern "C" {static void *array_QTextCharFormat(SIP_SSIZE_T);}
static void *array_QTextCharFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextCharFormat[sipNrElem];
}


extern "C" {static void *copy_QTextCharFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextCharFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextCharFormat(reinterpret_cast<const QTextCharFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCharFormat(sipSimpleWrapper *);}
static void dealloc_QTextCharFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextCharFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QTextCharFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QTextCharFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextCharFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCharFormat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QTextCharFormat * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCharFormat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextCharFormat[] = {{662, 255, 1}};


static PyMethodDef methods_QTextCharFormat[] = {
    {SIP_MLNAME_CAST(sipName_anchorHref), meth_QTextCharFormat_anchorHref, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_anchorName), meth_QTextCharFormat_anchorName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_anchorNames), meth_QTextCharFormat_anchorNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextCharFormat_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontCapitalization), meth_QTextCharFormat_fontCapitalization, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextCharFormat_fontFamily, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontFixedPitch), meth_QTextCharFormat_fontFixedPitch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextCharFormat_fontItalic, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontKerning), meth_QTextCharFormat_fontKerning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontLetterSpacing), meth_QTextCharFormat_fontLetterSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontOverline), meth_QTextCharFormat_fontOverline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextCharFormat_fontPointSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontStrikeOut), meth_QTextCharFormat_fontStrikeOut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontStyleHint), meth_QTextCharFormat_fontStyleHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontStyleStrategy), meth_QTextCharFormat_fontStyleStrategy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextCharFormat_fontUnderline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextCharFormat_fontWeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontWordSpacing), meth_QTextCharFormat_fontWordSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAnchor), meth_QTextCharFormat_isAnchor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextCharFormat_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnchor), meth_QTextCharFormat_setAnchor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnchorHref), meth_QTextCharFormat_setAnchorHref, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnchorName), meth_QTextCharFormat_setAnchorName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnchorNames), meth_QTextCharFormat_setAnchorNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextCharFormat_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontCapitalization), meth_QTextCharFormat_setFontCapitalization, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextCharFormat_setFontFamily, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontFixedPitch), meth_QTextCharFormat_setFontFixedPitch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextCharFormat_setFontItalic, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontKerning), meth_QTextCharFormat_setFontKerning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontLetterSpacing), meth_QTextCharFormat_setFontLetterSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontOverline), meth_QTextCharFormat_setFontOverline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextCharFormat_setFontPointSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontStrikeOut), meth_QTextCharFormat_setFontStrikeOut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontStyleHint), (PyCFunction)meth_QTextCharFormat_setFontStyleHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontStyleStrategy), meth_QTextCharFormat_setFontStyleStrategy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextCharFormat_setFontUnderline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextCharFormat_setFontWeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontWordSpacing), meth_QTextCharFormat_setFontWordSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTableCellColumnSpan), meth_QTextCharFormat_setTableCellColumnSpan, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTableCellRowSpan), meth_QTextCharFormat_setTableCellRowSpan, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextOutline), meth_QTextCharFormat_setTextOutline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTextCharFormat_setToolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUnderlineColor), meth_QTextCharFormat_setUnderlineColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUnderlineStyle), meth_QTextCharFormat_setUnderlineStyle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalAlignment), meth_QTextCharFormat_setVerticalAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tableCellColumnSpan), meth_QTextCharFormat_tableCellColumnSpan, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tableCellRowSpan), meth_QTextCharFormat_tableCellRowSpan, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textOutline), meth_QTextCharFormat_textOutline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTextCharFormat_toolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_underlineColor), meth_QTextCharFormat_underlineColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_underlineStyle), meth_QTextCharFormat_underlineStyle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalAlignment), meth_QTextCharFormat_verticalAlignment, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextCharFormat[] = {
    {sipName_AlignBottom, QTextCharFormat::AlignBottom, 644},
    {sipName_AlignMiddle, QTextCharFormat::AlignMiddle, 644},
    {sipName_AlignNormal, QTextCharFormat::AlignNormal, 644},
    {sipName_AlignSubScript, QTextCharFormat::AlignSubScript, 644},
    {sipName_AlignSuperScript, QTextCharFormat::AlignSuperScript, 644},
    {sipName_AlignTop, QTextCharFormat::AlignTop, 644},
    {sipName_DashDotDotLine, QTextCharFormat::DashDotDotLine, 643},
    {sipName_DashDotLine, QTextCharFormat::DashDotLine, 643},
    {sipName_DashUnderline, QTextCharFormat::DashUnderline, 643},
    {sipName_DotLine, QTextCharFormat::DotLine, 643},
    {sipName_NoUnderline, QTextCharFormat::NoUnderline, 643},
    {sipName_SingleUnderline, QTextCharFormat::SingleUnderline, 643},
    {sipName_SpellCheckUnderline, QTextCharFormat::SpellCheckUnderline, 643},
    {sipName_WaveUnderline, QTextCharFormat::WaveUnderline, 643},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextCharFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextCharFormat,
        {0}
    },
    {
        sipNameNr_QTextCharFormat,
        {0, 0, 1},
        53, methods_QTextCharFormat,
        14, enummembers_QTextCharFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTextCharFormat,
    0,
    init_QTextCharFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextCharFormat,
    assign_QTextCharFormat,
    array_QTextCharFormat,
    copy_QTextCharFormat,
    release_QTextCharFormat,
    cast_QTextCharFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};
