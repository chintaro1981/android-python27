/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:20 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 39 "sipQtGuiQClipboard.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQClipboard.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtGuiQClipboard.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 49 "sipQtGuiQClipboard.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 52 "sipQtGuiQClipboard.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 55 "sipQtGuiQClipboard.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtGuiQClipboard.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQClipboard.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQClipboard.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 67 "sipQtGuiQClipboard.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtGuiQClipboard.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 73 "sipQtGuiQClipboard.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQClipboard.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "sipQtGuiQClipboard.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 82 "sipQtGuiQClipboard.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85 "sipQtGuiQClipboard.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 88 "sipQtGuiQClipboard.cpp"


extern "C" {static PyObject *meth_QClipboard_clear(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_clear(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard::Mode a0 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsFindBuffer();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsFindBuffer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_supportsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsSelection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_ownsClipboard(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsClipboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsClipboard();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsClipboard, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsFindBuffer();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsFindBuffer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_ownsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsSelection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard::Mode a0 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        const QString * a0;
        int a0State = 0;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_subtype,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            PyObject * sipRes = 0;

#line 65 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qclipboard.sip"
        QString *text;
        QString *subtype = new QString(*a0);
        
        Py_BEGIN_ALLOW_THREADS
        text = new QString(sipCpp->text(*subtype, a1));
        Py_END_ALLOW_THREADS
        
        PyObject *text_obj = sipConvertFromNewType(text, sipType_QString, NULL);
        PyObject *subtype_obj = sipConvertFromNewType(subtype, sipType_QString, NULL);
        
        if (text_obj && subtype_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, text_obj, subtype_obj);
        #else
            sipRes = Py_BuildValue("(OO)", text_obj, subtype_obj);
        #endif
        }
        
        Py_XDECREF(text_obj);
        Py_XDECREF(subtype_obj);
#line 320 "sipQtGuiQClipboard.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QString * a0;
        int a0State = 0;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_text, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_setText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_mimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_mimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard::Mode a0 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            const QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mimeData(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QMimeData *>(sipRes),sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_mimeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_setMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMimeData * a0;
        PyObject *a0Wrapper;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B@J8|E", &sipSelf, sipType_QClipboard, &sipCpp, &a0Wrapper, sipType_QMimeData, &a0, sipType_QClipboard_Mode, &a1))
        {
#line 93 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qclipboard.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMimeData(a0, a1);
        Py_END_ALLOW_THREADS
        
        // Transfer ownership to C++ and make sure the Python object stays alive by
        // giving it a reference to itself.  The cycle will be broken by QMimeData's
        // virtual dtor.  The reason we don't do the obvious and just use /Transfer/ is
        // that the QClipboard Python object we would transfer ownership to is likely
        // to be garbage collected immediately afterwards.
        sipTransferTo(a0Wrapper, a0Wrapper);
#line 455 "sipQtGuiQClipboard.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setMimeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_image(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_image(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard::Mode a0 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->image(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_image, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_pixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_pixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QClipboard::Mode a0 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->pixmap(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_pixmap, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_setImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage * a0;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QImage, &a0, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImage(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QClipboard_setPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap * a0;
        QClipboard::Mode a1 = QClipboard::Clipboard;
        QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QPixmap, &a0, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixmap(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setPixmap, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QClipboard(void *, const sipTypeDef *);}
static void *cast_QClipboard(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QClipboard)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QClipboard *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QClipboard(void *, int);}
static void release_QClipboard(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QClipboard[] = {{133, 0, 1}};


static PyMethodDef methods_QClipboard[] = {
    {SIP_MLNAME_CAST(sipName_clear), (PyCFunction)meth_QClipboard_clear, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_image), (PyCFunction)meth_QClipboard_image, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), (PyCFunction)meth_QClipboard_mimeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ownsClipboard), meth_QClipboard_ownsClipboard, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ownsFindBuffer), meth_QClipboard_ownsFindBuffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ownsSelection), meth_QClipboard_ownsSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pixmap), (PyCFunction)meth_QClipboard_pixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setImage), (PyCFunction)meth_QClipboard_setImage, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMimeData), (PyCFunction)meth_QClipboard_setMimeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPixmap), (PyCFunction)meth_QClipboard_setPixmap, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), (PyCFunction)meth_QClipboard_setText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsFindBuffer), meth_QClipboard_supportsFindBuffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsSelection), meth_QClipboard_supportsSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), (PyCFunction)meth_QClipboard_text, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QClipboard[] = {
    {sipName_Clipboard, QClipboard::Clipboard, 53},
    {sipName_FindBuffer, QClipboard::FindBuffer, 53},
    {sipName_Selection, QClipboard::Selection, 53},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QClipboard[] = {
    {"selectionChanged()", 0, 0},
    {"findBufferChanged()", 0, 0},
    {"dataChanged()", 0, 0},
    {"changed(QClipboard::Mode)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QClipboard = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QClipboard,
        {0}
    },
    {
        sipNameNr_QClipboard,
        {0, 0, 1},
        14, methods_QClipboard,
        3, enummembers_QClipboard,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QClipboard,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QClipboard,
    cast_QClipboard,
    0,
    0,
    0
},
    &QClipboard::staticMetaObject,
    0,
    pyqt4_signals_QClipboard
};
