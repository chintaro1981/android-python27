/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:29 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 39 "sipQtNetworkQSslError.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 43 "sipQtNetworkQSslError.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtNetworkQSslError.cpp"


extern "C" {static PyObject *meth_QSslError_error(PyObject *, PyObject *);}
static PyObject *meth_QSslError_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QSslError::SslError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSslError_SslError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_error, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSslError_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSslError_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_errorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSslError_certificate(PyObject *, PyObject *);}
static PyObject *meth_QSslError_certificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QSslCertificate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslCertificate(sipCpp->certificate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_certificate, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QSslError___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslError___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslError *sipCpp = reinterpret_cast<QSslError *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslError));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslError * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslError, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QSslError::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QSslError,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QSslError___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslError___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslError *sipCpp = reinterpret_cast<QSslError *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslError));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslError * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslError, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QSslError::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QSslError,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSslError(void *, const sipTypeDef *);}
static void *cast_QSslError(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSslError)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslError(void *, int);}
static void release_QSslError(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QSslError *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSslError(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslError(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSslError *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSslError *>(sipSrc);
}


extern "C" {static void *array_QSslError(SIP_SSIZE_T);}
static void *array_QSslError(SIP_SSIZE_T sipNrElem)
{
    return new QSslError[sipNrElem];
}


extern "C" {static void *copy_QSslError(const void *, SIP_SSIZE_T);}
static void *copy_QSslError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSslError(reinterpret_cast<const QSslError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslError(sipSimpleWrapper *);}
static void dealloc_QSslError(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSslError(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QSslError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSslError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSslError *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSslError();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QSslError::SslError a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_QSslError_SslError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSslError(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        QSslError::SslError a0;
        const QSslCertificate * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EJ9", sipType_QSslError_SslError, &a0, sipType_QSslCertificate, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSslError(a0,*a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QSslError * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSslError(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslError[] = {
    {(void *)slot_QSslError___ne__, ne_slot},
    {(void *)slot_QSslError___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslError[] = {
    {SIP_MLNAME_CAST(sipName_certificate), meth_QSslError_certificate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QSslError_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSslError_errorString, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSslError[] = {
    {sipName_AuthorityIssuerSerialNumberMismatch, QSslError::AuthorityIssuerSerialNumberMismatch, 91},
    {sipName_CertificateExpired, QSslError::CertificateExpired, 91},
    {sipName_CertificateNotYetValid, QSslError::CertificateNotYetValid, 91},
    {sipName_CertificateRejected, QSslError::CertificateRejected, 91},
    {sipName_CertificateRevoked, QSslError::CertificateRevoked, 91},
    {sipName_CertificateSignatureFailed, QSslError::CertificateSignatureFailed, 91},
    {sipName_CertificateUntrusted, QSslError::CertificateUntrusted, 91},
    {sipName_HostNameMismatch, QSslError::HostNameMismatch, 91},
    {sipName_InvalidCaCertificate, QSslError::InvalidCaCertificate, 91},
    {sipName_InvalidNotAfterField, QSslError::InvalidNotAfterField, 91},
    {sipName_InvalidNotBeforeField, QSslError::InvalidNotBeforeField, 91},
    {sipName_InvalidPurpose, QSslError::InvalidPurpose, 91},
    {sipName_NoError, QSslError::NoError, 91},
    {sipName_NoPeerCertificate, QSslError::NoPeerCertificate, 91},
    {sipName_NoSslSupport, QSslError::NoSslSupport, 91},
    {sipName_PathLengthExceeded, QSslError::PathLengthExceeded, 91},
    {sipName_SelfSignedCertificate, QSslError::SelfSignedCertificate, 91},
    {sipName_SelfSignedCertificateInChain, QSslError::SelfSignedCertificateInChain, 91},
    {sipName_SubjectIssuerMismatch, QSslError::SubjectIssuerMismatch, 91},
    {sipName_UnableToDecodeIssuerPublicKey, QSslError::UnableToDecodeIssuerPublicKey, 91},
    {sipName_UnableToDecryptCertificateSignature, QSslError::UnableToDecryptCertificateSignature, 91},
    {sipName_UnableToGetIssuerCertificate, QSslError::UnableToGetIssuerCertificate, 91},
    {sipName_UnableToGetLocalIssuerCertificate, QSslError::UnableToGetLocalIssuerCertificate, 91},
    {sipName_UnableToVerifyFirstCertificate, QSslError::UnableToVerifyFirstCertificate, 91},
    {sipName_UnspecifiedError, QSslError::UnspecifiedError, 91},
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QSslError = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSslError,
        {0}
    },
    {
        sipNameNr_QSslError,
        {0, 0, 1},
        3, methods_QSslError,
        25, enummembers_QSslError,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSslError,
    init_QSslError,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslError,
    assign_QSslError,
    array_QSslError,
    copy_QSslError,
    release_QSslError,
    cast_QSslError,
    0,
    0,
    0
},
    0,
    0,
    0
};
