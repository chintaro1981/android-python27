/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:29 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 39 "sipQtNetworkQNetworkReply.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQNetworkReply.cpp"
#line 205 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 47 "sipQtNetworkQNetworkReply.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 50 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 53 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 59 "sipQtNetworkQNetworkReply.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 65 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 68 "sipQtNetworkQNetworkReply.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 71 "sipQtNetworkQNetworkReply.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 74 "sipQtNetworkQNetworkReply.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 77 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 80 "sipQtNetworkQNetworkReply.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83 "sipQtNetworkQNetworkReply.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "sipQtNetworkQNetworkReply.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92 "sipQtNetworkQNetworkReply.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 95 "sipQtNetworkQNetworkReply.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 98 "sipQtNetworkQNetworkReply.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 101 "sipQtNetworkQNetworkReply.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 104 "sipQtNetworkQNetworkReply.cpp"


class sipQNetworkReply : public QNetworkReply
{
public:
    sipQNetworkReply(QObject *);
    virtual ~sipQNetworkReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    qint64 sipProtect_readData(char *,qint64);
    qint64 sipProtectVirt_readLineData(bool,char *,qint64);
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);
    qint64 sipProtectVirt_writeData(bool,const char *,PY_LONG_LONG);
    void sipProtect_setOperation(QNetworkAccessManager::Operation);
    void sipProtect_setRequest(const QNetworkRequest&);
    void sipProtect_setError(QNetworkReply::NetworkError,const QString&);
    void sipProtect_setUrl(const QUrl&);
    void sipProtect_setHeader(QNetworkRequest::KnownHeaders,const QVariant&);
    void sipProtect_setRawHeader(const QByteArray&,const QByteArray&);
    void sipProtect_setAttribute(QNetworkRequest::Attribute,const QVariant&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void abort();
    void close();
    bool isSequential() const;
    void setReadBufferSize(qint64);
    void ignoreSslErrors();
    qint64 writeData(const char *,PY_LONG_LONG);
    bool open(QIODevice::OpenMode);
    qint64 pos() const;
    qint64 size() const;
    bool seek(qint64);
    bool atEnd() const;
    bool reset();
    qint64 bytesAvailable() const;
    qint64 bytesToWrite() const;
    bool canReadLine() const;
    bool waitForReadyRead(int);
    bool waitForBytesWritten(int);
    qint64 readData(char *,qint64);
    qint64 readLineData(char *,qint64);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkReply(const sipQNetworkReply &);
    sipQNetworkReply &operator = (const sipQNetworkReply &);

    char sipPyMethods[26];
};

sipQNetworkReply::sipQNetworkReply(QObject *a0): QNetworkReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkReply::~sipQNetworkReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkReply::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkReply);
}

int sipQNetworkReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkReply,_c,_id,_a);

    return _id;
}

void *sipQNetworkReply::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QNetworkReply,_clname)) ? this : QNetworkReply::qt_metacast(_clname);
}

void sipQNetworkReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QNetworkReply,sipName_abort);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQNetworkReply::close()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_close);

    if (!meth)
    {
        QNetworkReply::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQNetworkReply::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_isSequential);

    if (!meth)
        return QNetworkReply::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

void sipQNetworkReply::setReadBufferSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setReadBufferSize);

    if (!meth)
    {
        QNetworkReply::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    sipVH_QtNetwork_2(sipGILState,meth,a0);
}

void sipQNetworkReply::ignoreSslErrors()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_ignoreSslErrors);

    if (!meth)
    {
        QNetworkReply::ignoreSslErrors();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

qint64 sipQNetworkReply::writeData(const char *a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_writeData);

    if (!meth)
        return QNetworkReply::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,const char *,PY_LONG_LONG);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState,meth,a0,a1);
}

bool sipQNetworkReply::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_open);

    if (!meth)
        return QIODevice::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t,PyObject *,QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState,meth,a0);
}

qint64 sipQNetworkReply::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_pos);

    if (!meth)
        return QIODevice::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

qint64 sipQNetworkReply::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_size);

    if (!meth)
        return QIODevice::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

bool sipQNetworkReply::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_seek);

    if (!meth)
        return QIODevice::seek(a0);

    typedef bool (*sipVH_QtCore_32)(sip_gilstate_t,PyObject *,PY_LONG_LONG);

    return ((sipVH_QtCore_32)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[32]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_atEnd);

    if (!meth)
        return QIODevice::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQNetworkReply::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_reset);

    if (!meth)
        return QIODevice::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

qint64 sipQNetworkReply::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!meth)
        return QIODevice::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

qint64 sipQNetworkReply::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!meth)
        return QIODevice::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[22]))(sipGILState,meth);
}

bool sipQNetworkReply::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canReadLine);

    if (!meth)
        return QIODevice::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQNetworkReply::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!meth)
        return QIODevice::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!meth)
        return QIODevice::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

qint64 sipQNetworkReply::readData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QNetworkReply,sipName_readData);

    if (!meth)
        return 0;

    typedef PY_LONG_LONG (*sipVH_QtCore_31)(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[31]))(sipGILState,meth,a0,a1);
}

qint64 sipQNetworkReply::readLineData(char *a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_readLineData);

    if (!meth)
        return QIODevice::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_21)(sip_gilstate_t,PyObject *,char *,PY_LONG_LONG);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[21]))(sipGILState,meth,a0,a1);
}

bool sipQNetworkReply::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQNetworkReply::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQNetworkReply::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQNetworkReply::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQNetworkReply::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQNetworkReply::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQNetworkReply::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQNetworkReply::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkReply::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkReply::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkReply::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkReply::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNetworkReply::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkReply::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

qint64 sipQNetworkReply::sipProtect_readData(char *a0,qint64 a1)
{
    return readData(a0,a1);
}

qint64 sipQNetworkReply::sipProtectVirt_readLineData(bool sipSelfWasArg,char *a0,qint64 a1)
{
    return (sipSelfWasArg ? QIODevice::readLineData(a0,a1) : readLineData(a0,a1));
}

void sipQNetworkReply::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQNetworkReply::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}

qint64 sipQNetworkReply::sipProtectVirt_writeData(bool sipSelfWasArg,const char *a0,PY_LONG_LONG a1)
{
    return (sipSelfWasArg ? QNetworkReply::writeData(a0,a1) : writeData(a0,a1));
}

void sipQNetworkReply::sipProtect_setOperation(QNetworkAccessManager::Operation a0)
{
    QNetworkReply::setOperation(a0);
}

void sipQNetworkReply::sipProtect_setRequest(const QNetworkRequest& a0)
{
    QNetworkReply::setRequest(a0);
}

void sipQNetworkReply::sipProtect_setError(QNetworkReply::NetworkError a0,const QString& a1)
{
    QNetworkReply::setError(a0,a1);
}

void sipQNetworkReply::sipProtect_setUrl(const QUrl& a0)
{
    QNetworkReply::setUrl(a0);
}

void sipQNetworkReply::sipProtect_setHeader(QNetworkRequest::KnownHeaders a0,const QVariant& a1)
{
    QNetworkReply::setHeader(a0,a1);
}

void sipQNetworkReply::sipProtect_setRawHeader(const QByteArray& a0,const QByteArray& a1)
{
    QNetworkReply::setRawHeader(a0,a1);
}

void sipQNetworkReply::sipProtect_setAttribute(QNetworkRequest::Attribute a0,const QVariant& a1)
{
    QNetworkReply::setAttribute(a0,a1);
}


extern "C" {static PyObject *meth_QNetworkReply_sender(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 749 "sipQtNetworkQNetworkReply.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_receivers(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 791 "sipQtNetworkQNetworkReply.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        qint64 a0;
        sipQNetworkReply *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkReply, sipName_readData);
                return NULL;
            }

#line 179 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtect_readData(s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1004 "sipQtNetworkQNetworkReply.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQNetworkReply *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 244 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QIODevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1074 "sipQtNetworkQNetworkReply.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readLineData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setOpenMode(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setOpenMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode * a0;
        int a0State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setOpenMode(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setOpenMode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setErrorString(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setErrorString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setErrorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkReply, sipName_abort);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_abort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_close, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkReply::isSequential() : sipCpp->isSequential());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isSequential, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readBufferSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readBufferSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setReadBufferSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_manager(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->manager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_manager, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_operation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_operation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager::Operation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->operation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_Operation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_operation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_request(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkRequest *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkRequest(sipCpp->request());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_request, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkReply::NetworkError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkReply_NetworkError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_error, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_url, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->header(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_header, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasRawHeader(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_hasRawHeader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(sipCpp->rawHeaderList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->rawHeader(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_attribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->attribute(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_attribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QSslConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration * a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSslConfiguration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QNetworkReply::ignoreSslErrors() : sipCpp->ignoreSslErrors());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QSslError> * a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrors, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_writeData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char * a0;
        SIP_SSIZE_T a1;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_writeData(sipSelfWasArg,a0,(PY_LONG_LONG)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_writeData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setOperation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::Operation a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setOperation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setOperation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setRequest(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRequest, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply::NetworkError a0;
        const QString * a1;
        int a1State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkReply_NetworkError, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setError(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QVariant * a1;
        int a1State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setHeader(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setHeader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QByteArray * a1;
        int a1State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setRawHeader(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRawHeader, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QVariant * a1;
        int a1State = 0;
        sipQNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setAttribute(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setAttribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFinished();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isFinished, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isRunning, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> > *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->rawHeaderPairs());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderPairs, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkReply(void *, const sipTypeDef *);}
static void *cast_QNetworkReply(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkReply)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QNetworkReply *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkReply(void *, int);}
static void release_QNetworkReply(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkReply *>(sipCppV);
    else
        delete reinterpret_cast<QNetworkReply *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkReply(sipSimpleWrapper *);}
static void dealloc_QNetworkReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkReply(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QNetworkReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QNetworkReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkReply *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkReply(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkReply[] = {{79, 0, 1}};


static PyMethodDef methods_QNetworkReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QNetworkReply_abort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_attribute), meth_QNetworkReply_attribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QNetworkReply_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkReply_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QNetworkReply_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QNetworkReply_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QNetworkReply_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkReply_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkReply_hasRawHeader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkReply_header, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QNetworkReply_ignoreSslErrors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QNetworkReply_isFinished, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QNetworkReply_isRunning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QNetworkReply_isSequential, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_manager), meth_QNetworkReply_manager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_operation), meth_QNetworkReply_operation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkReply_rawHeader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkReply_rawHeaderList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rawHeaderPairs), meth_QNetworkReply_rawHeaderPairs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QNetworkReply_readBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QNetworkReply_readData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QNetworkReply_readLineData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QNetworkReply_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_request), meth_QNetworkReply_request, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QNetworkReply_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkReply_setAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setError), meth_QNetworkReply_setError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setErrorString), meth_QNetworkReply_setErrorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkReply_setHeader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpenMode), meth_QNetworkReply_setOpenMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOperation), meth_QNetworkReply_setOperation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkReply_setRawHeader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QNetworkReply_setReadBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QNetworkReply_setRequest, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkReply_setSslConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkReply_setUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkReply_sslConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QNetworkReply_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkReply_url, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QNetworkReply_writeData, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QNetworkReply[] = {
    {sipName_AuthenticationRequiredError, QNetworkReply::AuthenticationRequiredError, 69},
    {sipName_ConnectionRefusedError, QNetworkReply::ConnectionRefusedError, 69},
    {sipName_ContentAccessDenied, QNetworkReply::ContentAccessDenied, 69},
    {sipName_ContentNotFoundError, QNetworkReply::ContentNotFoundError, 69},
    {sipName_ContentOperationNotPermittedError, QNetworkReply::ContentOperationNotPermittedError, 69},
    {sipName_ContentReSendError, QNetworkReply::ContentReSendError, 69},
    {sipName_HostNotFoundError, QNetworkReply::HostNotFoundError, 69},
    {sipName_NoError, QNetworkReply::NoError, 69},
    {sipName_OperationCanceledError, QNetworkReply::OperationCanceledError, 69},
    {sipName_ProtocolFailure, QNetworkReply::ProtocolFailure, 69},
    {sipName_ProtocolInvalidOperationError, QNetworkReply::ProtocolInvalidOperationError, 69},
    {sipName_ProtocolUnknownError, QNetworkReply::ProtocolUnknownError, 69},
    {sipName_ProxyAuthenticationRequiredError, QNetworkReply::ProxyAuthenticationRequiredError, 69},
    {sipName_ProxyConnectionClosedError, QNetworkReply::ProxyConnectionClosedError, 69},
    {sipName_ProxyConnectionRefusedError, QNetworkReply::ProxyConnectionRefusedError, 69},
    {sipName_ProxyNotFoundError, QNetworkReply::ProxyNotFoundError, 69},
    {sipName_ProxyTimeoutError, QNetworkReply::ProxyTimeoutError, 69},
    {sipName_RemoteHostClosedError, QNetworkReply::RemoteHostClosedError, 69},
    {sipName_SslHandshakeFailedError, QNetworkReply::SslHandshakeFailedError, 69},
    {sipName_TemporaryNetworkFailureError, QNetworkReply::TemporaryNetworkFailureError, 69},
    {sipName_TimeoutError, QNetworkReply::TimeoutError, 69},
    {sipName_UnknownContentError, QNetworkReply::UnknownContentError, 69},
    {sipName_UnknownNetworkError, QNetworkReply::UnknownNetworkError, 69},
    {sipName_UnknownProxyError, QNetworkReply::UnknownProxyError, 69},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QNetworkReply[] = {
    {"downloadProgress(qint64,qint64)", 0, 0},
    {"uploadProgress(qint64,qint64)", 0, 0},
    {"sslErrors(QList<QSslError>)", 0, 0},
    {"finished()", 0, 0},
    {"metaDataChanged()", 0, 0},
    {"error(QNetworkReply::NetworkError)", 0, &methods_QNetworkReply[7]},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkReply,
        {0}
    },
    {
        sipNameNr_QNetworkReply,
        {0, 0, 1},
        40, methods_QNetworkReply,
        24, enummembers_QNetworkReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QNetworkReply,
    0,
    init_QNetworkReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkReply,
    0,
    0,
    0,
    release_QNetworkReply,
    cast_QNetworkReply,
    0,
    0,
    0
},
    &QNetworkReply::staticMetaObject,
    0,
    pyqt4_signals_QNetworkReply
};
