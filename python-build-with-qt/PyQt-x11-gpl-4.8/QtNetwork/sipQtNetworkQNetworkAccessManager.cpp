/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:29 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 39 "sipQtNetworkQNetworkAccessManager.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 46 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 49 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 52 "sipQtNetworkQNetworkAccessManager.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 55 "sipQtNetworkQNetworkAccessManager.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 58 "sipQtNetworkQNetworkAccessManager.cpp"
#line 192 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 61 "sipQtNetworkQNetworkAccessManager.cpp"
#line 152 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 64 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtNetworkQNetworkAccessManager.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 70 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 73 "sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 76 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 79 "sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "sipQtNetworkQNetworkAccessManager.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "sipQtNetworkQNetworkAccessManager.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 88 "sipQtNetworkQNetworkAccessManager.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "sipQtNetworkQNetworkAccessManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtNetworkQNetworkAccessManager.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97 "sipQtNetworkQNetworkAccessManager.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 103 "sipQtNetworkQNetworkAccessManager.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 106 "sipQtNetworkQNetworkAccessManager.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 109 "sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 112 "sipQtNetworkQNetworkAccessManager.cpp"


class sipQNetworkAccessManager : public QNetworkAccessManager
{
public:
    sipQNetworkAccessManager(QObject *);
    virtual ~sipQNetworkAccessManager();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    QNetworkReply * sipProtectVirt_createRequest(bool,QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice *);
    void sipProtect_networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QNetworkReply * createRequest(QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkAccessManager(const sipQNetworkAccessManager &);
    sipQNetworkAccessManager &operator = (const sipQNetworkAccessManager &);

    char sipPyMethods[8];
};

sipQNetworkAccessManager::sipQNetworkAccessManager(QObject *a0): QNetworkAccessManager(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkAccessManager::~sipQNetworkAccessManager()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkAccessManager::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkAccessManager);
}

int sipQNetworkAccessManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkAccessManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkAccessManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkAccessManager::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QNetworkAccessManager,_clname)) ? this : QNetworkAccessManager::qt_metacast(_clname);
}

QNetworkReply * sipQNetworkAccessManager::createRequest(QNetworkAccessManager::Operation a0,const QNetworkRequest& a1,QIODevice *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_createRequest);

    if (!meth)
        return QNetworkAccessManager::createRequest(a0,a1,a2);

    extern QNetworkReply * sipVH_QtNetwork_13(sip_gilstate_t,PyObject *,QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice *);

    return sipVH_QtNetwork_13(sipGILState,meth,a0,a1,a2);
}

bool sipQNetworkAccessManager::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQNetworkAccessManager::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQNetworkAccessManager::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQNetworkAccessManager::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQNetworkAccessManager::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQNetworkAccessManager::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQNetworkAccessManager::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQNetworkAccessManager::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkAccessManager::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkAccessManager::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

QNetworkReply * sipQNetworkAccessManager::sipProtectVirt_createRequest(bool sipSelfWasArg,QNetworkAccessManager::Operation a0,const QNetworkRequest& a1,QIODevice *a2)
{
    return (sipSelfWasArg ? QNetworkAccessManager::createRequest(a0,a1,a2) : createRequest(a0,a1,a2));
}

void sipQNetworkAccessManager::sipProtect_networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility a0)
{
    QNetworkAccessManager::networkAccessibleChanged(a0);
}


extern "C" {static PyObject *meth_QNetworkAccessManager_sender(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 400 "sipQtNetworkQNetworkAccessManager.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_receivers(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 442 "sipQtNetworkQNetworkAccessManager.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_proxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxy *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkProxy(sipCpp->proxy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkCookieJar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cookieJar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkCookieJar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cookieJar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkCookieJar * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkCookieJar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCookieJar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCookieJar, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_head(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->head(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_head, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_get(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_get, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_post(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_post(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QIODevice * a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest * a0;
        const QByteArray * a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_post, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_put(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QIODevice * a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest * a0;
        const QByteArray * a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_put, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkAccessManager::Operation a0;
        const QNetworkRequest * a1;
        QIODevice * a2 = 0;
        sipQNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_device,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ9|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QNetworkRequest, &a1, sipType_QIODevice, &a2))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createRequest(sipSelfWasArg,a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_createRequest, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxyFactory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->proxyFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkProxyFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxyFactory, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkProxyFactory * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxyFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxyFactory(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxyFactory, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_cache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QAbstractNetworkCache *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cache();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractNetworkCache,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cache, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNetworkCache * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QAbstractNetworkCache, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCache(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCache, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->deleteResource(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_deleteResource, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest * a0;
        const QByteArray * a1;
        int a1State = 0;
        QIODevice * a2 = 0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_request,
            sipName_verb,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
            QNetworkReply *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sendCustomRequest, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkConfiguration * a0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_config,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConfiguration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->configuration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_configuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->activeConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_activeConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::NetworkAccessibility a0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_accessible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setNetworkAccessible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkAccessManager::NetworkAccessibility sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessible();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_NetworkAccessibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessibleChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessibleChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::NetworkAccessibility a0;
        sipQNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_accessible,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_networkAccessibleChanged(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessibleChanged, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkAccessManager(void *, const sipTypeDef *);}
static void *cast_QNetworkAccessManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkAccessManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkAccessManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAccessManager(void *, int);}
static void release_QNetworkAccessManager(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkAccessManager *>(sipCppV);
    else
        delete reinterpret_cast<QNetworkAccessManager *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkAccessManager(sipSimpleWrapper *);}
static void dealloc_QNetworkAccessManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkAccessManager *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkAccessManager(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QNetworkAccessManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QNetworkAccessManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkAccessManager *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkAccessManager(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkAccessManager[] = {{133, 0, 1}};


static PyMethodDef methods_QNetworkAccessManager[] = {
    {SIP_MLNAME_CAST(sipName_activeConfiguration), meth_QNetworkAccessManager_activeConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cache), meth_QNetworkAccessManager_cache, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QNetworkAccessManager_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkAccessManager_configuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QNetworkAccessManager_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cookieJar), meth_QNetworkAccessManager_cookieJar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createRequest), (PyCFunction)meth_QNetworkAccessManager_createRequest, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QNetworkAccessManager_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteResource), meth_QNetworkAccessManager_deleteResource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QNetworkAccessManager_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get), meth_QNetworkAccessManager_get, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_head), meth_QNetworkAccessManager_head, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessible), meth_QNetworkAccessManager_networkAccessible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessibleChanged), (PyCFunction)meth_QNetworkAccessManager_networkAccessibleChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_post), meth_QNetworkAccessManager_post, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QNetworkAccessManager_proxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_proxyFactory), meth_QNetworkAccessManager_proxyFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_put), meth_QNetworkAccessManager_put, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QNetworkAccessManager_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendCustomRequest), (PyCFunction)meth_QNetworkAccessManager_sendCustomRequest, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QNetworkAccessManager_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCache), meth_QNetworkAccessManager_setCache, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setConfiguration), (PyCFunction)meth_QNetworkAccessManager_setConfiguration, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCookieJar), meth_QNetworkAccessManager_setCookieJar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessible), (PyCFunction)meth_QNetworkAccessManager_setNetworkAccessible, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QNetworkAccessManager_setProxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProxyFactory), meth_QNetworkAccessManager_setProxyFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QNetworkAccessManager_timerEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QNetworkAccessManager[] = {
    {sipName_Accessible, QNetworkAccessManager::Accessible, 41},
    {sipName_CustomOperation, QNetworkAccessManager::CustomOperation, 42},
    {sipName_DeleteOperation, QNetworkAccessManager::DeleteOperation, 42},
    {sipName_GetOperation, QNetworkAccessManager::GetOperation, 42},
    {sipName_HeadOperation, QNetworkAccessManager::HeadOperation, 42},
    {sipName_NotAccessible, QNetworkAccessManager::NotAccessible, 41},
    {sipName_PostOperation, QNetworkAccessManager::PostOperation, 42},
    {sipName_PutOperation, QNetworkAccessManager::PutOperation, 42},
    {sipName_UnknownAccessibility, QNetworkAccessManager::UnknownAccessibility, 41},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QNetworkAccessManager[] = {
    {"sslErrors(QNetworkReply *,QList<QSslError>)", 0, 0},
    {"finished(QNetworkReply *)", 0, 0},
    {"authenticationRequired(QNetworkReply *,QAuthenticator *)", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator *)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkAccessManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAccessManager,
        {0}
    },
    {
        sipNameNr_QNetworkAccessManager,
        {0, 0, 1},
        28, methods_QNetworkAccessManager,
        9, enummembers_QNetworkAccessManager,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QNetworkAccessManager,
    0,
    init_QNetworkAccessManager,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkAccessManager,
    0,
    0,
    0,
    release_QNetworkAccessManager,
    cast_QNetworkAccessManager,
    0,
    0,
    0
},
    &QNetworkAccessManager::staticMetaObject,
    0,
    pyqt4_signals_QNetworkAccessManager
};
