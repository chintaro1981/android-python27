/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:29 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 39 "sipQtNetworkQNetworkConfigurationManager.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 46 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 55 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 58 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 88 "sipQtNetworkQNetworkConfigurationManager.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 91 "sipQtNetworkQNetworkConfigurationManager.cpp"


class sipQNetworkConfigurationManager : public QNetworkConfigurationManager
{
public:
    sipQNetworkConfigurationManager(QObject *);
    virtual ~sipQNetworkConfigurationManager();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkConfigurationManager(const sipQNetworkConfigurationManager &);
    sipQNetworkConfigurationManager &operator = (const sipQNetworkConfigurationManager &);

    char sipPyMethods[7];
};

sipQNetworkConfigurationManager::sipQNetworkConfigurationManager(QObject *a0): QNetworkConfigurationManager(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkConfigurationManager::~sipQNetworkConfigurationManager()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkConfigurationManager::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkConfigurationManager);
}

int sipQNetworkConfigurationManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkConfigurationManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkConfigurationManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkConfigurationManager::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QNetworkConfigurationManager,_clname)) ? this : QNetworkConfigurationManager::qt_metacast(_clname);
}

bool sipQNetworkConfigurationManager::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQNetworkConfigurationManager::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQNetworkConfigurationManager::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQNetworkConfigurationManager::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQNetworkConfigurationManager::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQNetworkConfigurationManager::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQNetworkConfigurationManager::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQNetworkConfigurationManager::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkConfigurationManager::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkConfigurationManager::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkConfigurationManager::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkConfigurationManager::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNetworkConfigurationManager::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkConfigurationManager::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_sender(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 351 "sipQtNetworkQNetworkConfigurationManager.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_receivers(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 393 "sipQtNetworkQNetworkConfigurationManager.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            QNetworkConfigurationManager::Capabilities *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfigurationManager::Capabilities(sipCpp->capabilities());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_capabilities, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            QNetworkConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->defaultConfiguration());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_defaultConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkConfiguration::StateFlags a0def = 0;
        QNetworkConfiguration::StateFlags * a0 = &a0def;
        int a0State = 0;
        QNetworkConfigurationManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            QList<QNetworkConfiguration> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QNetworkConfiguration>(sipCpp->allConfigurations(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_allConfigurations, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QNetworkConfigurationManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_identifier,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QNetworkConfiguration *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkConfiguration(sipCpp->configurationFromIdentifier(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_configurationFromIdentifier, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateConfigurations();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_updateConfigurations, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOnline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_isOnline, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkConfigurationManager(void *, const sipTypeDef *);}
static void *cast_QNetworkConfigurationManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkConfigurationManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkConfigurationManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfigurationManager(void *, int);}
static void release_QNetworkConfigurationManager(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkConfigurationManager *>(sipCppV);
    else
        delete reinterpret_cast<QNetworkConfigurationManager *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *);}
static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkConfigurationManager *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkConfigurationManager(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QNetworkConfigurationManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkConfigurationManager *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQNetworkConfigurationManager(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkConfigurationManager[] = {{133, 0, 1}};


static PyMethodDef methods_QNetworkConfigurationManager[] = {
    {SIP_MLNAME_CAST(sipName_allConfigurations), (PyCFunction)meth_QNetworkConfigurationManager_allConfigurations, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_capabilities), meth_QNetworkConfigurationManager_capabilities, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QNetworkConfigurationManager_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_configurationFromIdentifier), (PyCFunction)meth_QNetworkConfigurationManager_configurationFromIdentifier, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QNetworkConfigurationManager_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QNetworkConfigurationManager_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultConfiguration), meth_QNetworkConfigurationManager_defaultConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QNetworkConfigurationManager_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isOnline), meth_QNetworkConfigurationManager_isOnline, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QNetworkConfigurationManager_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QNetworkConfigurationManager_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QNetworkConfigurationManager_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateConfigurations), meth_QNetworkConfigurationManager_updateConfigurations, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QNetworkConfigurationManager[] = {
    {sipName_ApplicationLevelRoaming, QNetworkConfigurationManager::ApplicationLevelRoaming, 53},
    {sipName_CanStartAndStopInterfaces, QNetworkConfigurationManager::CanStartAndStopInterfaces, 53},
    {sipName_DataStatistics, QNetworkConfigurationManager::DataStatistics, 53},
    {sipName_DirectConnectionRouting, QNetworkConfigurationManager::DirectConnectionRouting, 53},
    {sipName_ForcedRoaming, QNetworkConfigurationManager::ForcedRoaming, 53},
    {sipName_NetworkSessionRequired, QNetworkConfigurationManager::NetworkSessionRequired, 53},
    {sipName_SystemSessionSupport, QNetworkConfigurationManager::SystemSessionSupport, 53},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QNetworkConfigurationManager[] = {
    {"updateCompleted()", 0, 0},
    {"onlineStateChanged(bool)", 0, 0},
    {"configurationChanged(QNetworkConfiguration)", 0, 0},
    {"configurationRemoved(QNetworkConfiguration)", 0, 0},
    {"configurationAdded(QNetworkConfiguration)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkConfigurationManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfigurationManager,
        {0}
    },
    {
        sipNameNr_QNetworkConfigurationManager,
        {0, 0, 1},
        13, methods_QNetworkConfigurationManager,
        7, enummembers_QNetworkConfigurationManager,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QNetworkConfigurationManager,
    0,
    init_QNetworkConfigurationManager,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkConfigurationManager,
    0,
    0,
    0,
    release_QNetworkConfigurationManager,
    cast_QNetworkConfigurationManager,
    0,
    0,
    0
},
    &QNetworkConfigurationManager::staticMetaObject,
    0,
    pyqt4_signals_QNetworkConfigurationManager
};
