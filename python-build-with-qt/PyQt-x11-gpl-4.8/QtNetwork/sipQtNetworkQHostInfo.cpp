/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:29 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qhostinfo.sip"
#include <qhostinfo.h>
#line 39 "sipQtNetworkQHostInfo.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtNetworkQHostInfo.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtNetworkQHostInfo.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtNetworkQHostInfo.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 52 "sipQtNetworkQHostInfo.cpp"


extern "C" {static PyObject *meth_QHostInfo_hostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_hostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->hostName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_hostName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_setHostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHostName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setHostName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_addresses(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_addresses(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            QList<QHostAddress> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QHostAddress>(sipCpp->addresses());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_addresses, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_setAddresses(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setAddresses(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QHostAddress> * a0;
        int a0State = 0;
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QList_0100QHostAddress,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAddresses(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<QHostAddress> *>(a0),sipType_QList_0100QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setAddresses, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_error(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            QHostInfo::HostInfoError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QHostInfo_HostInfoError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_error, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_setError(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo::HostInfoError a0;
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QHostInfo_HostInfoError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setError(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_errorString(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_errorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_setErrorString(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setErrorString(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setErrorString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_setLookupId(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setLookupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHostInfo, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLookupId(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setLookupId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_lookupId(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_lookupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lookupId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_lookupId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_lookupHost(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_lookupHost(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QObject * a1;
        char * a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1qS", sipType_QString,&a0, &a0State, "(QHostInfo)", &a1, &a2, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QHostInfo::lookupHost(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QObject * a1;
        char * a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1y", sipType_QString,&a0, &a0State, "(QHostInfo)", &a1, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QHostInfo::lookupHost(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_lookupHost, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_abortHostLookup(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_abortHostLookup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QHostInfo::abortHostLookup(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_abortHostLookup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_fromName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_fromName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QHostInfo *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHostInfo(QHostInfo::fromName(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHostInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_fromName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_localHostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_localHostName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QHostInfo::localHostName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_localHostName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QHostInfo_localDomainName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_localDomainName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QHostInfo::localDomainName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_localDomainName, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHostInfo(void *, const sipTypeDef *);}
static void *cast_QHostInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QHostInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHostInfo(void *, int);}
static void release_QHostInfo(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QHostInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QHostInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QHostInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QHostInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QHostInfo *>(sipSrc);
}


extern "C" {static void *array_QHostInfo(SIP_SSIZE_T);}
static void *array_QHostInfo(SIP_SSIZE_T sipNrElem)
{
    return new QHostInfo[sipNrElem];
}


extern "C" {static void *copy_QHostInfo(const void *, SIP_SSIZE_T);}
static void *copy_QHostInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QHostInfo(reinterpret_cast<const QHostInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHostInfo(sipSimpleWrapper *);}
static void dealloc_QHostInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QHostInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QHostInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QHostInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QHostInfo *sipCpp = 0;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostInfo(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QHostInfo * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QHostInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QHostInfo[] = {
    {SIP_MLNAME_CAST(sipName_abortHostLookup), meth_QHostInfo_abortHostLookup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addresses), meth_QHostInfo_addresses, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QHostInfo_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QHostInfo_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromName), meth_QHostInfo_fromName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hostName), meth_QHostInfo_hostName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_localDomainName), meth_QHostInfo_localDomainName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_localHostName), meth_QHostInfo_localHostName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lookupHost), meth_QHostInfo_lookupHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lookupId), meth_QHostInfo_lookupId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAddresses), meth_QHostInfo_setAddresses, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setError), meth_QHostInfo_setError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setErrorString), meth_QHostInfo_setErrorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHostName), meth_QHostInfo_setHostName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLookupId), meth_QHostInfo_setLookupId, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QHostInfo[] = {
    {sipName_HostNotFound, QHostInfo::HostNotFound, 18},
    {sipName_NoError, QHostInfo::NoError, 18},
    {sipName_UnknownError, QHostInfo::UnknownError, 18},
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QHostInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QHostInfo,
        {0}
    },
    {
        sipNameNr_QHostInfo,
        {0, 0, 1},
        15, methods_QHostInfo,
        3, enummembers_QHostInfo,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QHostInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHostInfo,
    assign_QHostInfo,
    array_QHostInfo,
    copy_QHostInfo,
    release_QHostInfo,
    cast_QHostInfo,
    0,
    0,
    0
},
    0,
    0,
    0
};
