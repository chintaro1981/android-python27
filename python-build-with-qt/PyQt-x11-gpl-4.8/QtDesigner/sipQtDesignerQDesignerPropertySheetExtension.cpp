/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:10 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtDesigner/propertysheet.sip"
#include <propertysheet.h>
#line 39 "sipQtDesignerQDesignerPropertySheetExtension.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "sipQtDesignerQDesignerPropertySheetExtension.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtDesignerQDesignerPropertySheetExtension.cpp"


class sipQDesignerPropertySheetExtension : public QDesignerPropertySheetExtension
{
public:
    sipQDesignerPropertySheetExtension();
    sipQDesignerPropertySheetExtension(const QDesignerPropertySheetExtension&);
    virtual ~sipQDesignerPropertySheetExtension();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int count() const;
    int indexOf(const QString&) const;
    QString propertyName(int) const;
    QString propertyGroup(int) const;
    void setPropertyGroup(int,const QString&);
    bool hasReset(int) const;
    bool reset(int);
    bool isVisible(int) const;
    void setVisible(int,bool);
    bool isAttribute(int) const;
    void setAttribute(int,bool);
    QVariant property(int) const;
    void setProperty(int,const QVariant&);
    bool isChanged(int) const;
    void setChanged(int,bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDesignerPropertySheetExtension(const sipQDesignerPropertySheetExtension &);
    sipQDesignerPropertySheetExtension &operator = (const sipQDesignerPropertySheetExtension &);

    char sipPyMethods[15];
};

sipQDesignerPropertySheetExtension::sipQDesignerPropertySheetExtension(): QDesignerPropertySheetExtension(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDesignerPropertySheetExtension::sipQDesignerPropertySheetExtension(const QDesignerPropertySheetExtension& a0): QDesignerPropertySheetExtension(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDesignerPropertySheetExtension::~sipQDesignerPropertySheetExtension()
{
    sipCommonDtor(sipPySelf);
}

int sipQDesignerPropertySheetExtension::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_count);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQDesignerPropertySheetExtension::indexOf(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_indexOf);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtGui_112)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtGui_112)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[112]))(sipGILState,meth,a0);
}

QString sipQDesignerPropertySheetExtension::propertyName(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_propertyName);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_111)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[111]))(sipGILState,meth,a0);
}

QString sipQDesignerPropertySheetExtension::propertyGroup(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_propertyGroup);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtGui_111)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_111)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[111]))(sipGILState,meth,a0);
}

void sipQDesignerPropertySheetExtension::setPropertyGroup(int a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_setPropertyGroup);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_4(sip_gilstate_t,PyObject *,int,const QString&);

    sipVH_QtDesigner_4(sipGILState,meth,a0,a1);
}

bool sipQDesignerPropertySheetExtension::hasReset(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_hasReset);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQDesignerPropertySheetExtension::reset(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_reset);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQDesignerPropertySheetExtension::isVisible(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_isVisible);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipQDesignerPropertySheetExtension::setVisible(int a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_setVisible);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_3(sip_gilstate_t,PyObject *,int,bool);

    sipVH_QtDesigner_3(sipGILState,meth,a0,a1);
}

bool sipQDesignerPropertySheetExtension::isAttribute(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_isAttribute);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipQDesignerPropertySheetExtension::setAttribute(int a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_setAttribute);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_3(sip_gilstate_t,PyObject *,int,bool);

    sipVH_QtDesigner_3(sipGILState,meth,a0,a1);
}

QVariant sipQDesignerPropertySheetExtension::property(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_property);

    if (!meth)
        return QVariant();

    typedef QVariant (*sipVH_QtGui_69)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_69)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[69]))(sipGILState,meth,a0);
}

void sipQDesignerPropertySheetExtension::setProperty(int a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_setProperty);

    if (!meth)
        return;

    typedef void (*sipVH_QtGui_68)(sip_gilstate_t,PyObject *,int,const QVariant&);

    ((sipVH_QtGui_68)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[68]))(sipGILState,meth,a0,a1);
}

bool sipQDesignerPropertySheetExtension::isChanged(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_isChanged);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipQDesignerPropertySheetExtension::setChanged(int a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QDesignerPropertySheetExtension,sipName_setChanged);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_3(sip_gilstate_t,PyObject *,int,bool);

    sipVH_QtDesigner_3(sipGILState,meth,a0,a1);
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_count(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_count);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_indexOf);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_indexOf, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_propertyName(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_propertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_propertyName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->propertyName(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_propertyName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_propertyGroup(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_propertyGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_propertyGroup);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->propertyGroup(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_propertyGroup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_setPropertyGroup(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_setPropertyGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_setPropertyGroup);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPropertyGroup(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_setPropertyGroup, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_hasReset(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_hasReset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_hasReset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasReset(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_hasReset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_reset(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_reset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->reset(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_isVisible);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isVisible(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_isVisible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_setVisible);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVisible(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_setVisible, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_isAttribute(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_isAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_isAttribute);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_isAttribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_setAttribute);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_setAttribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_property(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            QVariant *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_property);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->property(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_property, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const QVariant * a1;
        int a1State = 0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0, sipType_QVariant,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_setProperty);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProperty(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_setProperty, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_isChanged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_isChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_isChanged);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isChanged(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_isChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerPropertySheetExtension_setChanged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerPropertySheetExtension_setChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1;
        QDesignerPropertySheetExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QDesignerPropertySheetExtension, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerPropertySheetExtension, sipName_setChanged);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerPropertySheetExtension, sipName_setChanged, NULL);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QDesignerPropertySheetExtension___len__(PyObject *);}
static SIP_SSIZE_T slot_QDesignerPropertySheetExtension___len__(PyObject *sipSelf)
{
    QDesignerPropertySheetExtension *sipCpp = reinterpret_cast<QDesignerPropertySheetExtension *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDesignerPropertySheetExtension));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 873 "sipQtDesignerQDesignerPropertySheetExtension.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesignerPropertySheetExtension(void *, const sipTypeDef *);}
static void *cast_QDesignerPropertySheetExtension(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDesignerPropertySheetExtension)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerPropertySheetExtension(void *, int);}
static void release_QDesignerPropertySheetExtension(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDesignerPropertySheetExtension *>(sipCppV);
    else
        delete reinterpret_cast<QDesignerPropertySheetExtension *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerPropertySheetExtension(sipSimpleWrapper *);}
static void dealloc_QDesignerPropertySheetExtension(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDesignerPropertySheetExtension *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerPropertySheetExtension(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QDesignerPropertySheetExtension(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDesignerPropertySheetExtension(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDesignerPropertySheetExtension *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDesignerPropertySheetExtension();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QDesignerPropertySheetExtension * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDesignerPropertySheetExtension, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDesignerPropertySheetExtension(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDesignerPropertySheetExtension[] = {
    {(void *)slot_QDesignerPropertySheetExtension___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDesignerPropertySheetExtension[] = {
    {SIP_MLNAME_CAST(sipName_count), meth_QDesignerPropertySheetExtension_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasReset), meth_QDesignerPropertySheetExtension_hasReset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QDesignerPropertySheetExtension_indexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAttribute), meth_QDesignerPropertySheetExtension_isAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isChanged), meth_QDesignerPropertySheetExtension_isChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QDesignerPropertySheetExtension_isVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_property), meth_QDesignerPropertySheetExtension_property, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyGroup), meth_QDesignerPropertySheetExtension_propertyGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyName), meth_QDesignerPropertySheetExtension_propertyName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QDesignerPropertySheetExtension_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QDesignerPropertySheetExtension_setAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setChanged), meth_QDesignerPropertySheetExtension_setChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QDesignerPropertySheetExtension_setProperty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPropertyGroup), meth_QDesignerPropertySheetExtension_setPropertyGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QDesignerPropertySheetExtension_setVisible, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtDesigner_QDesignerPropertySheetExtension = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QDesignerPropertySheetExtension,
        {0}
    },
    {
        sipNameNr_QDesignerPropertySheetExtension,
        {0, 0, 1},
        15, methods_QDesignerPropertySheetExtension,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDesignerPropertySheetExtension,
    init_QDesignerPropertySheetExtension,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerPropertySheetExtension,
    0,
    0,
    0,
    release_QDesignerPropertySheetExtension,
    cast_QDesignerPropertySheetExtension,
    0,
    0,
    0
},
    0,
    0,
    0
};
