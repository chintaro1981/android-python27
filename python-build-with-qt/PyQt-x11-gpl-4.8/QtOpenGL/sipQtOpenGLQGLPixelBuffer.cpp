/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:36 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtOpenGL/qglpixelbuffer.sip"
#include <qglpixelbuffer.h>
#line 39 "sipQtOpenGLQGLPixelBuffer.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 86 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 46 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 317 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 49 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 52 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 55 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 58 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 64 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 67 "sipQtOpenGLQGLPixelBuffer.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 70 "sipQtOpenGLQGLPixelBuffer.cpp"


class sipQGLPixelBuffer : public QGLPixelBuffer
{
public:
    sipQGLPixelBuffer(const QSize&,const QGLFormat&,QGLWidget *);
    sipQGLPixelBuffer(int,int,const QGLFormat&,QGLWidget *);
    virtual ~sipQGLPixelBuffer();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    int sipProtectVirt_devType(bool) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    int devType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGLPixelBuffer(const sipQGLPixelBuffer &);
    sipQGLPixelBuffer &operator = (const sipQGLPixelBuffer &);

    char sipPyMethods[3];
};

sipQGLPixelBuffer::sipQGLPixelBuffer(const QSize& a0,const QGLFormat& a1,QGLWidget *a2): QGLPixelBuffer(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLPixelBuffer::sipQGLPixelBuffer(int a0,int a1,const QGLFormat& a2,QGLWidget *a3): QGLPixelBuffer(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLPixelBuffer::~sipQGLPixelBuffer()
{
    sipCommonDtor(sipPySelf);
}

QPaintEngine * sipQGLPixelBuffer::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QGLPixelBuffer::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[27]))(sipGILState,meth);
}

int sipQGLPixelBuffer::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QGLPixelBuffer::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[14]))(sipGILState,meth,a0);
}

int sipQGLPixelBuffer::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QGLPixelBuffer::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQGLPixelBuffer::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QGLPixelBuffer::metric(a0) : metric(a0));
}

int sipQGLPixelBuffer::sipProtectVirt_devType(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QGLPixelBuffer::devType() : devType());
}


extern "C" {static PyObject *meth_QGLPixelBuffer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->makeCurrent();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_makeCurrent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doneCurrent();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_doneCurrent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_generateDynamicTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_generateDynamicTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->generateDynamicTexture();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_generateDynamicTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_bindToDynamicTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_bindToDynamicTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bindToDynamicTexture(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_bindToDynamicTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_releaseFromDynamicTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_releaseFromDynamicTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->releaseFromDynamicTexture();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_releaseFromDynamicTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_updateDynamicTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_updateDynamicTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateDynamicTexture(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_updateDynamicTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_bindTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_bindTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage * a0;
        GLenum a1 = GL_TEXTURE_2D;
        QGLPixelBuffer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|u", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QImage, &a0, &a1))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bindTexture(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QPixmap * a0;
        GLenum a1 = GL_TEXTURE_2D;
        QGLPixelBuffer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|u", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QPixmap, &a0, &a1))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bindTexture(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QGLPixelBuffer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bindTexture(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_bindTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_drawTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_drawTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLPixelBuffer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|u", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTexture(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLPixelBuffer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|u", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QPointF, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTexture(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_drawTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_deleteTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_deleteTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->deleteTexture(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_deleteTexture, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_size(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_handle(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_handle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_toImage(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->toImage());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_toImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGLPixelBuffer::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_paintEngine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_format(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            QGLFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_format, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_hasOpenGLPbuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_hasOpenGLPbuffers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QGLPixelBuffer::hasOpenGLPbuffers();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_hasOpenGLPbuffers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_metric(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGLPixelBuffer, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLPixelBuffer_devType(PyObject *, PyObject *);}
static PyObject *meth_QGLPixelBuffer_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQGLPixelBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLPixelBuffer, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_devType(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLPixelBuffer, sipName_devType, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGLPixelBuffer(void *, const sipTypeDef *);}
static void *cast_QGLPixelBuffer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGLPixelBuffer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QGLPixelBuffer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLPixelBuffer(void *, int);}
static void release_QGLPixelBuffer(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGLPixelBuffer *>(sipCppV);
    else
        delete reinterpret_cast<QGLPixelBuffer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGLPixelBuffer(sipSimpleWrapper *);}
static void dealloc_QGLPixelBuffer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGLPixelBuffer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGLPixelBuffer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QGLPixelBuffer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGLPixelBuffer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGLPixelBuffer *sipCpp = 0;

    {
        const QSize * a0;
        const QGLFormat& a1def = QGLFormat::defaultFormat();
        const QGLFormat * a1 = &a1def;
        QGLWidget * a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_shareWidget,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J9J8", sipType_QSize, &a0, sipType_QGLFormat, &a1, sipType_QGLWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLPixelBuffer(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        const QGLFormat& a2def = QGLFormat::defaultFormat();
        const QGLFormat * a2 = &a2def;
        QGLWidget * a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_format,
            sipName_shareWidget,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|J9J8", &a0, &a1, sipType_QGLFormat, &a2, sipType_QGLWidget, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLPixelBuffer(a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGLPixelBuffer[] = {{356, 1, 1}};


static PyMethodDef methods_QGLPixelBuffer[] = {
    {SIP_MLNAME_CAST(sipName_bindTexture), (PyCFunction)meth_QGLPixelBuffer_bindTexture, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_bindToDynamicTexture), meth_QGLPixelBuffer_bindToDynamicTexture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteTexture), meth_QGLPixelBuffer_deleteTexture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_devType), meth_QGLPixelBuffer_devType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QGLPixelBuffer_doneCurrent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTexture), (PyCFunction)meth_QGLPixelBuffer_drawTexture, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QGLPixelBuffer_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_generateDynamicTexture), meth_QGLPixelBuffer_generateDynamicTexture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_handle), meth_QGLPixelBuffer_handle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOpenGLPbuffers), meth_QGLPixelBuffer_hasOpenGLPbuffers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QGLPixelBuffer_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QGLPixelBuffer_makeCurrent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QGLPixelBuffer_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QGLPixelBuffer_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseFromDynamicTexture), meth_QGLPixelBuffer_releaseFromDynamicTexture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QGLPixelBuffer_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QGLPixelBuffer_toImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateDynamicTexture), meth_QGLPixelBuffer_updateDynamicTexture, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtOpenGL_QGLPixelBuffer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGLPixelBuffer,
        {0}
    },
    {
        sipNameNr_QGLPixelBuffer,
        {0, 0, 1},
        18, methods_QGLPixelBuffer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGLPixelBuffer,
    0,
    init_QGLPixelBuffer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLPixelBuffer,
    0,
    0,
    0,
    release_QGLPixelBuffer,
    cast_QGLPixelBuffer,
    0,
    0,
    0
},
    0,
    0,
    0
};
