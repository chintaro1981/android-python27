/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:45 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 39 "sipQtSqlQSqlQuery.cpp"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 43 "sipQtSqlQSqlQuery.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtSqlQSqlQuery.cpp"
#line 47 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 49 "sipQtSqlQSqlQuery.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 52 "sipQtSqlQSqlQuery.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtSqlQSqlQuery.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 58 "sipQtSqlQSqlQuery.cpp"
#line 82 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "sipQtSqlQSqlQuery.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtSqlQSqlQuery.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 67 "sipQtSqlQSqlQuery.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 70 "sipQtSqlQSqlQuery.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 73 "sipQtSqlQSqlQuery.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 76 "sipQtSqlQSqlQuery.cpp"


extern "C" {static PyObject *meth_QSqlQuery_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isActive, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_at(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->at();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_at, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_lastQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->lastQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_numRowsAffected(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_numRowsAffected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numRowsAffected();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_numRowsAffected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSqlError *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlError(sipCpp->lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_isSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelect();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isSelect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_size(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            const QSqlDriver *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->driver();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QSqlDriver *>(sipRes),sipType_QSqlDriver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_driver, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_result(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_result(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            const QSqlResult *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->result();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QSqlResult *>(sipRes),sipType_QSqlResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_result, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_isForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isForwardOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isForwardOnly, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSqlRecord *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlRecord(sipCpp->record());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_record, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_setForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_setForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForwardOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_setForwardOnly, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_exec_(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_exec_, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_value(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->value(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_value, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_seek(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_seek(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1 = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_relative,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->seek(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_seek, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_next(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->next();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_next, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_previous(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_previous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->previous();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_previous, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_first(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->first();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_first, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_last(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->last();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_last, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_execBatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_execBatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery::BatchExecutionMode a0 = QSqlQuery::ValuesAsRows;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QSqlQuery_BatchExecutionMode, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->execBatch(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_execBatch, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_prepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->prepare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_prepare, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_bindValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_bindValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QVariant * a1;
        int a1State = 0;
        QSql::ParamType a2def = QSql::In;
        QSql::ParamType * a2 = &a2def;
        int a2State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->bindValue(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVariant * a1;
        int a1State = 0;
        QSql::ParamType a2def = QSql::In;
        QSql::ParamType * a2 = &a2def;
        int a2State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0, sipType_QVariant,&a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->bindValue(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_bindValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_addBindValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_addBindValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;
        QSql::ParamType a1def = QSql::In;
        QSql::ParamType * a1 = &a1def;
        int a1State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QVariant,&a0, &a0State, sipType_QSql_ParamType, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addBindValue(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QSql_ParamType,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_addBindValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_boundValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_boundValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->boundValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        int a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->boundValue(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_boundValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_boundValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_boundValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QMap<QString,QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QVariant>(sipCpp->boundValues());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_boundValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_executedQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_executedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->executedQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_executedQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_lastInsertId(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastInsertId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->lastInsertId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastInsertId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::NumericalPrecisionPolicy a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumericalPrecisionPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_setNumericalPrecisionPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSql::NumericalPrecisionPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numericalPrecisionPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_numericalPrecisionPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_finish(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_finish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->finish();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_finish, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlQuery_nextResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_nextResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nextResult();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_nextResult, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlQuery(void *, const sipTypeDef *);}
static void *cast_QSqlQuery(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSqlQuery)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlQuery(void *, int);}
static void release_QSqlQuery(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QSqlQuery *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSqlQuery(void *, SIP_SSIZE_T, const void *);}
static void assign_QSqlQuery(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSqlQuery *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSqlQuery *>(sipSrc);
}


extern "C" {static void *array_QSqlQuery(SIP_SSIZE_T);}
static void *array_QSqlQuery(SIP_SSIZE_T sipNrElem)
{
    return new QSqlQuery[sipNrElem];
}


extern "C" {static void *copy_QSqlQuery(const void *, SIP_SSIZE_T);}
static void *copy_QSqlQuery(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSqlQuery(reinterpret_cast<const QSqlQuery *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSqlQuery(sipSimpleWrapper *);}
static void dealloc_QSqlQuery(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlQuery(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QSqlQuery(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSqlQuery(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSqlQuery *sipCpp = 0;

    {
        QSqlResult * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QSqlResult, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlQuery(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QSqlDatabase a1def = QSqlDatabase();
        QSqlDatabase * a1 = &a1def;

        static const char *sipKwdList[] = {
            sipName_query,
            sipName_db,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J9", sipType_QString,&a0, &a0State, sipType_QSqlDatabase, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlQuery(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        QSqlDatabase * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlDatabase, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlQuery(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QSqlQuery * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlQuery, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlQuery(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSqlQuery[] = {
    {SIP_MLNAME_CAST(sipName_addBindValue), (PyCFunction)meth_QSqlQuery_addBindValue, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_at), meth_QSqlQuery_at, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bindValue), (PyCFunction)meth_QSqlQuery_bindValue, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValue), meth_QSqlQuery_boundValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValues), meth_QSqlQuery_boundValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlQuery_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_driver), meth_QSqlQuery_driver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_execBatch), (PyCFunction)meth_QSqlQuery_execBatch, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QSqlQuery_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executedQuery), meth_QSqlQuery_executedQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_finish), meth_QSqlQuery_finish, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_first), meth_QSqlQuery_first, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QSqlQuery_isActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isForwardOnly), meth_QSqlQuery_isForwardOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSqlQuery_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelect), meth_QSqlQuery_isSelect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSqlQuery_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_last), meth_QSqlQuery_last, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlQuery_lastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastInsertId), meth_QSqlQuery_lastInsertId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastQuery), meth_QSqlQuery_lastQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_next), meth_QSqlQuery_next, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextResult), meth_QSqlQuery_nextResult, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numRowsAffected), meth_QSqlQuery_numRowsAffected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numericalPrecisionPolicy), meth_QSqlQuery_numericalPrecisionPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QSqlQuery_prepare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previous), meth_QSqlQuery_previous, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlQuery_record, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_result), meth_QSqlQuery_result, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_seek), (PyCFunction)meth_QSqlQuery_seek, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setForwardOnly), meth_QSqlQuery_setForwardOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumericalPrecisionPolicy), meth_QSqlQuery_setNumericalPrecisionPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QSqlQuery_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_value), meth_QSqlQuery_value, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSqlQuery[] = {
    {sipName_ValuesAsColumns, QSqlQuery::ValuesAsColumns, 18},
    {sipName_ValuesAsRows, QSqlQuery::ValuesAsRows, 18},
};


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlQuery = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSqlQuery,
        {0}
    },
    {
        sipNameNr_QSqlQuery,
        {0, 0, 1},
        34, methods_QSqlQuery,
        2, enummembers_QSqlQuery,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QSqlQuery,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlQuery,
    assign_QSqlQuery,
    array_QSqlQuery,
    copy_QSqlQuery,
    release_QSqlQuery,
    cast_QSqlQuery,
    0,
    0,
    0
},
    0,
    0,
    0
};
