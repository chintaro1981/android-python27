/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:45 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 39 "sipQtSqlQSqlResult.cpp"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 43 "sipQtSqlQSqlResult.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "sipQtSqlQSqlResult.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 49 "sipQtSqlQSqlResult.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtSqlQSqlResult.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 55 "sipQtSqlQSqlResult.cpp"
#line 130 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "sipQtSqlQSqlResult.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 61 "sipQtSqlQSqlResult.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 64 "sipQtSqlQSqlResult.cpp"


class sipQSqlResult : public QSqlResult
{
public:
    sipQSqlResult(const QSqlDriver *);
    virtual ~sipQSqlResult();

    /* Expose this protected enum. */
    enum sipBindingSyntax {
        PositionalBinding = QSqlResult::PositionalBinding,
        NamedBinding = QSqlResult::NamedBinding
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_at() const;
    QString sipProtect_lastQuery() const;
    QSqlError sipProtect_lastError() const;
    bool sipProtect_isValid() const;
    bool sipProtect_isActive() const;
    bool sipProtect_isSelect() const;
    bool sipProtect_isForwardOnly() const;
    const QSqlDriver * sipProtect_driver() const;
    void sipProtectVirt_setAt(bool,int);
    void sipProtectVirt_setActive(bool,bool);
    void sipProtectVirt_setLastError(bool,const QSqlError&);
    void sipProtectVirt_setQuery(bool,const QString&);
    void sipProtectVirt_setSelect(bool,bool);
    void sipProtectVirt_setForwardOnly(bool,bool);
    bool sipProtectVirt_exec(bool);
    bool sipProtectVirt_prepare(bool,const QString&);
    bool sipProtectVirt_savePrepare(bool,const QString&);
    void sipProtectVirt_bindValue(bool,int,const QVariant&,QSql::ParamType);
    void sipProtectVirt_bindValue(bool,const QString&,const QVariant&,QSql::ParamType);
    void sipProtect_addBindValue(const QVariant&,QSql::ParamType);
    QVariant sipProtect_boundValue(const QString&) const;
    QVariant sipProtect_boundValue(int) const;
    QSql::ParamType sipProtect_bindValueType(const QString&) const;
    QSql::ParamType sipProtect_bindValueType(int) const;
    int sipProtect_boundValueCount() const;
    QVector<QVariant>& sipProtect_boundValues() const;
    QString sipProtect_executedQuery() const;
    QString sipProtect_boundValueName(int) const;
    void sipProtect_clear();
    bool sipProtect_hasOutValues() const;
    int sipProtect_bindingSyntax() const;
    QVariant sipProtect_data(int);
    bool sipProtect_isNull(int);
    bool sipProtect_reset(const QString&);
    bool sipProtect_fetch(int);
    bool sipProtectVirt_fetchNext(bool);
    bool sipProtectVirt_fetchPrevious(bool);
    bool sipProtect_fetchFirst();
    bool sipProtect_fetchLast();
    int sipProtect_size();
    int sipProtect_numRowsAffected();
    QSqlRecord sipProtectVirt_record(bool) const;
    QVariant sipProtectVirt_lastInsertId(bool) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant handle() const;
    void setAt(int);
    void setActive(bool);
    void setLastError(const QSqlError&);
    void setQuery(const QString&);
    void setSelect(bool);
    void setForwardOnly(bool);
    bool exec();
    bool prepare(const QString&);
    bool savePrepare(const QString&);
    void bindValue(int,const QVariant&,QSql::ParamType);
    void bindValue(const QString&,const QVariant&,QSql::ParamType);
    QVariant data(int);
    bool isNull(int);
    bool reset(const QString&);
    bool fetch(int);
    bool fetchNext();
    bool fetchPrevious();
    bool fetchFirst();
    bool fetchLast();
    int size();
    int numRowsAffected();
    QSqlRecord record() const;
    QVariant lastInsertId() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlResult(const sipQSqlResult &);
    sipQSqlResult &operator = (const sipQSqlResult &);

    char sipPyMethods[24];
};

sipQSqlResult::sipQSqlResult(const QSqlDriver *a0): QSqlResult(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlResult::~sipQSqlResult()
{
    sipCommonDtor(sipPySelf);
}

QVariant sipQSqlResult::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_handle);

    if (!meth)
        return QSqlResult::handle();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t,PyObject *);

    return sipVH_QtSql_3(sipGILState,meth);
}

void sipQSqlResult::setAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setAt);

    if (!meth)
    {
        QSqlResult::setAt(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtSql_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQSqlResult::setActive(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setActive);

    if (!meth)
    {
        QSqlResult::setActive(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtSql_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipQSqlResult::setLastError(const QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setLastError);

    if (!meth)
    {
        QSqlResult::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_7(sip_gilstate_t,PyObject *,const QSqlError&);

    sipVH_QtSql_7(sipGILState,meth,a0);
}

void sipQSqlResult::setQuery(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setQuery);

    if (!meth)
    {
        QSqlResult::setQuery(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtSql_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

void sipQSqlResult::setSelect(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setSelect);

    if (!meth)
    {
        QSqlResult::setSelect(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtSql_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipQSqlResult::setForwardOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setForwardOnly);

    if (!meth)
    {
        QSqlResult::setForwardOnly(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtSql_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

bool sipQSqlResult::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_exec_);

    if (!meth)
        return QSqlResult::exec();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQSqlResult::prepare(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_prepare);

    if (!meth)
        return QSqlResult::prepare(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtSql_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQSqlResult::savePrepare(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_savePrepare);

    if (!meth)
        return QSqlResult::savePrepare(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtSql_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

void sipQSqlResult::bindValue(int a0,const QVariant& a1,QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_bindValue);

    if (!meth)
    {
        QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_6(sip_gilstate_t,PyObject *,int,const QVariant&,QSql::ParamType);

    sipVH_QtSql_6(sipGILState,meth,a0,a1,a2);
}

void sipQSqlResult::bindValue(const QString& a0,const QVariant& a1,QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_bindValue);

    if (!meth)
    {
        QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_5(sip_gilstate_t,PyObject *,const QString&,const QVariant&,QSql::ParamType);

    sipVH_QtSql_5(sipGILState,meth,a0,a1,a2);
}

QVariant sipQSqlResult::data(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QSqlResult,sipName_data);

    if (!meth)
        return QVariant();

    typedef QVariant (*sipVH_QtGui_69)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_69)(sipModuleAPI_QtSql_QtGui->em_virthandlers[69]))(sipGILState,meth,a0);
}

bool sipQSqlResult::isNull(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_QSqlResult,sipName_isNull);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtSql_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQSqlResult::reset(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QSqlResult,sipName_reset);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtSql_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQSqlResult::fetch(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_QSqlResult,sipName_fetch);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_23)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtSql_QtCore->em_virthandlers[23]))(sipGILState,meth,a0);
}

bool sipQSqlResult::fetchNext()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_fetchNext);

    if (!meth)
        return QSqlResult::fetchNext();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQSqlResult::fetchPrevious()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_fetchPrevious);

    if (!meth)
        return QSqlResult::fetchPrevious();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQSqlResult::fetchFirst()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_QSqlResult,sipName_fetchFirst);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQSqlResult::fetchLast()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,sipName_QSqlResult,sipName_fetchLast);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

int sipQSqlResult::size()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,sipName_QSqlResult,sipName_size);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtSql_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

int sipQSqlResult::numRowsAffected()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,sipName_QSqlResult,sipName_numRowsAffected);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtSql_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

QSqlRecord sipQSqlResult::record() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_record);

    if (!meth)
        return QSqlResult::record();

    extern QSqlRecord sipVH_QtSql_4(sip_gilstate_t,PyObject *);

    return sipVH_QtSql_4(sipGILState,meth);
}

QVariant sipQSqlResult::lastInsertId() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_lastInsertId);

    if (!meth)
        return QSqlResult::lastInsertId();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t,PyObject *);

    return sipVH_QtSql_3(sipGILState,meth);
}

int sipQSqlResult::sipProtect_at() const
{
    return QSqlResult::at();
}

QString sipQSqlResult::sipProtect_lastQuery() const
{
    return QSqlResult::lastQuery();
}

QSqlError sipQSqlResult::sipProtect_lastError() const
{
    return QSqlResult::lastError();
}

bool sipQSqlResult::sipProtect_isValid() const
{
    return QSqlResult::isValid();
}

bool sipQSqlResult::sipProtect_isActive() const
{
    return QSqlResult::isActive();
}

bool sipQSqlResult::sipProtect_isSelect() const
{
    return QSqlResult::isSelect();
}

bool sipQSqlResult::sipProtect_isForwardOnly() const
{
    return QSqlResult::isForwardOnly();
}

const QSqlDriver * sipQSqlResult::sipProtect_driver() const
{
    return QSqlResult::driver();
}

void sipQSqlResult::sipProtectVirt_setAt(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QSqlResult::setAt(a0) : setAt(a0));
}

void sipQSqlResult::sipProtectVirt_setActive(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlResult::setActive(a0) : setActive(a0));
}

void sipQSqlResult::sipProtectVirt_setLastError(bool sipSelfWasArg,const QSqlError& a0)
{
    (sipSelfWasArg ? QSqlResult::setLastError(a0) : setLastError(a0));
}

void sipQSqlResult::sipProtectVirt_setQuery(bool sipSelfWasArg,const QString& a0)
{
    (sipSelfWasArg ? QSqlResult::setQuery(a0) : setQuery(a0));
}

void sipQSqlResult::sipProtectVirt_setSelect(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlResult::setSelect(a0) : setSelect(a0));
}

void sipQSqlResult::sipProtectVirt_setForwardOnly(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlResult::setForwardOnly(a0) : setForwardOnly(a0));
}

bool sipQSqlResult::sipProtectVirt_exec(bool sipSelfWasArg)
{
    return (sipSelfWasArg ? QSqlResult::exec() : exec());
}

bool sipQSqlResult::sipProtectVirt_prepare(bool sipSelfWasArg,const QString& a0)
{
    return (sipSelfWasArg ? QSqlResult::prepare(a0) : prepare(a0));
}

bool sipQSqlResult::sipProtectVirt_savePrepare(bool sipSelfWasArg,const QString& a0)
{
    return (sipSelfWasArg ? QSqlResult::savePrepare(a0) : savePrepare(a0));
}

void sipQSqlResult::sipProtectVirt_bindValue(bool sipSelfWasArg,int a0,const QVariant& a1,QSql::ParamType a2)
{
    (sipSelfWasArg ? QSqlResult::bindValue(a0,a1,a2) : bindValue(a0,a1,a2));
}

void sipQSqlResult::sipProtectVirt_bindValue(bool sipSelfWasArg,const QString& a0,const QVariant& a1,QSql::ParamType a2)
{
    (sipSelfWasArg ? QSqlResult::bindValue(a0,a1,a2) : bindValue(a0,a1,a2));
}

void sipQSqlResult::sipProtect_addBindValue(const QVariant& a0,QSql::ParamType a1)
{
    QSqlResult::addBindValue(a0,a1);
}

QVariant sipQSqlResult::sipProtect_boundValue(const QString& a0) const
{
    return QSqlResult::boundValue(a0);
}

QVariant sipQSqlResult::sipProtect_boundValue(int a0) const
{
    return QSqlResult::boundValue(a0);
}

QSql::ParamType sipQSqlResult::sipProtect_bindValueType(const QString& a0) const
{
    return QSqlResult::bindValueType(a0);
}

QSql::ParamType sipQSqlResult::sipProtect_bindValueType(int a0) const
{
    return QSqlResult::bindValueType(a0);
}

int sipQSqlResult::sipProtect_boundValueCount() const
{
    return QSqlResult::boundValueCount();
}

QVector<QVariant>& sipQSqlResult::sipProtect_boundValues() const
{
    return QSqlResult::boundValues();
}

QString sipQSqlResult::sipProtect_executedQuery() const
{
    return QSqlResult::executedQuery();
}

QString sipQSqlResult::sipProtect_boundValueName(int a0) const
{
    return QSqlResult::boundValueName(a0);
}

void sipQSqlResult::sipProtect_clear()
{
    QSqlResult::clear();
}

bool sipQSqlResult::sipProtect_hasOutValues() const
{
    return QSqlResult::hasOutValues();
}

int sipQSqlResult::sipProtect_bindingSyntax() const
{
    return (int)QSqlResult::bindingSyntax();
}

QVariant sipQSqlResult::sipProtect_data(int a0)
{
    return data(a0);
}

bool sipQSqlResult::sipProtect_isNull(int a0)
{
    return isNull(a0);
}

bool sipQSqlResult::sipProtect_reset(const QString& a0)
{
    return reset(a0);
}

bool sipQSqlResult::sipProtect_fetch(int a0)
{
    return fetch(a0);
}

bool sipQSqlResult::sipProtectVirt_fetchNext(bool sipSelfWasArg)
{
    return (sipSelfWasArg ? QSqlResult::fetchNext() : fetchNext());
}

bool sipQSqlResult::sipProtectVirt_fetchPrevious(bool sipSelfWasArg)
{
    return (sipSelfWasArg ? QSqlResult::fetchPrevious() : fetchPrevious());
}

bool sipQSqlResult::sipProtect_fetchFirst()
{
    return fetchFirst();
}

bool sipQSqlResult::sipProtect_fetchLast()
{
    return fetchLast();
}

int sipQSqlResult::sipProtect_size()
{
    return size();
}

int sipQSqlResult::sipProtect_numRowsAffected()
{
    return numRowsAffected();
}

QSqlRecord sipQSqlResult::sipProtectVirt_record(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QSqlResult::record() : record());
}

QVariant sipQSqlResult::sipProtectVirt_lastInsertId(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QSqlResult::lastInsertId() : lastInsertId());
}


extern "C" {static PyObject *meth_QSqlResult_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlResult::handle() : sipCpp->handle()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_handle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_at(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_at();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_at, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_lastQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtect_lastQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QSqlError *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlError(sipCpp->sipProtect_lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isActive, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_isSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_isSelect();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isSelect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_isForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_isForwardOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isForwardOnly, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            const QSqlDriver *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_driver();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QSqlDriver *>(sipRes),sipType_QSqlDriver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_driver, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setAt(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setAt(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setActive(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setActive, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlError * a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QSqlError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setLastError(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setLastError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setQuery(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setSelect(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setSelect, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_setForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setForwardOnly(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setForwardOnly, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_exec_(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_exec(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_exec_, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_prepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_prepare(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_prepare, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_savePrepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_savePrepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_savePrepare(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_savePrepare, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_bindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QVariant * a1;
        int a1State = 0;
        QSql::ParamType * a2;
        int a2State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, &a0, sipType_QVariant,&a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_bindValue(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QVariant * a1;
        int a1State = 0;
        QSql::ParamType * a2;
        int a2State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_bindValue(sipSelfWasArg,*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_addBindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_addBindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant * a0;
        int a0State = 0;
        QSql::ParamType * a1;
        int a1State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QVariant,&a0, &a0State, sipType_QSql_ParamType, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addBindValue(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QSql_ParamType,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_addBindValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_boundValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtect_boundValue(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtect_boundValue(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_bindValueType(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValueType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSql::ParamType *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSql::ParamType(sipCpp->sipProtect_bindValueType(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,NULL);
        }
    }

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QSql::ParamType *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSql::ParamType(sipCpp->sipProtect_bindValueType(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValueType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_boundValueCount(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_boundValueCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_boundValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVector<QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->sipProtect_boundValues();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QVector_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_executedQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_executedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtect_executedQuery());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_executedQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_boundValueName(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtect_boundValueName(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_hasOutValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_hasOutValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_hasOutValues();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_hasOutValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_bindingSyntax(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindingSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_bindingSyntax();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSqlResult_BindingSyntax);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindingSyntax, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_data(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QVariant *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_data);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtect_data(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_isNull);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_isNull(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_reset(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_reset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_reset(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_fetch(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetch);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_fetch(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetch, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_fetchNext(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_fetchNext(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchNext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_fetchPrevious(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_fetchPrevious(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchPrevious, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_fetchFirst(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchFirst);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_fetchFirst();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchFirst, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_fetchLast(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchLast);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_fetchLast();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchLast, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_size(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_size);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_numRowsAffected(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_numRowsAffected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_numRowsAffected);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_numRowsAffected();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_numRowsAffected, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QSqlRecord *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlRecord(sipCpp->sipProtectVirt_record(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_record, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlResult_lastInsertId(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastInsertId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtectVirt_lastInsertId(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastInsertId, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlResult(void *, const sipTypeDef *);}
static void *cast_QSqlResult(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSqlResult)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlResult(void *, int);}
static void release_QSqlResult(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlResult *>(sipCppV);
    else
        delete reinterpret_cast<QSqlResult *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSqlResult(sipSimpleWrapper *);}
static void dealloc_QSqlResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlResult *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlResult(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QSqlResult(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSqlResult(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSqlResult *sipCpp = 0;

    {
        const QSqlDriver * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QSqlDriver, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlResult(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSqlResult[] = {
    {SIP_MLNAME_CAST(sipName_addBindValue), meth_QSqlResult_addBindValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_at), meth_QSqlResult_at, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bindValue), meth_QSqlResult_bindValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bindValueType), meth_QSqlResult_bindValueType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bindingSyntax), meth_QSqlResult_bindingSyntax, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValue), meth_QSqlResult_boundValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValueCount), meth_QSqlResult_boundValueCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValueName), meth_QSqlResult_boundValueName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundValues), meth_QSqlResult_boundValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlResult_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QSqlResult_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_driver), meth_QSqlResult_driver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QSqlResult_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executedQuery), meth_QSqlResult_executedQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetch), meth_QSqlResult_fetch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchFirst), meth_QSqlResult_fetchFirst, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchLast), meth_QSqlResult_fetchLast, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchNext), meth_QSqlResult_fetchNext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchPrevious), meth_QSqlResult_fetchPrevious, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSqlResult_handle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOutValues), meth_QSqlResult_hasOutValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QSqlResult_isActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isForwardOnly), meth_QSqlResult_isForwardOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSqlResult_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelect), meth_QSqlResult_isSelect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSqlResult_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlResult_lastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastInsertId), meth_QSqlResult_lastInsertId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastQuery), meth_QSqlResult_lastQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numRowsAffected), meth_QSqlResult_numRowsAffected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QSqlResult_prepare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlResult_record, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QSqlResult_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_savePrepare), meth_QSqlResult_savePrepare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QSqlResult_setActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAt), meth_QSqlResult_setAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForwardOnly), meth_QSqlResult_setForwardOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLastError), meth_QSqlResult_setLastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQuery), meth_QSqlResult_setQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelect), meth_QSqlResult_setSelect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QSqlResult_size, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSqlResult[] = {
    {sipName_NamedBinding, sipQSqlResult::NamedBinding, 25},
    {sipName_PositionalBinding, sipQSqlResult::PositionalBinding, 25},
};


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlResult = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QSqlResult,
        {0}
    },
    {
        sipNameNr_QSqlResult,
        {0, 0, 1},
        41, methods_QSqlResult,
        2, enummembers_QSqlResult,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_QSqlResult,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlResult,
    0,
    0,
    0,
    release_QSqlResult,
    cast_QSqlResult,
    0,
    0,
    0
},
    0,
    0,
    0
};
