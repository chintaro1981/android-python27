/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:45 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 47 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 39 "sipQtSqlQSqlDatabase.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 46 "sipQtSqlQSqlDatabase.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 49 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 52 "sipQtSqlQSqlDatabase.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 55 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 58 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 61 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 64 "sipQtSqlQSqlDatabase.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 67 "sipQtSqlQSqlDatabase.cpp"


class sipQSqlDatabase : public QSqlDatabase
{
public:
    sipQSqlDatabase();
    sipQSqlDatabase(const QSqlDatabase&);
    sipQSqlDatabase(const QString&);
    sipQSqlDatabase(QSqlDriver *);
    ~sipQSqlDatabase();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlDatabase(const sipQSqlDatabase &);
    sipQSqlDatabase &operator = (const sipQSqlDatabase &);
};

sipQSqlDatabase::sipQSqlDatabase(): QSqlDatabase(), sipPySelf(0)
{
}

sipQSqlDatabase::sipQSqlDatabase(const QSqlDatabase& a0): QSqlDatabase(a0), sipPySelf(0)
{
}

sipQSqlDatabase::sipQSqlDatabase(const QString& a0): QSqlDatabase(a0), sipPySelf(0)
{
}

sipQSqlDatabase::sipQSqlDatabase(QSqlDriver *a0): QSqlDatabase(a0), sipPySelf(0)
{
}

sipQSqlDatabase::~sipQSqlDatabase()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_QSqlDatabase_open(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_open, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_close(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_close, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOpen();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_isOpen, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_isOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_isOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOpenError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_isOpenError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_tables(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_tables(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::TableType a0 = QSql::Tables;
        QSqlDatabase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QSql_TableType, &a0))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->tables(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_tables, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_primaryIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_primaryIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlIndex(sipCpp->primaryIndex(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_primaryIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlRecord *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlRecord(sipCpp->record(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_record, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_query,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlQuery *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlQuery(sipCpp->exec(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlQuery,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_exec_, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QSqlError *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlError(sipCpp->lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_lastError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_transaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_transaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->transaction();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_transaction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_commit(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_commit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->commit();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_commit, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_rollback(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_rollback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rollback();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_rollback, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setDatabaseName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setDatabaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDatabaseName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setDatabaseName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setUserName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setUserName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setUserName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setPassword(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPassword(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setPassword, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setHostName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHostName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setHostName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setPort(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlDatabase, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPort(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setPort, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setConnectOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setConnectOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QSqlDatabase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConnectOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setConnectOptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_databaseName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_databaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->databaseName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_databaseName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_userName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_userName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->userName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_userName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_password(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_password(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->password());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_password, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_hostName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_hostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->hostName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_hostName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_driverName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_driverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->driverName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_driverName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_port(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_port, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_connectOptions(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_connectOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->connectOptions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_connectOptions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_connectionName(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_connectionName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->connectionName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_connectionName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QSqlDriver *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->driver();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QSqlDriver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_driver, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_addDatabase(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_addDatabase(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QLatin1String(QSqlDatabase::defaultConnection);
        const QString * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_connectionName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QSqlDatabase *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlDatabase(QSqlDatabase::addDatabase(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSqlDatabase,NULL);
        }
    }

    {
        QSqlDriver * a0;
        const QString& a1def = QLatin1String(QSqlDatabase::defaultConnection);
        const QString * a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_connectionName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J1", sipType_QSqlDriver, &a0, sipType_QString,&a1, &a1State))
        {
            QSqlDatabase *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlDatabase(QSqlDatabase::addDatabase(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSqlDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_addDatabase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_cloneDatabase(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_cloneDatabase(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDatabase * a0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QSqlDatabase, &a0, sipType_QString,&a1, &a1State))
        {
            QSqlDatabase *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlDatabase(QSqlDatabase::cloneDatabase(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSqlDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_cloneDatabase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_database(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_database(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QLatin1String(QSqlDatabase::defaultConnection);
        const QString * a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            sipName_connectionName,
            sipName_open,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1b", sipType_QString,&a0, &a0State, &a1))
        {
            QSqlDatabase *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlDatabase(QSqlDatabase::database(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_database, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_removeDatabase(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_removeDatabase(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSqlDatabase::removeDatabase(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_removeDatabase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_contains(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QLatin1String(QSqlDatabase::defaultConnection);
        const QString * a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_connectionName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSqlDatabase::contains(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_contains, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_drivers(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_drivers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QSqlDatabase::drivers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_drivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_connectionNames(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_connectionNames(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QSqlDatabase::connectionNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_connectionNames, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_registerSqlDriver(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_registerSqlDriver(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriverCreatorBase * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J:", sipType_QString,&a0, &a0State, sipType_QSqlDriverCreatorBase, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QSqlDatabase::registerSqlDriver(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_registerSqlDriver, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_isDriverAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_isDriverAvailable(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSqlDatabase::isDriverAvailable(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_isDriverAvailable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::NumericalPrecisionPolicy a0;
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDatabase, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumericalPrecisionPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_setNumericalPrecisionPolicy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDatabase_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDatabase_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDatabase, &sipCpp))
        {
            QSql::NumericalPrecisionPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numericalPrecisionPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDatabase, sipName_numericalPrecisionPolicy, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlDatabase(void *, const sipTypeDef *);}
static void *cast_QSqlDatabase(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSqlDatabase)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlDatabase(void *, int);}
static void release_QSqlDatabase(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlDatabase *>(sipCppV);
    else
        delete reinterpret_cast<QSqlDatabase *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSqlDatabase(void *, SIP_SSIZE_T, const void *);}
static void assign_QSqlDatabase(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSqlDatabase *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSqlDatabase *>(sipSrc);
}


extern "C" {static void *array_QSqlDatabase(SIP_SSIZE_T);}
static void *array_QSqlDatabase(SIP_SSIZE_T sipNrElem)
{
    return new QSqlDatabase[sipNrElem];
}


extern "C" {static void *copy_QSqlDatabase(const void *, SIP_SSIZE_T);}
static void *copy_QSqlDatabase(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSqlDatabase(reinterpret_cast<const QSqlDatabase *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSqlDatabase(sipSimpleWrapper *);}
static void dealloc_QSqlDatabase(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlDatabase *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlDatabase(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QSqlDatabase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSqlDatabase(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSqlDatabase *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDatabase();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QSqlDatabase * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlDatabase, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDatabase(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDatabase(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QSqlDriver * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QSqlDriver, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDatabase(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSqlDatabase[] = {
    {SIP_MLNAME_CAST(sipName_addDatabase), (PyCFunction)meth_QSqlDatabase_addDatabase, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cloneDatabase), meth_QSqlDatabase_cloneDatabase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QSqlDatabase_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commit), meth_QSqlDatabase_commit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectOptions), meth_QSqlDatabase_connectOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectionName), meth_QSqlDatabase_connectionName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectionNames), meth_QSqlDatabase_connectionNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), (PyCFunction)meth_QSqlDatabase_contains, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_database), (PyCFunction)meth_QSqlDatabase_database, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_databaseName), meth_QSqlDatabase_databaseName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_driver), meth_QSqlDatabase_driver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_driverName), meth_QSqlDatabase_driverName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drivers), meth_QSqlDatabase_drivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), (PyCFunction)meth_QSqlDatabase_exec_, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hostName), meth_QSqlDatabase_hostName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDriverAvailable), meth_QSqlDatabase_isDriverAvailable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QSqlDatabase_isOpen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isOpenError), meth_QSqlDatabase_isOpenError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSqlDatabase_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlDatabase_lastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numericalPrecisionPolicy), meth_QSqlDatabase_numericalPrecisionPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QSqlDatabase_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_password), meth_QSqlDatabase_password, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_port), meth_QSqlDatabase_port, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_primaryIndex), meth_QSqlDatabase_primaryIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlDatabase_record, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerSqlDriver), meth_QSqlDatabase_registerSqlDriver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeDatabase), meth_QSqlDatabase_removeDatabase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rollback), meth_QSqlDatabase_rollback, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setConnectOptions), (PyCFunction)meth_QSqlDatabase_setConnectOptions, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setDatabaseName), meth_QSqlDatabase_setDatabaseName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHostName), meth_QSqlDatabase_setHostName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumericalPrecisionPolicy), meth_QSqlDatabase_setNumericalPrecisionPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPassword), meth_QSqlDatabase_setPassword, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QSqlDatabase_setPort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserName), meth_QSqlDatabase_setUserName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tables), (PyCFunction)meth_QSqlDatabase_tables, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_transaction), meth_QSqlDatabase_transaction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userName), meth_QSqlDatabase_userName, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlDatabase = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSqlDatabase,
        {0}
    },
    {
        sipNameNr_QSqlDatabase,
        {0, 0, 1},
        39, methods_QSqlDatabase,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QSqlDatabase,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlDatabase,
    assign_QSqlDatabase,
    array_QSqlDatabase,
    copy_QSqlDatabase,
    release_QSqlDatabase,
    cast_QSqlDatabase,
    0,
    0,
    0
},
    0,
    0,
    0
};
