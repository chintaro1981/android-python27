/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:49 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSvg.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtSvg/qsvggenerator.sip"
#include <qsvggenerator.h>
#line 39 "sipQtSvgQSvgGenerator.cpp"

#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 43 "sipQtSvgQSvgGenerator.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 46 "sipQtSvgQSvgGenerator.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtSvgQSvgGenerator.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "sipQtSvgQSvgGenerator.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtSvgQSvgGenerator.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 58 "sipQtSvgQSvgGenerator.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 61 "sipQtSvgQSvgGenerator.cpp"


class sipQSvgGenerator : public QSvgGenerator
{
public:
    sipQSvgGenerator();
    virtual ~sipQSvgGenerator();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QPaintEngine * sipProtectVirt_paintEngine(bool) const;
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSvgGenerator(const sipQSvgGenerator &);
    sipQSvgGenerator &operator = (const sipQSvgGenerator &);

    char sipPyMethods[2];
};

sipQSvgGenerator::sipQSvgGenerator(): QSvgGenerator(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgGenerator::~sipQSvgGenerator()
{
    sipCommonDtor(sipPySelf);
}

QPaintEngine * sipQSvgGenerator::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QSvgGenerator::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtSvg_QtGui->em_virthandlers[27]))(sipGILState,meth);
}

int sipQSvgGenerator::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QSvgGenerator::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtSvg_QtGui->em_virthandlers[14]))(sipGILState,meth,a0);
}

QPaintEngine * sipQSvgGenerator::sipProtectVirt_paintEngine(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QSvgGenerator::paintEngine() : paintEngine());
}

int sipQSvgGenerator::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QSvgGenerator::metric(a0) : metric(a0));
}


extern "C" {static PyObject *meth_QSvgGenerator_size(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setSize(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize * a0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_fileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setFileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_outputDevice(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_outputDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->outputDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_outputDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setOutputDevice(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setOutputDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice * a0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setOutputDevice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_resolution(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolution();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_resolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgGenerator, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResolution(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setResolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_title(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_title, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTitle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setTitle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_description(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_description, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescription(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setDescription, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_viewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_viewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->viewBox());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_viewBox, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_viewBoxF(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_viewBoxF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->viewBoxF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_viewBoxF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_setViewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_setViewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect * a0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewBox(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        QSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewBox(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_setViewBox, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgGenerator, &sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_paintEngine(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_paintEngine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QSvgGenerator_metric(PyObject *, PyObject *);}
static PyObject *meth_QSvgGenerator_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQSvgGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSvgGenerator, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgGenerator, sipName_metric, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSvgGenerator(void *, const sipTypeDef *);}
static void *cast_QSvgGenerator(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSvgGenerator)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QSvgGenerator *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSvgGenerator(void *, int);}
static void release_QSvgGenerator(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSvgGenerator *>(sipCppV);
    else
        delete reinterpret_cast<QSvgGenerator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSvgGenerator(sipSimpleWrapper *);}
static void dealloc_QSvgGenerator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSvgGenerator *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSvgGenerator(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QSvgGenerator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QSvgGenerator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSvgGenerator *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgGenerator();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSvgGenerator[] = {{356, 1, 1}};


static PyMethodDef methods_QSvgGenerator[] = {
    {SIP_MLNAME_CAST(sipName_description), meth_QSvgGenerator_description, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSvgGenerator_fileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QSvgGenerator_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_outputDevice), meth_QSvgGenerator_outputDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QSvgGenerator_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QSvgGenerator_resolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QSvgGenerator_setDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QSvgGenerator_setFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutputDevice), meth_QSvgGenerator_setOutputDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QSvgGenerator_setResolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QSvgGenerator_setSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QSvgGenerator_setTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewBox), meth_QSvgGenerator_setViewBox, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QSvgGenerator_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QSvgGenerator_title, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewBox), meth_QSvgGenerator_viewBox, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewBoxF), meth_QSvgGenerator_viewBoxF, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtSvg_QSvgGenerator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSvgGenerator,
        {0}
    },
    {
        sipNameNr_QSvgGenerator,
        {0, 0, 1},
        17, methods_QSvgGenerator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QSvgGenerator,
    0,
    init_QSvgGenerator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSvgGenerator,
    0,
    0,
    0,
    release_QSvgGenerator,
    cast_QSvgGenerator,
    0,
    0,
    0
},
    0,
    0,
    0
};
