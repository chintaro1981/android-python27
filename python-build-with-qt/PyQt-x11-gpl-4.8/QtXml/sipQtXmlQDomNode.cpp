/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 67 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "sipQtXmlQDomNode.cpp"

#line 330 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 43 "sipQtXmlQDomNode.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtXmlQDomNode.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 49 "sipQtXmlQDomNode.cpp"
#line 382 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 52 "sipQtXmlQDomNode.cpp"
#line 293 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 55 "sipQtXmlQDomNode.cpp"
#line 447 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 58 "sipQtXmlQDomNode.cpp"
#line 406 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 61 "sipQtXmlQDomNode.cpp"
#line 420 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 64 "sipQtXmlQDomNode.cpp"
#line 369 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 67 "sipQtXmlQDomNode.cpp"
#line 435 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 70 "sipQtXmlQDomNode.cpp"
#line 193 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 73 "sipQtXmlQDomNode.cpp"
#line 211 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 76 "sipQtXmlQDomNode.cpp"
#line 281 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 79 "sipQtXmlQDomNode.cpp"
#line 394 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 82 "sipQtXmlQDomNode.cpp"
#line 313 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 85 "sipQtXmlQDomNode.cpp"
#line 255 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 88 "sipQtXmlQDomNode.cpp"
#line 173 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 91 "sipQtXmlQDomNode.cpp"


extern "C" {static PyObject *meth_QDomNode_insertBefore(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;
        const QDomNode * a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->insertBefore(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertBefore, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_insertAfter(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;
        const QDomNode * a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->insertAfter(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertAfter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_replaceChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_replaceChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;
        const QDomNode * a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->replaceChild(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_replaceChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->removeChild(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_removeChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_appendChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_appendChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->appendChild(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_appendChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_hasChildNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasChildNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasChildNodes();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasChildNodes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_cloneNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_cloneNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_deep,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QDomNode, &sipCpp, &a0))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->cloneNode(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_cloneNode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_normalize(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->normalize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_normalize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isSupported(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSupported(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isSupported, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_nodeName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->nodeName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode::NodeType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nodeType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_parentNode(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_parentNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->parentNode());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_parentNode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_childNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_childNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNodeList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNodeList(sipCpp->childNodes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_childNodes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_firstChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->firstChild());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_lastChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->lastChild());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_previousSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->previousSibling());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSibling, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_nextSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->nextSibling());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSibling, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_attributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNamedNodeMap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNamedNodeMap(sipCpp->attributes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNamedNodeMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_attributes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_ownerDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_ownerDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocument(sipCpp->ownerDocument());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_ownerDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_namespaceURI(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namespaceURI(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->namespaceURI());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namespaceURI, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_localName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->localName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_localName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_hasAttributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAttributes();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasAttributes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_nodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->nodeValue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNodeValue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setNodeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_prefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->prefix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_prefix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrefix(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setPrefix, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAttr();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isAttr, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCDATASection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCDATASection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDocumentFragment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDocument();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDocumentType();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isElement();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEntityReference();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntityReference, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEntity();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNotation();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNotation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isProcessingInstruction();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isProcessingInstruction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCharacterData();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCharacterData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isComment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isComment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_namedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->namedItem(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namedItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNull, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_clear(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomAttr *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomAttr(sipCpp->toAttr());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toAttr, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomCDATASection *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomCDATASection(sipCpp->toCDATASection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCDATASection, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocumentFragment(sipCpp->toDocumentFragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentFragment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocument(sipCpp->toDocument());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocumentType *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocumentType(sipCpp->toDocumentType());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->toElement());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomEntityReference *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomEntityReference(sipCpp->toEntityReference());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntityReference, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomText *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomText(sipCpp->toText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomText,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomEntity *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomEntity(sipCpp->toEntity());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomEntity,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNotation *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNotation(sipCpp->toNotation());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toNotation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomProcessingInstruction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomProcessingInstruction(sipCpp->toProcessingInstruction());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toProcessingInstruction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomCharacterData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomCharacterData(sipCpp->toCharacterData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomCharacterData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCharacterData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_toComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomComment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomComment(sipCpp->toComment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomComment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toComment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_save(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream * a0;
        int a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QTextStream, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTextStream * a0;
        int a1;
        QDomNode::EncodingPolicy a2;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iE", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QTextStream, &a0, &a1, sipType_QDomNode_EncodingPolicy, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_firstChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->firstChildElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChildElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_lastChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->lastChildElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChildElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_previousSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->previousSiblingElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSiblingElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_nextSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->nextSiblingElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSiblingElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lineNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomNode_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_columnNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_QDomNode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNode *sipCpp = reinterpret_cast<QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QDomNode::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,ne_slot,sipType_QDomNode,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDomNode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNode *sipCpp = reinterpret_cast<QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNode * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QDomNode::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,eq_slot,sipType_QDomNode,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomNode(void *, const sipTypeDef *);}
static void *cast_QDomNode(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDomNode)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomNode(void *, int);}
static void release_QDomNode(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDomNode *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDomNode(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomNode(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomNode *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomNode *>(sipSrc);
}


extern "C" {static void *array_QDomNode(SIP_SSIZE_T);}
static void *array_QDomNode(SIP_SSIZE_T sipNrElem)
{
    return new QDomNode[sipNrElem];
}


extern "C" {static void *copy_QDomNode(const void *, SIP_SSIZE_T);}
static void *copy_QDomNode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomNode(reinterpret_cast<const QDomNode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomNode(sipSimpleWrapper *);}
static void dealloc_QDomNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomNode(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QDomNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDomNode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomNode();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QDomNode * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomNode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomNode(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDomNode[] = {
    {(void *)slot_QDomNode___ne__, ne_slot},
    {(void *)slot_QDomNode___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDomNode[] = {
    {SIP_MLNAME_CAST(sipName_appendChild), meth_QDomNode_appendChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QDomNode_attributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childNodes), meth_QDomNode_childNodes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QDomNode_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cloneNode), (PyCFunction)meth_QDomNode_cloneNode, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QDomNode_columnNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_firstChild), meth_QDomNode_firstChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_firstChildElement), (PyCFunction)meth_QDomNode_firstChildElement, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAttributes), meth_QDomNode_hasAttributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasChildNodes), meth_QDomNode_hasChildNodes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertAfter), meth_QDomNode_insertAfter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertBefore), meth_QDomNode_insertBefore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAttr), meth_QDomNode_isAttr, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCDATASection), meth_QDomNode_isCDATASection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCharacterData), meth_QDomNode_isCharacterData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isComment), meth_QDomNode_isComment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDocument), meth_QDomNode_isDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDocumentFragment), meth_QDomNode_isDocumentFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDocumentType), meth_QDomNode_isDocumentType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isElement), meth_QDomNode_isElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEntity), meth_QDomNode_isEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEntityReference), meth_QDomNode_isEntityReference, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNotation), meth_QDomNode_isNotation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDomNode_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isProcessingInstruction), meth_QDomNode_isProcessingInstruction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSupported), meth_QDomNode_isSupported, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isText), meth_QDomNode_isText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastChild), meth_QDomNode_lastChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastChildElement), (PyCFunction)meth_QDomNode_lastChildElement, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QDomNode_lineNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_localName), meth_QDomNode_localName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namedItem), meth_QDomNode_namedItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namespaceURI), meth_QDomNode_namespaceURI, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextSibling), meth_QDomNode_nextSibling, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextSiblingElement), (PyCFunction)meth_QDomNode_nextSiblingElement, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nodeName), meth_QDomNode_nodeName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomNode_nodeType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nodeValue), meth_QDomNode_nodeValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QDomNode_normalize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ownerDocument), meth_QDomNode_ownerDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parentNode), meth_QDomNode_parentNode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QDomNode_prefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previousSibling), meth_QDomNode_previousSibling, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previousSiblingElement), (PyCFunction)meth_QDomNode_previousSiblingElement, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeChild), meth_QDomNode_removeChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_replaceChild), meth_QDomNode_replaceChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_QDomNode_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNodeValue), meth_QDomNode_setNodeValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrefix), meth_QDomNode_setPrefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAttr), meth_QDomNode_toAttr, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCDATASection), meth_QDomNode_toCDATASection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCharacterData), meth_QDomNode_toCharacterData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toComment), meth_QDomNode_toComment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDocument), meth_QDomNode_toDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDocumentFragment), meth_QDomNode_toDocumentFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDocumentType), meth_QDomNode_toDocumentType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toElement), meth_QDomNode_toElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toEntity), meth_QDomNode_toEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toEntityReference), meth_QDomNode_toEntityReference, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toNotation), meth_QDomNode_toNotation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toProcessingInstruction), meth_QDomNode_toProcessingInstruction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toText), meth_QDomNode_toText, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDomNode[] = {
    {sipName_AttributeNode, QDomNode::AttributeNode, 15},
    {sipName_BaseNode, QDomNode::BaseNode, 15},
    {sipName_CDATASectionNode, QDomNode::CDATASectionNode, 15},
    {sipName_CharacterDataNode, QDomNode::CharacterDataNode, 15},
    {sipName_CommentNode, QDomNode::CommentNode, 15},
    {sipName_DocumentFragmentNode, QDomNode::DocumentFragmentNode, 15},
    {sipName_DocumentNode, QDomNode::DocumentNode, 15},
    {sipName_DocumentTypeNode, QDomNode::DocumentTypeNode, 15},
    {sipName_ElementNode, QDomNode::ElementNode, 15},
    {sipName_EncodingFromDocument, QDomNode::EncodingFromDocument, 14},
    {sipName_EncodingFromTextStream, QDomNode::EncodingFromTextStream, 14},
    {sipName_EntityNode, QDomNode::EntityNode, 15},
    {sipName_EntityReferenceNode, QDomNode::EntityReferenceNode, 15},
    {sipName_NotationNode, QDomNode::NotationNode, 15},
    {sipName_ProcessingInstructionNode, QDomNode::ProcessingInstructionNode, 15},
    {sipName_TextNode, QDomNode::TextNode, 15},
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QDomNode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDomNode,
        {0}
    },
    {
        sipNameNr_QDomNode,
        {0, 0, 1},
        62, methods_QDomNode,
        16, enummembers_QDomNode,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDomNode,
    init_QDomNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomNode,
    assign_QDomNode,
    array_QDomNode,
    copy_QDomNode,
    release_QDomNode,
    cast_QDomNode,
    0,
    0,
    0
},
    0,
    0,
    0
};
