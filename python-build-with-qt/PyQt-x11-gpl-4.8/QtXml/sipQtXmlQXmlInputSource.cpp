/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 88 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "sipQtXmlQXmlInputSource.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtXmlQXmlInputSource.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtXmlQXmlInputSource.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 49 "sipQtXmlQXmlInputSource.cpp"
#line 77 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 52 "sipQtXmlQXmlInputSource.cpp"


class sipQXmlInputSource : public QXmlInputSource
{
public:
    sipQXmlInputSource();
    sipQXmlInputSource(QIODevice *);
    sipQXmlInputSource(const QXmlInputSource&);
    virtual ~sipQXmlInputSource();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QString sipProtectVirt_fromRawData(bool,const QByteArray&,bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setData(const QString&);
    void setData(const QByteArray&);
    void fetchData();
    QString data() const;
    QChar next();
    void reset();
    QString fromRawData(const QByteArray&,bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlInputSource(const sipQXmlInputSource &);
    sipQXmlInputSource &operator = (const sipQXmlInputSource &);

    char sipPyMethods[7];
};

sipQXmlInputSource::sipQXmlInputSource(): QXmlInputSource(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlInputSource::sipQXmlInputSource(QIODevice *a0): QXmlInputSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlInputSource::sipQXmlInputSource(const QXmlInputSource& a0): QXmlInputSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlInputSource::~sipQXmlInputSource()
{
    sipCommonDtor(sipPySelf);
}

void sipQXmlInputSource::setData(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setData);

    if (!meth)
    {
        QXmlInputSource::setData(a0);
        return;
    }

    typedef void (*sipVH_QtCore_33)(sip_gilstate_t,PyObject *,const QString&);

    ((sipVH_QtCore_33)(sipModuleAPI_QtXml_QtCore->em_virthandlers[33]))(sipGILState,meth,a0);
}

void sipQXmlInputSource::setData(const QByteArray& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setData);

    if (!meth)
    {
        QXmlInputSource::setData(a0);
        return;
    }

    extern void sipVH_QtXml_29(sip_gilstate_t,PyObject *,const QByteArray&);

    sipVH_QtXml_29(sipGILState,meth,a0);
}

void sipQXmlInputSource::fetchData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_fetchData);

    if (!meth)
    {
        QXmlInputSource::fetchData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtXml_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QString sipQXmlInputSource::data() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QXmlInputSource::data();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtXml_QtCore->em_virthandlers[62]))(sipGILState,meth);
}

QChar sipQXmlInputSource::next()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_next);

    if (!meth)
        return QXmlInputSource::next();

    extern QChar sipVH_QtXml_28(sip_gilstate_t,PyObject *);

    return sipVH_QtXml_28(sipGILState,meth);
}

void sipQXmlInputSource::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QXmlInputSource::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtXml_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QString sipQXmlInputSource::fromRawData(const QByteArray& a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_fromRawData);

    if (!meth)
        return QXmlInputSource::fromRawData(a0,a1);

    extern QString sipVH_QtXml_27(sip_gilstate_t,PyObject *,const QByteArray&,bool);

    return sipVH_QtXml_27(sipGILState,meth,a0,a1);
}

QString sipQXmlInputSource::sipProtectVirt_fromRawData(bool sipSelfWasArg,const QByteArray& a0,bool a1)
{
    return (sipSelfWasArg ? QXmlInputSource::fromRawData(a0,a1) : fromRawData(a0,a1));
}


extern "C" {static PyObject *meth_QXmlInputSource_setData(PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlInputSource, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QXmlInputSource::setData(*a0) : sipCpp->setData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlInputSource, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QXmlInputSource::setData(*a0) : sipCpp->setData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_setData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlInputSource_fetchData(PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_fetchData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlInputSource, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QXmlInputSource::fetchData() : sipCpp->fetchData());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_fetchData, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlInputSource_data(PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlInputSource, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QXmlInputSource::data() : sipCpp->data()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_data, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlInputSource_next(PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlInputSource, &sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar((sipSelfWasArg ? sipCpp->QXmlInputSource::next() : sipCpp->next()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_next, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlInputSource_reset(PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlInputSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlInputSource, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QXmlInputSource::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_reset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlInputSource_fromRawData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlInputSource_fromRawData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray * a0;
        int a0State = 0;
        bool a1 = 0;
        sipQXmlInputSource *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_beginning,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_QXmlInputSource, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtectVirt_fromRawData(sipSelfWasArg,*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlInputSource, sipName_fromRawData, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlInputSource(void *, const sipTypeDef *);}
static void *cast_QXmlInputSource(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlInputSource)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlInputSource(void *, int);}
static void release_QXmlInputSource(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlInputSource *>(sipCppV);
    else
        delete reinterpret_cast<QXmlInputSource *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QXmlInputSource(void *, SIP_SSIZE_T, const void *);}
static void assign_QXmlInputSource(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QXmlInputSource *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QXmlInputSource *>(sipSrc);
}


extern "C" {static void *array_QXmlInputSource(SIP_SSIZE_T);}
static void *array_QXmlInputSource(SIP_SSIZE_T sipNrElem)
{
    return new QXmlInputSource[sipNrElem];
}


extern "C" {static void *copy_QXmlInputSource(const void *, SIP_SSIZE_T);}
static void *copy_QXmlInputSource(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QXmlInputSource(reinterpret_cast<const QXmlInputSource *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlInputSource(sipSimpleWrapper *);}
static void dealloc_QXmlInputSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQXmlInputSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlInputSource(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QXmlInputSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QXmlInputSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlInputSource *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlInputSource();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QIODevice * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlInputSource(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QXmlInputSource * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QXmlInputSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlInputSource(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlInputSource[] = {
    {SIP_MLNAME_CAST(sipName_data), meth_QXmlInputSource_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchData), meth_QXmlInputSource_fetchData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromRawData), (PyCFunction)meth_QXmlInputSource_fromRawData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_next), meth_QXmlInputSource_next, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QXmlInputSource_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QXmlInputSource_setData, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_QXmlInputSource_EndOfData(void *, PyObject *);}
static PyObject *varget_QXmlInputSource_EndOfData(void *, PyObject *)
{
    ushort sipVal;
    sipVal = QXmlInputSource::EndOfData;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static PyObject *varget_QXmlInputSource_EndOfDocument(void *, PyObject *);}
static PyObject *varget_QXmlInputSource_EndOfDocument(void *, PyObject *)
{
    ushort sipVal;
    sipVal = QXmlInputSource::EndOfDocument;

    return PyLong_FromUnsignedLong(sipVal);
}

sipVariableDef variables_QXmlInputSource[] = {
    {sipName_EndOfData, varget_QXmlInputSource_EndOfData, NULL, 1},
    {sipName_EndOfDocument, varget_QXmlInputSource_EndOfDocument, NULL, 1},
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QXmlInputSource = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlInputSource,
        {0}
    },
    {
        sipNameNr_QXmlInputSource,
        {0, 0, 1},
        6, methods_QXmlInputSource,
        0, 0,
        2, variables_QXmlInputSource,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlInputSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlInputSource,
    assign_QXmlInputSource,
    array_QXmlInputSource,
    copy_QXmlInputSource,
    release_QXmlInputSource,
    cast_QXmlInputSource,
    0,
    0,
    0
},
    0,
    0,
    0
};
