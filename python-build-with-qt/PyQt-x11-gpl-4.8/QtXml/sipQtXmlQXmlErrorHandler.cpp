/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 241 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "sipQtXmlQXmlErrorHandler.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtXmlQXmlErrorHandler.cpp"
#line 116 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 46 "sipQtXmlQXmlErrorHandler.cpp"


class sipQXmlErrorHandler : public QXmlErrorHandler
{
public:
    sipQXmlErrorHandler();
    sipQXmlErrorHandler(const QXmlErrorHandler&);
    virtual ~sipQXmlErrorHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool warning(const QXmlParseException&);
    bool error(const QXmlParseException&);
    bool fatalError(const QXmlParseException&);
    QString errorString() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlErrorHandler(const sipQXmlErrorHandler &);
    sipQXmlErrorHandler &operator = (const sipQXmlErrorHandler &);

    char sipPyMethods[4];
};

sipQXmlErrorHandler::sipQXmlErrorHandler(): QXmlErrorHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlErrorHandler::sipQXmlErrorHandler(const QXmlErrorHandler& a0): QXmlErrorHandler(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlErrorHandler::~sipQXmlErrorHandler()
{
    sipCommonDtor(sipPySelf);
}

bool sipQXmlErrorHandler::warning(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QXmlErrorHandler,sipName_warning);

    if (!meth)
        return 0;

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

bool sipQXmlErrorHandler::error(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QXmlErrorHandler,sipName_error);

    if (!meth)
        return 0;

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

bool sipQXmlErrorHandler::fatalError(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QXmlErrorHandler,sipName_fatalError);

    if (!meth)
        return 0;

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

QString sipQXmlErrorHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QXmlErrorHandler,sipName_errorString);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtXml_QtCore->em_virthandlers[62]))(sipGILState,meth);
}


extern "C" {static PyObject *meth_QXmlErrorHandler_warning(PyObject *, PyObject *);}
static PyObject *meth_QXmlErrorHandler_warning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QXmlParseException * a0;
        QXmlErrorHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlErrorHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlErrorHandler, sipName_warning);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->warning(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlErrorHandler, sipName_warning, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlErrorHandler_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlErrorHandler_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QXmlParseException * a0;
        QXmlErrorHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlErrorHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlErrorHandler, sipName_error);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlErrorHandler, sipName_error, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlErrorHandler_fatalError(PyObject *, PyObject *);}
static PyObject *meth_QXmlErrorHandler_fatalError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QXmlParseException * a0;
        QXmlErrorHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlErrorHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlErrorHandler, sipName_fatalError);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fatalError(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlErrorHandler, sipName_fatalError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlErrorHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlErrorHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QXmlErrorHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlErrorHandler, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlErrorHandler, sipName_errorString);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlErrorHandler, sipName_errorString, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlErrorHandler(void *, const sipTypeDef *);}
static void *cast_QXmlErrorHandler(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlErrorHandler)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlErrorHandler(void *, int);}
static void release_QXmlErrorHandler(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlErrorHandler *>(sipCppV);
    else
        delete reinterpret_cast<QXmlErrorHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlErrorHandler(sipSimpleWrapper *);}
static void dealloc_QXmlErrorHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQXmlErrorHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlErrorHandler(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QXmlErrorHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QXmlErrorHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlErrorHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlErrorHandler();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QXmlErrorHandler * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QXmlErrorHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlErrorHandler(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlErrorHandler[] = {
    {SIP_MLNAME_CAST(sipName_error), meth_QXmlErrorHandler_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlErrorHandler_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fatalError), meth_QXmlErrorHandler_fatalError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_warning), meth_QXmlErrorHandler_warning, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QXmlErrorHandler = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QXmlErrorHandler,
        {0}
    },
    {
        sipNameNr_QXmlErrorHandler,
        {0, 0, 1},
        4, methods_QXmlErrorHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlErrorHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlErrorHandler,
    0,
    0,
    0,
    release_QXmlErrorHandler,
    cast_QXmlErrorHandler,
    0,
    0,
    0
},
    0,
    0,
    0
};
