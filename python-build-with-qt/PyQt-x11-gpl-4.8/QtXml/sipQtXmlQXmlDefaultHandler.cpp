/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 312 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "sipQtXmlQXmlDefaultHandler.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtXmlQXmlDefaultHandler.cpp"
#line 88 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 46 "sipQtXmlQXmlDefaultHandler.cpp"
#line 116 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 49 "sipQtXmlQXmlDefaultHandler.cpp"
#line 62 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 52 "sipQtXmlQXmlDefaultHandler.cpp"
#line 206 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 55 "sipQtXmlQXmlDefaultHandler.cpp"


class sipQXmlDefaultHandler : public QXmlDefaultHandler
{
public:
    sipQXmlDefaultHandler();
    virtual ~sipQXmlDefaultHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setDocumentLocator(QXmlLocator *);
    bool startDocument();
    bool endDocument();
    bool startPrefixMapping(const QString&,const QString&);
    bool endPrefixMapping(const QString&);
    bool startElement(const QString&,const QString&,const QString&,const QXmlAttributes&);
    bool endElement(const QString&,const QString&,const QString&);
    bool characters(const QString&);
    bool ignorableWhitespace(const QString&);
    bool processingInstruction(const QString&,const QString&);
    bool skippedEntity(const QString&);
    bool warning(const QXmlParseException&);
    bool error(const QXmlParseException&);
    bool fatalError(const QXmlParseException&);
    bool notationDecl(const QString&,const QString&,const QString&);
    bool unparsedEntityDecl(const QString&,const QString&,const QString&,const QString&);
    bool resolveEntity(const QString&,const QString&,QXmlInputSource *&);
    bool startDTD(const QString&,const QString&,const QString&);
    bool endDTD();
    bool startEntity(const QString&);
    bool endEntity(const QString&);
    bool startCDATA();
    bool endCDATA();
    bool comment(const QString&);
    bool attributeDecl(const QString&,const QString&,const QString&,const QString&,const QString&);
    bool internalEntityDecl(const QString&,const QString&);
    bool externalEntityDecl(const QString&,const QString&,const QString&);
    QString errorString() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlDefaultHandler(const sipQXmlDefaultHandler &);
    sipQXmlDefaultHandler &operator = (const sipQXmlDefaultHandler &);

    char sipPyMethods[28];
};

sipQXmlDefaultHandler::sipQXmlDefaultHandler(): QXmlDefaultHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlDefaultHandler::~sipQXmlDefaultHandler()
{
    sipCommonDtor(sipPySelf);
}

void sipQXmlDefaultHandler::setDocumentLocator(QXmlLocator *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setDocumentLocator);

    if (!meth)
    {
        QXmlDefaultHandler::setDocumentLocator(a0);
        return;
    }

    extern void sipVH_QtXml_7(sip_gilstate_t,PyObject *,QXmlLocator *);

    sipVH_QtXml_7(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::startDocument()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_startDocument);

    if (!meth)
        return QXmlDefaultHandler::startDocument();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlDefaultHandler::endDocument()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_endDocument);

    if (!meth)
        return QXmlDefaultHandler::endDocument();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlDefaultHandler::startPrefixMapping(const QString& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_startPrefixMapping);

    if (!meth)
        return QXmlDefaultHandler::startPrefixMapping(a0,a1);

    extern bool sipVH_QtXml_1(sip_gilstate_t,PyObject *,const QString&,const QString&);

    return sipVH_QtXml_1(sipGILState,meth,a0,a1);
}

bool sipQXmlDefaultHandler::endPrefixMapping(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_endPrefixMapping);

    if (!meth)
        return QXmlDefaultHandler::endPrefixMapping(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::startElement(const QString& a0,const QString& a1,const QString& a2,const QXmlAttributes& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_startElement);

    if (!meth)
        return QXmlDefaultHandler::startElement(a0,a1,a2,a3);

    extern bool sipVH_QtXml_6(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&,const QXmlAttributes&);

    return sipVH_QtXml_6(sipGILState,meth,a0,a1,a2,a3);
}

bool sipQXmlDefaultHandler::endElement(const QString& a0,const QString& a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_endElement);

    if (!meth)
        return QXmlDefaultHandler::endElement(a0,a1,a2);

    extern bool sipVH_QtXml_0(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&);

    return sipVH_QtXml_0(sipGILState,meth,a0,a1,a2);
}

bool sipQXmlDefaultHandler::characters(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_characters);

    if (!meth)
        return QXmlDefaultHandler::characters(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::ignorableWhitespace(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_ignorableWhitespace);

    if (!meth)
        return QXmlDefaultHandler::ignorableWhitespace(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::processingInstruction(const QString& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_processingInstruction);

    if (!meth)
        return QXmlDefaultHandler::processingInstruction(a0,a1);

    extern bool sipVH_QtXml_1(sip_gilstate_t,PyObject *,const QString&,const QString&);

    return sipVH_QtXml_1(sipGILState,meth,a0,a1);
}

bool sipQXmlDefaultHandler::skippedEntity(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_skippedEntity);

    if (!meth)
        return QXmlDefaultHandler::skippedEntity(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::warning(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_warning);

    if (!meth)
        return QXmlDefaultHandler::warning(a0);

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::error(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_error);

    if (!meth)
        return QXmlDefaultHandler::error(a0);

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::fatalError(const QXmlParseException& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_fatalError);

    if (!meth)
        return QXmlDefaultHandler::fatalError(a0);

    extern bool sipVH_QtXml_5(sip_gilstate_t,PyObject *,const QXmlParseException&);

    return sipVH_QtXml_5(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::notationDecl(const QString& a0,const QString& a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_notationDecl);

    if (!meth)
        return QXmlDefaultHandler::notationDecl(a0,a1,a2);

    extern bool sipVH_QtXml_0(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&);

    return sipVH_QtXml_0(sipGILState,meth,a0,a1,a2);
}

bool sipQXmlDefaultHandler::unparsedEntityDecl(const QString& a0,const QString& a1,const QString& a2,const QString& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_unparsedEntityDecl);

    if (!meth)
        return QXmlDefaultHandler::unparsedEntityDecl(a0,a1,a2,a3);

    extern bool sipVH_QtXml_4(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&,const QString&);

    return sipVH_QtXml_4(sipGILState,meth,a0,a1,a2,a3);
}

bool sipQXmlDefaultHandler::resolveEntity(const QString& a0,const QString& a1,QXmlInputSource *&a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_resolveEntity);

    if (!meth)
        return QXmlDefaultHandler::resolveEntity(a0,a1,a2);

    extern bool sipVH_QtXml_3(sip_gilstate_t,PyObject *,const QString&,const QString&,QXmlInputSource *&);

    return sipVH_QtXml_3(sipGILState,meth,a0,a1,a2);
}

bool sipQXmlDefaultHandler::startDTD(const QString& a0,const QString& a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_startDTD);

    if (!meth)
        return QXmlDefaultHandler::startDTD(a0,a1,a2);

    extern bool sipVH_QtXml_0(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&);

    return sipVH_QtXml_0(sipGILState,meth,a0,a1,a2);
}

bool sipQXmlDefaultHandler::endDTD()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_endDTD);

    if (!meth)
        return QXmlDefaultHandler::endDTD();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlDefaultHandler::startEntity(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_startEntity);

    if (!meth)
        return QXmlDefaultHandler::startEntity(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::endEntity(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_endEntity);

    if (!meth)
        return QXmlDefaultHandler::endEntity(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::startCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_startCDATA);

    if (!meth)
        return QXmlDefaultHandler::startCDATA();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlDefaultHandler::endCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_endCDATA);

    if (!meth)
        return QXmlDefaultHandler::endCDATA();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlDefaultHandler::comment(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_comment);

    if (!meth)
        return QXmlDefaultHandler::comment(a0);

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlDefaultHandler::attributeDecl(const QString& a0,const QString& a1,const QString& a2,const QString& a3,const QString& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_attributeDecl);

    if (!meth)
        return QXmlDefaultHandler::attributeDecl(a0,a1,a2,a3,a4);

    extern bool sipVH_QtXml_2(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&,const QString&,const QString&);

    return sipVH_QtXml_2(sipGILState,meth,a0,a1,a2,a3,a4);
}

bool sipQXmlDefaultHandler::internalEntityDecl(const QString& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_internalEntityDecl);

    if (!meth)
        return QXmlDefaultHandler::internalEntityDecl(a0,a1);

    extern bool sipVH_QtXml_1(sip_gilstate_t,PyObject *,const QString&,const QString&);

    return sipVH_QtXml_1(sipGILState,meth,a0,a1);
}

bool sipQXmlDefaultHandler::externalEntityDecl(const QString& a0,const QString& a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_externalEntityDecl);

    if (!meth)
        return QXmlDefaultHandler::externalEntityDecl(a0,a1,a2);

    extern bool sipVH_QtXml_0(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&);

    return sipVH_QtXml_0(sipGILState,meth,a0,a1,a2);
}

QString sipQXmlDefaultHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_errorString);

    if (!meth)
        return QXmlDefaultHandler::errorString();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtXml_QtCore->em_virthandlers[62]))(sipGILState,meth);
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_setDocumentLocator(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_setDocumentLocator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlLocator * a0;
        PyObject *a0Keep;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, &a0Keep, sipType_QXmlLocator, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::setDocumentLocator(a0) : sipCpp->setDocumentLocator(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -15, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_setDocumentLocator, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startDocument() : sipCpp->startDocument());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endDocument() : sipCpp->endDocument());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startPrefixMapping(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startPrefixMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startPrefixMapping(*a0,*a1) : sipCpp->startPrefixMapping(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startPrefixMapping, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endPrefixMapping(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endPrefixMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endPrefixMapping(*a0) : sipCpp->endPrefixMapping(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endPrefixMapping, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QXmlAttributes * a3;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QXmlAttributes, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startElement(*a0,*a1,*a2,*a3) : sipCpp->startElement(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endElement(*a0,*a1,*a2) : sipCpp->endElement(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endElement, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_characters(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_characters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::characters(*a0) : sipCpp->characters(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_characters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_ignorableWhitespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_ignorableWhitespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::ignorableWhitespace(*a0) : sipCpp->ignorableWhitespace(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_ignorableWhitespace, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_processingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_processingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::processingInstruction(*a0,*a1) : sipCpp->processingInstruction(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_processingInstruction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_skippedEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_skippedEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::skippedEntity(*a0) : sipCpp->skippedEntity(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_skippedEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_warning(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_warning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QXmlParseException * a0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::warning(*a0) : sipCpp->warning(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_warning, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QXmlParseException * a0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::error(*a0) : sipCpp->error(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_error, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_fatalError(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_fatalError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QXmlParseException * a0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QXmlParseException, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::fatalError(*a0) : sipCpp->fatalError(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_fatalError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_notationDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_notationDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::notationDecl(*a0,*a1,*a2) : sipCpp->notationDecl(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_notationDecl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_unparsedEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_unparsedEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::unparsedEntityDecl(*a0,*a1,*a2,*a3) : sipCpp->unparsedEntityDecl(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_unparsedEntityDecl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_resolveEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_resolveEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlInputSource * a2;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::resolveEntity(*a0,*a1,a2) : sipCpp->resolveEntity(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipBuildResult(0,"(bD)",sipRes,a2,sipType_QXmlInputSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_resolveEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startDTD(*a0,*a1,*a2) : sipCpp->startDTD(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startDTD, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endDTD() : sipCpp->endDTD());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endDTD, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startEntity(*a0) : sipCpp->startEntity(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endEntity(*a0) : sipCpp->endEntity(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_startCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_startCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::startCDATA() : sipCpp->startCDATA());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_startCDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_endCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_endCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::endCDATA() : sipCpp->endCDATA());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_endCDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_comment(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::comment(*a0) : sipCpp->comment(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_comment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_attributeDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_attributeDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::attributeDecl(*a0,*a1,*a2,*a3,*a4) : sipCpp->attributeDecl(*a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_attributeDecl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_internalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_internalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::internalEntityDecl(*a0,*a1) : sipCpp->internalEntityDecl(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_internalEntityDecl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_externalEntityDecl(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_externalEntityDecl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QXmlDefaultHandler::externalEntityDecl(*a0,*a1,*a2) : sipCpp->externalEntityDecl(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_externalEntityDecl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlDefaultHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlDefaultHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QXmlDefaultHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlDefaultHandler, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QXmlDefaultHandler::errorString() : sipCpp->errorString()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlDefaultHandler, sipName_errorString, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlDefaultHandler(void *, const sipTypeDef *);}
static void *cast_QXmlDefaultHandler(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QXmlDefaultHandler)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlContentHandler)->ctd_cast((QXmlContentHandler *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlErrorHandler)->ctd_cast((QXmlErrorHandler *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlDTDHandler)->ctd_cast((QXmlDTDHandler *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlEntityResolver)->ctd_cast((QXmlEntityResolver *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlLexicalHandler)->ctd_cast((QXmlLexicalHandler *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QXmlDeclHandler)->ctd_cast((QXmlDeclHandler *)(QXmlDefaultHandler *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlDefaultHandler(void *, int);}
static void release_QXmlDefaultHandler(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlDefaultHandler *>(sipCppV);
    else
        delete reinterpret_cast<QXmlDefaultHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlDefaultHandler(sipSimpleWrapper *);}
static void dealloc_QXmlDefaultHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQXmlDefaultHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlDefaultHandler(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QXmlDefaultHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QXmlDefaultHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlDefaultHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlDefaultHandler();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QXmlDefaultHandler[] = {{21, 255, 0}, {26, 255, 0}, {22, 255, 0}, {25, 255, 0}, {28, 255, 0}, {23, 255, 1}};


static PyMethodDef methods_QXmlDefaultHandler[] = {
    {SIP_MLNAME_CAST(sipName_attributeDecl), meth_QXmlDefaultHandler_attributeDecl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_characters), meth_QXmlDefaultHandler_characters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_comment), meth_QXmlDefaultHandler_comment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endCDATA), meth_QXmlDefaultHandler_endCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endDTD), meth_QXmlDefaultHandler_endDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endDocument), meth_QXmlDefaultHandler_endDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endElement), meth_QXmlDefaultHandler_endElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endEntity), meth_QXmlDefaultHandler_endEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endPrefixMapping), meth_QXmlDefaultHandler_endPrefixMapping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QXmlDefaultHandler_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlDefaultHandler_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_externalEntityDecl), meth_QXmlDefaultHandler_externalEntityDecl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fatalError), meth_QXmlDefaultHandler_fatalError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ignorableWhitespace), meth_QXmlDefaultHandler_ignorableWhitespace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_internalEntityDecl), meth_QXmlDefaultHandler_internalEntityDecl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_notationDecl), meth_QXmlDefaultHandler_notationDecl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processingInstruction), meth_QXmlDefaultHandler_processingInstruction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resolveEntity), meth_QXmlDefaultHandler_resolveEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocumentLocator), meth_QXmlDefaultHandler_setDocumentLocator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_skippedEntity), meth_QXmlDefaultHandler_skippedEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startCDATA), meth_QXmlDefaultHandler_startCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDTD), meth_QXmlDefaultHandler_startDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDocument), meth_QXmlDefaultHandler_startDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startElement), meth_QXmlDefaultHandler_startElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startEntity), meth_QXmlDefaultHandler_startEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startPrefixMapping), meth_QXmlDefaultHandler_startPrefixMapping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unparsedEntityDecl), meth_QXmlDefaultHandler_unparsedEntityDecl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_warning), meth_QXmlDefaultHandler_warning, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QXmlDefaultHandler = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlDefaultHandler,
        {0}
    },
    {
        sipNameNr_QXmlDefaultHandler,
        {0, 0, 1},
        28, methods_QXmlDefaultHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QXmlDefaultHandler,
    0,
    init_QXmlDefaultHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlDefaultHandler,
    0,
    0,
    0,
    release_QXmlDefaultHandler,
    cast_QXmlDefaultHandler,
    0,
    0,
    0
},
    0,
    0,
    0
};
