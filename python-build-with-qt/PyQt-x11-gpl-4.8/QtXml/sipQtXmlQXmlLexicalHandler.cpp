/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 280 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "sipQtXmlQXmlLexicalHandler.cpp"

#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtXmlQXmlLexicalHandler.cpp"


class sipQXmlLexicalHandler : public QXmlLexicalHandler
{
public:
    sipQXmlLexicalHandler();
    sipQXmlLexicalHandler(const QXmlLexicalHandler&);
    virtual ~sipQXmlLexicalHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool startDTD(const QString&,const QString&,const QString&);
    bool endDTD();
    bool startEntity(const QString&);
    bool endEntity(const QString&);
    bool startCDATA();
    bool endCDATA();
    bool comment(const QString&);
    QString errorString() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlLexicalHandler(const sipQXmlLexicalHandler &);
    sipQXmlLexicalHandler &operator = (const sipQXmlLexicalHandler &);

    char sipPyMethods[8];
};

sipQXmlLexicalHandler::sipQXmlLexicalHandler(): QXmlLexicalHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlLexicalHandler::sipQXmlLexicalHandler(const QXmlLexicalHandler& a0): QXmlLexicalHandler(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlLexicalHandler::~sipQXmlLexicalHandler()
{
    sipCommonDtor(sipPySelf);
}

bool sipQXmlLexicalHandler::startDTD(const QString& a0,const QString& a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QXmlLexicalHandler,sipName_startDTD);

    if (!meth)
        return 0;

    extern bool sipVH_QtXml_0(sip_gilstate_t,PyObject *,const QString&,const QString&,const QString&);

    return sipVH_QtXml_0(sipGILState,meth,a0,a1,a2);
}

bool sipQXmlLexicalHandler::endDTD()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QXmlLexicalHandler,sipName_endDTD);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlLexicalHandler::startEntity(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QXmlLexicalHandler,sipName_startEntity);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlLexicalHandler::endEntity(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QXmlLexicalHandler,sipName_endEntity);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

bool sipQXmlLexicalHandler::startCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QXmlLexicalHandler,sipName_startCDATA);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlLexicalHandler::endCDATA()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QXmlLexicalHandler,sipName_endCDATA);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtXml_QtCore->em_virthandlers[7]))(sipGILState,meth);
}

bool sipQXmlLexicalHandler::comment(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QXmlLexicalHandler,sipName_comment);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,const QString&);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtXml_QtCore->em_virthandlers[28]))(sipGILState,meth,a0);
}

QString sipQXmlLexicalHandler::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QXmlLexicalHandler,sipName_errorString);

    if (!meth)
        return QString();

    typedef QString (*sipVH_QtCore_62)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_62)(sipModuleAPI_QtXml_QtCore->em_virthandlers[62]))(sipGILState,meth);
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_startDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startDTD);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startDTD(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startDTD, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_endDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endDTD);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endDTD();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endDTD, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_startEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startEntity);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startEntity(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_endEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endEntity);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endEntity(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endEntity, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_startCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_startCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_startCDATA);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startCDATA();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_startCDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_endCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_endCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_endCDATA);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endCDATA();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_endCDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_comment(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_comment);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->comment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_comment, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlLexicalHandler_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlLexicalHandler_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QXmlLexicalHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlLexicalHandler, &sipCpp))
        {
            QString *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QXmlLexicalHandler, sipName_errorString);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlLexicalHandler, sipName_errorString, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlLexicalHandler(void *, const sipTypeDef *);}
static void *cast_QXmlLexicalHandler(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlLexicalHandler)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlLexicalHandler(void *, int);}
static void release_QXmlLexicalHandler(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlLexicalHandler *>(sipCppV);
    else
        delete reinterpret_cast<QXmlLexicalHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlLexicalHandler(sipSimpleWrapper *);}
static void dealloc_QXmlLexicalHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQXmlLexicalHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlLexicalHandler(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QXmlLexicalHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QXmlLexicalHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlLexicalHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlLexicalHandler();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QXmlLexicalHandler * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QXmlLexicalHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlLexicalHandler(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlLexicalHandler[] = {
    {SIP_MLNAME_CAST(sipName_comment), meth_QXmlLexicalHandler_comment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endCDATA), meth_QXmlLexicalHandler_endCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endDTD), meth_QXmlLexicalHandler_endDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endEntity), meth_QXmlLexicalHandler_endEntity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlLexicalHandler_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startCDATA), meth_QXmlLexicalHandler_startCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDTD), meth_QXmlLexicalHandler_startDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startEntity), meth_QXmlLexicalHandler_startEntity, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QXmlLexicalHandler = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QXmlLexicalHandler,
        {0}
    },
    {
        sipNameNr_QXmlLexicalHandler,
        {0, 0, 1},
        8, methods_QXmlLexicalHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlLexicalHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlLexicalHandler,
    0,
    0,
    0,
    release_QXmlLexicalHandler,
    cast_QXmlLexicalHandler,
    0,
    0,
    0
},
    0,
    0,
    0
};
