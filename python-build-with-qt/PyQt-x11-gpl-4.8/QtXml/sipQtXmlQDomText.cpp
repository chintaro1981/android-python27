/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:04:00 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 369 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "sipQtXmlQDomText.cpp"

#line 67 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 43 "sipQtXmlQDomText.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtXmlQDomText.cpp"
#line 330 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 49 "sipQtXmlQDomText.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 52 "sipQtXmlQDomText.cpp"
#line 382 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 55 "sipQtXmlQDomText.cpp"
#line 293 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 58 "sipQtXmlQDomText.cpp"
#line 447 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 61 "sipQtXmlQDomText.cpp"
#line 406 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 64 "sipQtXmlQDomText.cpp"
#line 420 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 67 "sipQtXmlQDomText.cpp"
#line 435 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 70 "sipQtXmlQDomText.cpp"
#line 193 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 73 "sipQtXmlQDomText.cpp"
#line 211 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 76 "sipQtXmlQDomText.cpp"
#line 281 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 79 "sipQtXmlQDomText.cpp"
#line 394 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 82 "sipQtXmlQDomText.cpp"
#line 313 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 85 "sipQtXmlQDomText.cpp"
#line 255 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 88 "sipQtXmlQDomText.cpp"
#line 173 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 91 "sipQtXmlQDomText.cpp"


extern "C" {static PyObject *meth_QDomText_splitText(PyObject *, PyObject *);}
static PyObject *meth_QDomText_splitText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDomText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDomText, &sipCpp, &a0))
        {
            QDomText *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomText(sipCpp->splitText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomText,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomText, sipName_splitText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QDomText_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomText_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomText *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomText, &sipCpp))
        {
            QDomNode::NodeType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nodeType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomText, sipName_nodeType, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomText(void *, const sipTypeDef *);}
static void *cast_QDomText(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDomText)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDomCharacterData)->ctd_cast((QDomCharacterData *)(QDomText *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomText(void *, int);}
static void release_QDomText(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDomText *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDomText(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomText(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomText *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomText *>(sipSrc);
}


extern "C" {static void *array_QDomText(SIP_SSIZE_T);}
static void *array_QDomText(SIP_SSIZE_T sipNrElem)
{
    return new QDomText[sipNrElem];
}


extern "C" {static void *copy_QDomText(const void *, SIP_SSIZE_T);}
static void *copy_QDomText(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomText(reinterpret_cast<const QDomText *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomText(sipSimpleWrapper *);}
static void dealloc_QDomText(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomText(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QDomText(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QDomText(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomText *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomText();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QDomText * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomText, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomText(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomText[] = {{2, 255, 1}};


static PyMethodDef methods_QDomText[] = {
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomText_nodeType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_splitText), meth_QDomText_splitText, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QDomText = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDomText,
        {0}
    },
    {
        sipNameNr_QDomText,
        {0, 0, 1},
        2, methods_QDomText,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDomText,
    0,
    init_QDomText,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomText,
    assign_QDomText,
    array_QDomText,
    copy_QDomText,
    release_QDomText,
    cast_QDomText,
    0,
    0,
    0
},
    0,
    0,
    0
};
