/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:59 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebview.sip"
#include <qwebview.h>
#line 39 "sipQtWebKitQWebView.cpp"

#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 48 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 51 "sipQtWebKitQWebView.cpp"
#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 522 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "sipQtWebKitQWebView.cpp"
#line 372 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "sipQtWebKitQWebView.cpp"
#line 547 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "sipQtWebKitQWebView.cpp"
#line 571 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "sipQtWebKitQWebView.cpp"
#line 598 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "sipQtWebKitQWebView.cpp"
#line 587 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "sipQtWebKitQWebView.cpp"
#line 344 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "sipQtWebKitQWebView.cpp"
#line 275 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "sipQtWebKitQWebView.cpp"
#line 475 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "sipQtWebKitQWebView.cpp"
#line 236 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "sipQtWebKitQWebView.cpp"
#line 391 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "sipQtWebKitQWebView.cpp"
#line 418 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "sipQtWebKitQWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 239 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 246 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 301 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 363 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 380 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 107 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 110 "sipQtWebKitQWebView.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 113 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 116 "sipQtWebKitQWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 119 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 122 "sipQtWebKitQWebView.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 125 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 128 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 131 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 134 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 137 "sipQtWebKitQWebView.cpp"
#line 72 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 140 "sipQtWebKitQWebView.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 143 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 146 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 149 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 152 "sipQtWebKitQWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 155 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 158 "sipQtWebKitQWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 161 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 164 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 167 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 170 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 173 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 176 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 179 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 182 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 185 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 188 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 191 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 197 "sipQtWebKitQWebView.cpp"
#line 464 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 200 "sipQtWebKitQWebView.cpp"
#line 453 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 203 "sipQtWebKitQWebView.cpp"
#line 650 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "sipQtWebKitQWebView.cpp"
#line 296 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 209 "sipQtWebKitQWebView.cpp"
#line 431 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 212 "sipQtWebKitQWebView.cpp"
#line 405 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 215 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 218 "sipQtWebKitQWebView.cpp"
#line 66 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 221 "sipQtWebKitQWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 224 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 227 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 230 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 233 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 236 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 239 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 242 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 245 "sipQtWebKitQWebView.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 248 "sipQtWebKitQWebView.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 251 "sipQtWebKitQWebView.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 254 "sipQtWebKitQWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 257 "sipQtWebKitQWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 260 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 263 "sipQtWebKitQWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 266 "sipQtWebKitQWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 269 "sipQtWebKitQWebView.cpp"


class sipQWebView : public QWebView
{
public:
    sipQWebView(QWidget *);
    virtual ~sipQWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    QWebView * sipProtectVirt_createWindow(bool,QWebPage::WebWindowType);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QSize sizeHint() const;
    bool event(QEvent *);
    QWebView * createWindow(QWebPage::WebWindowType);
    void resizeEvent(QResizeEvent *);
    void paintEvent(QPaintEvent *);
    void changeEvent(QEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void inputMethodEvent(QInputMethodEvent *);
    bool focusNextPrevChild(bool);
    int devType() const;
    void setVisible(bool);
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebView(const sipQWebView &);
    sipQWebView &operator = (const sipQWebView &);

    char sipPyMethods[48];
};

sipQWebView::sipQWebView(QWidget *a0): QWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebView::~sipQWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebView::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebView);
}

int sipQWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebView,_c,_id,_a);

    return _id;
}

void *sipQWebView::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast && sip_QtWebKit_qt_metacast(sipPySelf,sipType_QWebView,_clname)) ? this : QWebView::qt_metacast(_clname);
}

QVariant sipQWebView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWebView::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[12]))(sipGILState,meth,a0);
}

QSize sipQWebView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWebView::sizeHint();

    typedef QSize (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_5)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[5]))(sipGILState,meth);
}

bool sipQWebView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWebView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

QWebView * sipQWebView::createWindow(QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_createWindow);

    if (!meth)
        return QWebView::createWindow(a0);

    extern QWebView * sipVH_QtWebKit_0(sip_gilstate_t,PyObject *,QWebPage::WebWindowType);

    return sipVH_QtWebKit_0(sipGILState,meth,a0);
}

void sipQWebView::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWebView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t,PyObject *,QResizeEvent *);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[3]))(sipGILState,meth,a0);
}

void sipQWebView::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWebView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *,QPaintEvent *);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[4]))(sipGILState,meth,a0);
}

void sipQWebView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QWebView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebView::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWebView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQWebView::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWebView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQWebView::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWebView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQWebView::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWebView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,QMouseEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState,meth,a0);
}

void sipQWebView::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWebView::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t,PyObject *,QContextMenuEvent *);

    ((sipVH_QtGui_21)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[21]))(sipGILState,meth,a0);
}

void sipQWebView::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWebView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t,PyObject *,QWheelEvent *);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[0]))(sipGILState,meth,a0);
}

void sipQWebView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWebView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQWebView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWebView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQWebView::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWebView::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t,PyObject *,QDragEnterEvent *);

    ((sipVH_QtGui_18)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[18]))(sipGILState,meth,a0);
}

void sipQWebView::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWebView::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t,PyObject *,QDragLeaveEvent *);

    ((sipVH_QtGui_16)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[16]))(sipGILState,meth,a0);
}

void sipQWebView::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWebView::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t,PyObject *,QDragMoveEvent *);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebView::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWebView::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,QDropEvent *);

    ((sipVH_QtGui_15)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[15]))(sipGILState,meth,a0);
}

void sipQWebView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWebView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQWebView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWebView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQWebView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWebView::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    ((sipVH_QtGui_13)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[13]))(sipGILState,meth,a0);
}

bool sipQWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWebView::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[11]))(sipGILState,meth,a0);
}

int sipQWebView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQWebView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

QSize sipQWebView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_5)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[5]))(sipGILState,meth);
}

int sipQWebView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *,int);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[28]))(sipGILState,meth,a0);
}

QPaintEngine * sipQWebView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[27]))(sipGILState,meth);
}

void sipQWebView::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebView::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebView::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t,PyObject *,QMoveEvent *);

    ((sipVH_QtGui_23)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[23]))(sipGILState,meth,a0);
}

void sipQWebView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,QCloseEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[22]))(sipGILState,meth,a0);
}

void sipQWebView::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t,PyObject *,QTabletEvent *);

    ((sipVH_QtGui_20)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[20]))(sipGILState,meth,a0);
}

void sipQWebView::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t,PyObject *,QActionEvent *);

    ((sipVH_QtGui_19)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[19]))(sipGILState,meth,a0);
}

void sipQWebView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,QShowEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[2]))(sipGILState,meth,a0);
}

void sipQWebView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,QHideEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[1]))(sipGILState,meth,a0);
}

int sipQWebView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[14]))(sipGILState,meth,a0);
}

void sipQWebView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipQWebView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t,PyObject *,const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[10]))(sipGILState,meth,a0);
}

void sipQWebView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t,PyObject *,const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQWebView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState,meth,a0);
}

void sipQWebView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

bool sipQWebView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQWebView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQWebView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQWebView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQWebView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQWebView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebView::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQWebView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQWebView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQWebView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQWebView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQWebView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQWebView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQWebView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQWebView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQWebView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQWebView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQWebView::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQWebView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQWebView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQWebView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQWebView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQWebView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQWebView::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQWebView::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQWebView::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQWebView::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQWebView::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

QWebView * sipQWebView::sipProtectVirt_createWindow(bool sipSelfWasArg,QWebPage::WebWindowType a0)
{
    return (sipSelfWasArg ? QWebView::createWindow(a0) : createWindow(a0));
}

void sipQWebView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QWebView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQWebView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QWebView::paintEvent(a0) : paintEvent(a0));
}

void sipQWebView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWebView::changeEvent(a0) : changeEvent(a0));
}

void sipQWebView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWebView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQWebView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWebView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQWebView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWebView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQWebView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWebView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQWebView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QWebView::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQWebView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QWebView::wheelEvent(a0) : wheelEvent(a0));
}

void sipQWebView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWebView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQWebView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWebView::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQWebView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QWebView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQWebView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QWebView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQWebView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QWebView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQWebView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QWebView::dropEvent(a0) : dropEvent(a0));
}

void sipQWebView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWebView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQWebView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWebView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQWebView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QWebView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

bool sipQWebView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWebView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}


extern "C" {static PyObject *meth_QWebView_sender(PyObject *, PyObject *);}
static PyObject *meth_QWebView_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 1521 "sipQtWebKitQWebView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_receivers(PyObject *, PyObject *);}
static PyObject *meth_QWebView_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 1563 "sipQtWebKitQWebView.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebView_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_enterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_leaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_tabletEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QActionEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_actionEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_metric(PyObject *, PyObject *);}
static PyObject *meth_QWebView_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_metric, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QWebView_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_resetInputContext, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QWebView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|mbb", &sipSelf, sipType_QWebView, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QWebView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_destroy, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusNextChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusPreviousChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QWebView_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_enabledChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QWebView_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPalette, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_paletteChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QWebView_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_fontChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QWebView_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_windowActivationChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QWebView_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_languageChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebPage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_page, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage * a0;
        PyObject *a0Keep;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const QByteArray& a2def = QByteArray();
        const QByteArray * a2 = &a2def;
        int a2State = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl * a1 = &a1def;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setHtml, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl * a2 = &a2def;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setContent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebHistory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_history, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QWebSettings *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_settings, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_title, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_url, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebView_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_selectedText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_pageAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggerPageAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_triggerPageAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_isModified, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWebView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_sizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextSizeMultiplier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setTextSizeMultiplier, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_textSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_textSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textSizeMultiplier();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_textSizeMultiplier, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags * a1 = &a1def;
        int a1State = 0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_findText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_back, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_forward, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reload();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_reload, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_print_(PyObject *, PyObject *);}
static PyObject *meth_QWebView_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter * a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_print_, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_print(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_print(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter * a0;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_printer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_print, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebView_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebWindowType a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebWindowType, &a0))
        {
            QWebView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createWindow(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_createWindow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_paintEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyPressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_zoomFactor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setZoomFactor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            QPainter::RenderHints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_renderHints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints * a0;
        int a0State = 0;
        QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHints, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHint, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebView(void *, const sipTypeDef *);}
static void *cast_QWebView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QWebView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebView(void *, int);}
static void release_QWebView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWebView *>(sipCppV);
    else
        delete reinterpret_cast<QWebView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebView(sipSimpleWrapper *);}
static void dealloc_QWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebView *sipCpp = 0;

    {
        QWidget * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebView[] = {{745, 2, 1}};


static PyMethodDef methods_QWebView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QWebView_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_back), meth_QWebView_back, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QWebView_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QWebView_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QWebView_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QWebView_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QWebView_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QWebView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebView_createWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QWebView_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QWebView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QWebView_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QWebView_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QWebView_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QWebView_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QWebView_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QWebView_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QWebView_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebView_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebView_findText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QWebView_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QWebView_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebView_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QWebView_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QWebView_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QWebView_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forward), meth_QWebView_forward, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QWebView_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebView_history, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebView_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QWebView_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebView_inputMethodQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebView_isModified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QWebView_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QWebView_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QWebView_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QWebView_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QWebView_load, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QWebView_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QWebView_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QWebView_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QWebView_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QWebView_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QWebView_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebView_page, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QWebView_pageAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QWebView_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QWebView_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_print), (PyCFunction)meth_QWebView_print, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_print_), meth_QWebView_print_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QWebView_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reload), meth_QWebView_reload, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QWebView_renderHints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QWebView_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWebView_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebView_selectedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QWebView_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebView_setContent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebView_setHtml, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWebView_setPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QWebView_setRenderHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QWebView_setRenderHints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextSizeMultiplier), meth_QWebView_setTextSizeMultiplier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebView_setUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebView_setZoomFactor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebView_settings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QWebView_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWebView_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_QWebView_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QWebView_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textSizeMultiplier), meth_QWebView_textSizeMultiplier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QWebView_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebView_title, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QWebView_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebView_url, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QWebView_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QWebView_windowActivationChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebView_zoomFactor, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QWebView[] = {
    {"urlChanged(QUrl)", 0, 0},
    {"iconChanged()", 0, 0},
    {"selectionChanged()", 0, 0},
    {"linkClicked(QUrl)", 0, 0},
    {"statusBarMessage(QString)", 0, 0},
    {"titleChanged(QString)", 0, 0},
    {"loadFinished(bool)", 0, 0},
    {"loadProgress(int)", 0, 0},
    {"loadStarted()", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebView,
        {0}
    },
    {
        sipNameNr_QWebView,
        {0, 0, 1},
        79, methods_QWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebView,
    0,
    init_QWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebView,
    0,
    0,
    0,
    release_QWebView,
    cast_QWebView,
    0,
    0,
    0
},
    &QWebView::staticMetaObject,
    0,
    pyqt4_signals_QWebView
};
