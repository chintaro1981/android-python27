/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:59 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qgraphicswebview.sip"
#include <qgraphicswebview.h>
#line 39 "sipQtWebKitQGraphicsWebView.cpp"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 43 "sipQtWebKitQGraphicsWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtWebKitQGraphicsWebView.cpp"
#line 504 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 522 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "sipQtWebKitQGraphicsWebView.cpp"
#line 372 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "sipQtWebKitQGraphicsWebView.cpp"
#line 198 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 57 "sipQtWebKitQGraphicsWebView.cpp"
#line 115 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 60 "sipQtWebKitQGraphicsWebView.cpp"
#line 344 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "sipQtWebKitQGraphicsWebView.cpp"
#line 88 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 66 "sipQtWebKitQGraphicsWebView.cpp"
#line 145 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 69 "sipQtWebKitQGraphicsWebView.cpp"
#line 58 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 72 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 75 "sipQtWebKitQGraphicsWebView.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78 "sipQtWebKitQGraphicsWebView.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "sipQtWebKitQGraphicsWebView.cpp"
#line 98 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 87 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 611 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 92 "sipQtWebKitQGraphicsWebView.cpp"
#line 1760 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 95 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 98 "sipQtWebKitQGraphicsWebView.cpp"
#line 158 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 101 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 104 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 239 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 246 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 301 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 363 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 380 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 119 "sipQtWebKitQGraphicsWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 122 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 125 "sipQtWebKitQGraphicsWebView.cpp"
#line 72 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 128 "sipQtWebKitQGraphicsWebView.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 131 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 134 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 137 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 140 "sipQtWebKitQGraphicsWebView.cpp"
#line 453 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "sipQtWebKitQGraphicsWebView.cpp"
#line 228 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 146 "sipQtWebKitQGraphicsWebView.cpp"
#line 249 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 149 "sipQtWebKitQGraphicsWebView.cpp"
#line 464 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 152 "sipQtWebKitQGraphicsWebView.cpp"
#line 431 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 155 "sipQtWebKitQGraphicsWebView.cpp"
#line 92 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 158 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 161 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 55 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 166 "sipQtWebKitQGraphicsWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 169 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 172 "sipQtWebKitQGraphicsWebView.cpp"
#line 192 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 175 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 178 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 181 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 184 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 187 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicslayout.sip"
#include <qgraphicslayout.h>
#line 190 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 193 "sipQtWebKitQGraphicsWebView.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 196 "sipQtWebKitQGraphicsWebView.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 199 "sipQtWebKitQGraphicsWebView.cpp"
#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 202 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 205 "sipQtWebKitQGraphicsWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 208 "sipQtWebKitQGraphicsWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 211 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 214 "sipQtWebKitQGraphicsWebView.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 217 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 220 "sipQtWebKitQGraphicsWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 223 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicstransform.sip"
#include <qgraphicstransform.h>
#line 226 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 229 "sipQtWebKitQGraphicsWebView.cpp"
#line 1035 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 232 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 235 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 238 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 241 "sipQtWebKitQGraphicsWebView.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 244 "sipQtWebKitQGraphicsWebView.cpp"
#line 336 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 247 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 250 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 253 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 256 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 259 "sipQtWebKitQGraphicsWebView.cpp"
#line 1000 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 262 "sipQtWebKitQGraphicsWebView.cpp"
#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 265 "sipQtWebKitQGraphicsWebView.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qgraphicslayoutitem.sip"
#include <qgraphicslayoutitem.h>
#line 268 "sipQtWebKitQGraphicsWebView.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 271 "sipQtWebKitQGraphicsWebView.cpp"


class sipQGraphicsWebView : public QGraphicsWebView
{
public:
    sipQGraphicsWebView(QGraphicsItem *);
    virtual ~sipQGraphicsWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_setGraphicsItem(QGraphicsItem *);
    void sipProtect_setOwnedByLayout(bool);
    void sipProtectVirt_hoverEnterEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtect_prepareGeometryChange();
    bool sipProtectVirt_sceneEventFilter(bool,QGraphicsItem *,QEvent *);
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_updateMicroFocus();
    void sipProtectVirt_initStyleOption(bool,QStyleOption *) const;
    bool sipProtectVirt_windowFrameEvent(bool,QEvent *);
    Qt::WindowFrameSection sipProtectVirt_windowFrameSectionAt(bool,const QPointF&) const;
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    void sipProtectVirt_moveEvent(bool,QGraphicsSceneMoveEvent *);
    void sipProtectVirt_polishEvent(bool);
    void sipProtectVirt_resizeEvent(bool,QGraphicsSceneResizeEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_grabMouseEvent(bool,QEvent *);
    void sipProtectVirt_ungrabMouseEvent(bool,QEvent *);
    void sipProtectVirt_grabKeyboardEvent(bool,QEvent *);
    void sipProtectVirt_ungrabKeyboardEvent(bool,QEvent *);
    void sipProtectVirt_mousePressEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_hoverMoveEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtectVirt_hoverLeaveEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtectVirt_wheelEvent(bool,QGraphicsSceneWheelEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QGraphicsSceneContextMenuEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dropEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtectVirt_sceneEvent(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setGeometry(const QRectF&);
    void updateGeometry();
    void paint(QPainter *,const QStyleOptionGraphicsItem *,QWidget *);
    QVariant itemChange(QGraphicsItem::GraphicsItemChange,const QVariant&);
    bool event(QEvent *);
    QSizeF sizeHint(Qt::SizeHint,const QSizeF&) const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void mousePressEvent(QGraphicsSceneMouseEvent *);
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *);
    void mouseReleaseEvent(QGraphicsSceneMouseEvent *);
    void mouseMoveEvent(QGraphicsSceneMouseEvent *);
    void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    void wheelEvent(QGraphicsSceneWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void contextMenuEvent(QGraphicsSceneContextMenuEvent *);
    void dragEnterEvent(QGraphicsSceneDragDropEvent *);
    void dragLeaveEvent(QGraphicsSceneDragDropEvent *);
    void dragMoveEvent(QGraphicsSceneDragDropEvent *);
    void dropEvent(QGraphicsSceneDragDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void inputMethodEvent(QInputMethodEvent *);
    bool focusNextPrevChild(bool);
    bool sceneEvent(QEvent *);
    void getContentsMargins(qreal *,qreal *,qreal *,qreal *) const;
    int type() const;
    void paintWindowFrame(QPainter *,const QStyleOptionGraphicsItem *,QWidget *);
    QRectF boundingRect() const;
    QPainterPath shape() const;
    void initStyleOption(QStyleOption *) const;
    bool windowFrameEvent(QEvent *);
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF&) const;
    void changeEvent(QEvent *);
    void closeEvent(QCloseEvent *);
    void hideEvent(QHideEvent *);
    void moveEvent(QGraphicsSceneMoveEvent *);
    void polishEvent();
    void resizeEvent(QGraphicsSceneResizeEvent *);
    void showEvent(QShowEvent *);
    void grabMouseEvent(QEvent *);
    void ungrabMouseEvent(QEvent *);
    void grabKeyboardEvent(QEvent *);
    void ungrabKeyboardEvent(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    void advance(int);
    bool contains(const QPointF&) const;
    bool collidesWithItem(const QGraphicsItem *,Qt::ItemSelectionMode) const;
    bool collidesWithPath(const QPainterPath&,Qt::ItemSelectionMode) const;
    bool isObscuredBy(const QGraphicsItem *) const;
    QPainterPath opaqueArea() const;
    void hoverEnterEvent(QGraphicsSceneHoverEvent *);
    bool sceneEventFilter(QGraphicsItem *,QEvent *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsWebView(const sipQGraphicsWebView &);
    sipQGraphicsWebView &operator = (const sipQGraphicsWebView &);

    char sipPyMethods[59];
};

sipQGraphicsWebView::sipQGraphicsWebView(QGraphicsItem *a0): QGraphicsWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsWebView::~sipQGraphicsWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsWebView::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QGraphicsWebView);
}

int sipQGraphicsWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QGraphicsWebView,_c,_id,_a);

    return _id;
}

void *sipQGraphicsWebView::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast && sip_QtWebKit_qt_metacast(sipPySelf,sipType_QGraphicsWebView,_clname)) ? this : QGraphicsWebView::qt_metacast(_clname);
}

void sipQGraphicsWebView::setGeometry(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QGraphicsWebView::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_137)(sip_gilstate_t,PyObject *,const QRectF&);

    ((sipVH_QtGui_137)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[137]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::updateGeometry()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_updateGeometry);

    if (!meth)
    {
        QGraphicsWebView::updateGeometry();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQGraphicsWebView::paint(QPainter *a0,const QStyleOptionGraphicsItem *a1,QWidget *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_paint);

    if (!meth)
    {
        QGraphicsWebView::paint(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtGui_196)(sip_gilstate_t,PyObject *,QPainter *,const QStyleOptionGraphicsItem *,QWidget *);

    ((sipVH_QtGui_196)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[196]))(sipGILState,meth,a0,a1,a2);
}

QVariant sipQGraphicsWebView::itemChange(QGraphicsItem::GraphicsItemChange a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_itemChange);

    if (!meth)
        return QGraphicsWebView::itemChange(a0,a1);

    typedef QVariant (*sipVH_QtGui_191)(sip_gilstate_t,PyObject *,QGraphicsItem::GraphicsItemChange,const QVariant&);

    return ((sipVH_QtGui_191)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[191]))(sipGILState,meth,a0,a1);
}

bool sipQGraphicsWebView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QGraphicsWebView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

QSizeF sipQGraphicsWebView::sizeHint(Qt::SizeHint a0,const QSizeF& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QGraphicsWebView::sizeHint(a0,a1);

    typedef QSizeF (*sipVH_QtGui_192)(sip_gilstate_t,PyObject *,Qt::SizeHint,const QSizeF&);

    return ((sipVH_QtGui_192)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[192]))(sipGILState,meth,a0,a1);
}

QVariant sipQGraphicsWebView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QGraphicsWebView::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[12]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::mousePressEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QGraphicsWebView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_200)(sip_gilstate_t,PyObject *,QGraphicsSceneMouseEvent *);

    ((sipVH_QtGui_200)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[200]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QGraphicsWebView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_200)(sip_gilstate_t,PyObject *,QGraphicsSceneMouseEvent *);

    ((sipVH_QtGui_200)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[200]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::mouseReleaseEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QGraphicsWebView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_200)(sip_gilstate_t,PyObject *,QGraphicsSceneMouseEvent *);

    ((sipVH_QtGui_200)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[200]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::mouseMoveEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QGraphicsWebView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_200)(sip_gilstate_t,PyObject *,QGraphicsSceneMouseEvent *);

    ((sipVH_QtGui_200)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[200]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::hoverMoveEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!meth)
    {
        QGraphicsWebView::hoverMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_187)(sip_gilstate_t,PyObject *,QGraphicsSceneHoverEvent *);

    ((sipVH_QtGui_187)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[187]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::hoverLeaveEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!meth)
    {
        QGraphicsWebView::hoverLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_187)(sip_gilstate_t,PyObject *,QGraphicsSceneHoverEvent *);

    ((sipVH_QtGui_187)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[187]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::wheelEvent(QGraphicsSceneWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QGraphicsWebView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_199)(sip_gilstate_t,PyObject *,QGraphicsSceneWheelEvent *);

    ((sipVH_QtGui_199)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[199]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QGraphicsWebView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QGraphicsWebView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,QKeyEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::contextMenuEvent(QGraphicsSceneContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QGraphicsWebView::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_203)(sip_gilstate_t,PyObject *,QGraphicsSceneContextMenuEvent *);

    ((sipVH_QtGui_203)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[203]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::dragEnterEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QGraphicsWebView::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_202)(sip_gilstate_t,PyObject *,QGraphicsSceneDragDropEvent *);

    ((sipVH_QtGui_202)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[202]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::dragLeaveEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QGraphicsWebView::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_202)(sip_gilstate_t,PyObject *,QGraphicsSceneDragDropEvent *);

    ((sipVH_QtGui_202)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[202]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::dragMoveEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QGraphicsWebView::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_202)(sip_gilstate_t,PyObject *,QGraphicsSceneDragDropEvent *);

    ((sipVH_QtGui_202)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[202]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::dropEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QGraphicsWebView::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_202)(sip_gilstate_t,PyObject *,QGraphicsSceneDragDropEvent *);

    ((sipVH_QtGui_202)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[202]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QGraphicsWebView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QGraphicsWebView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,QFocusEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QGraphicsWebView::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,QInputMethodEvent *);

    ((sipVH_QtGui_13)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[13]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QGraphicsWebView::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[11]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::sceneEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_sceneEvent);

    if (!meth)
        return QGraphicsWebView::sceneEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::getContentsMargins(qreal *a0,qreal *a1,qreal *a2,qreal *a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_getContentsMargins);

    if (!meth)
    {
        QGraphicsWidget::getContentsMargins(a0,a1,a2,a3);
        return;
    }

    typedef void (*sipVH_QtGui_197)(sip_gilstate_t,PyObject *,qreal *,qreal *,qreal *,qreal *);

    ((sipVH_QtGui_197)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[197]))(sipGILState,meth,a0,a1,a2,a3);
}

int sipQGraphicsWebView::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_type);

    if (!meth)
        return QGraphicsWidget::type();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[6]))(sipGILState,meth);
}

void sipQGraphicsWebView::paintWindowFrame(QPainter *a0,const QStyleOptionGraphicsItem *a1,QWidget *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_paintWindowFrame);

    if (!meth)
    {
        QGraphicsWidget::paintWindowFrame(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtGui_196)(sip_gilstate_t,PyObject *,QPainter *,const QStyleOptionGraphicsItem *,QWidget *);

    ((sipVH_QtGui_196)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[196]))(sipGILState,meth,a0,a1,a2);
}

QRectF sipQGraphicsWebView::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_boundingRect);

    if (!meth)
        return QGraphicsWidget::boundingRect();

    typedef QRectF (*sipVH_QtGui_195)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_195)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[195]))(sipGILState,meth);
}

QPainterPath sipQGraphicsWebView::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_shape);

    if (!meth)
        return QGraphicsWidget::shape();

    typedef QPainterPath (*sipVH_QtGui_194)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_194)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[194]))(sipGILState,meth);
}

void sipQGraphicsWebView::initStyleOption(QStyleOption *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_initStyleOption);

    if (!meth)
    {
        QGraphicsWidget::initStyleOption(a0);
        return;
    }

    typedef void (*sipVH_QtGui_193)(sip_gilstate_t,PyObject *,QStyleOption *);

    ((sipVH_QtGui_193)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[193]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::windowFrameEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_windowFrameEvent);

    if (!meth)
        return QGraphicsWidget::windowFrameEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

Qt::WindowFrameSection sipQGraphicsWebView::windowFrameSectionAt(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_windowFrameSectionAt);

    if (!meth)
        return QGraphicsWidget::windowFrameSectionAt(a0);

    typedef Qt::WindowFrameSection (*sipVH_QtGui_190)(sip_gilstate_t,PyObject *,const QPointF&);

    return ((sipVH_QtGui_190)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[190]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QGraphicsWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QGraphicsWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,QCloseEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[22]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QGraphicsWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,QHideEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[1]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::moveEvent(QGraphicsSceneMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QGraphicsWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_189)(sip_gilstate_t,PyObject *,QGraphicsSceneMoveEvent *);

    ((sipVH_QtGui_189)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[189]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::polishEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_polishEvent);

    if (!meth)
    {
        QGraphicsWidget::polishEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

void sipQGraphicsWebView::resizeEvent(QGraphicsSceneResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QGraphicsWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_188)(sip_gilstate_t,PyObject *,QGraphicsSceneResizeEvent *);

    ((sipVH_QtGui_188)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[188]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QGraphicsWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,QShowEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[2]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::grabMouseEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_grabMouseEvent);

    if (!meth)
    {
        QGraphicsWidget::grabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::ungrabMouseEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_ungrabMouseEvent);

    if (!meth)
    {
        QGraphicsWidget::ungrabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::grabKeyboardEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_grabKeyboardEvent);

    if (!meth)
    {
        QGraphicsWidget::grabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::ungrabKeyboardEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_ungrabKeyboardEvent);

    if (!meth)
    {
        QGraphicsWidget::ungrabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsWebView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQGraphicsWebView::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_advance);

    if (!meth)
    {
        QGraphicsItem::advance(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t,PyObject *,int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[4]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_contains);

    if (!meth)
        return QGraphicsItem::contains(a0);

    typedef bool (*sipVH_QtGui_207)(sip_gilstate_t,PyObject *,const QPointF&);

    return ((sipVH_QtGui_207)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[207]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::collidesWithItem(const QGraphicsItem *a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!meth)
        return QGraphicsItem::collidesWithItem(a0,a1);

    typedef bool (*sipVH_QtGui_210)(sip_gilstate_t,PyObject *,const QGraphicsItem *,Qt::ItemSelectionMode);

    return ((sipVH_QtGui_210)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[210]))(sipGILState,meth,a0,a1);
}

bool sipQGraphicsWebView::collidesWithPath(const QPainterPath& a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!meth)
        return QGraphicsItem::collidesWithPath(a0,a1);

    typedef bool (*sipVH_QtGui_209)(sip_gilstate_t,PyObject *,const QPainterPath&,Qt::ItemSelectionMode);

    return ((sipVH_QtGui_209)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[209]))(sipGILState,meth,a0,a1);
}

bool sipQGraphicsWebView::isObscuredBy(const QGraphicsItem *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!meth)
        return QGraphicsItem::isObscuredBy(a0);

    typedef bool (*sipVH_QtGui_206)(sip_gilstate_t,PyObject *,const QGraphicsItem *);

    return ((sipVH_QtGui_206)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[206]))(sipGILState,meth,a0);
}

QPainterPath sipQGraphicsWebView::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_opaqueArea);

    if (!meth)
        return QGraphicsItem::opaqueArea();

    typedef QPainterPath (*sipVH_QtGui_194)(sip_gilstate_t,PyObject *);

    return ((sipVH_QtGui_194)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[194]))(sipGILState,meth);
}

void sipQGraphicsWebView::hoverEnterEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!meth)
    {
        QGraphicsItem::hoverEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_187)(sip_gilstate_t,PyObject *,QGraphicsSceneHoverEvent *);

    ((sipVH_QtGui_187)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[187]))(sipGILState,meth,a0);
}

bool sipQGraphicsWebView::sceneEventFilter(QGraphicsItem *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!meth)
        return QGraphicsItem::sceneEventFilter(a0,a1);

    typedef bool (*sipVH_QtGui_208)(sip_gilstate_t,PyObject *,QGraphicsItem *,QEvent *);

    return ((sipVH_QtGui_208)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[208]))(sipGILState,meth,a0,a1);
}

void sipQGraphicsWebView::sipProtect_setGraphicsItem(QGraphicsItem *a0)
{
    QGraphicsLayoutItem::setGraphicsItem(a0);
}

void sipQGraphicsWebView::sipProtect_setOwnedByLayout(bool a0)
{
    QGraphicsLayoutItem::setOwnedByLayout(a0);
}

void sipQGraphicsWebView::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQGraphicsWebView::sipProtect_prepareGeometryChange()
{
    QGraphicsItem::prepareGeometryChange();
}

bool sipQGraphicsWebView::sipProtectVirt_sceneEventFilter(bool sipSelfWasArg,QGraphicsItem *a0,QEvent *a1)
{
    return (sipSelfWasArg ? QGraphicsItem::sceneEventFilter(a0,a1) : sceneEventFilter(a0,a1));
}

QObject * sipQGraphicsWebView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGraphicsWebView::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsWebView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsWebView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQGraphicsWebView::sipProtect_updateMicroFocus()
{
    QGraphicsObject::updateMicroFocus();
}

void sipQGraphicsWebView::sipProtectVirt_initStyleOption(bool sipSelfWasArg,QStyleOption *a0) const
{
    (sipSelfWasArg ? QGraphicsWidget::initStyleOption(a0) : initStyleOption(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_windowFrameEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameEvent(a0) : windowFrameEvent(a0));
}

Qt::WindowFrameSection sipQGraphicsWebView::sipProtectVirt_windowFrameSectionAt(bool sipSelfWasArg,const QPointF& a0) const
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameSectionAt(a0) : windowFrameSectionAt(a0));
}

void sipQGraphicsWebView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::changeEvent(a0) : changeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QGraphicsSceneMoveEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_polishEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QGraphicsWidget::polishEvent() : polishEvent());
}

void sipQGraphicsWebView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QGraphicsSceneResizeEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::showEvent(a0) : showEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_grabMouseEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabMouseEvent(a0) : grabMouseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_ungrabMouseEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabMouseEvent(a0) : ungrabMouseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_grabKeyboardEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabKeyboardEvent(a0) : grabKeyboardEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_ungrabKeyboardEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabKeyboardEvent(a0) : ungrabKeyboardEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QGraphicsSceneWheelEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::wheelEvent(a0) : wheelEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QGraphicsSceneContextMenuEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dropEvent(a0) : dropEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWebView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QGraphicsWebView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_sceneEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QGraphicsWebView::sceneEvent(a0) : sceneEvent(a0));
}


extern "C" {static PyObject *meth_QGraphicsWebView_setGraphicsItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setGraphicsItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setGraphicsItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setGraphicsItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setOwnedByLayout(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setOwnedByLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setOwnedByLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setOwnedByLayout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_hoverEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_prepareGeometryChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_prepareGeometryChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_prepareGeometryChange();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_prepareGeometryChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_sceneEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sceneEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem * a0;
        QEvent * a1;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sceneEventFilter(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sceneEventFilter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_sender(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 1843 "sipQtWebKitQGraphicsWebView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_receivers(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 1885 "sipQtWebKitQGraphicsWebView.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_updateMicroFocus, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyleOption * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QStyleOption, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_initStyleOption(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_initStyleOption, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_windowFrameEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_windowFrameEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_windowFrameEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_windowFrameEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_windowFrameSectionAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_windowFrameSectionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPointF, &a0))
        {
            Qt::WindowFrameSection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_windowFrameSectionAt(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowFrameSection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_windowFrameSectionAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_changeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_closeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hideEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMoveEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_moveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_polishEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_polishEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_polishEvent(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_polishEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneResizeEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_resizeEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_showEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_grabMouseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_grabMouseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_grabMouseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_grabMouseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_ungrabMouseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_ungrabMouseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_ungrabMouseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_ungrabMouseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_grabKeyboardEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_grabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_grabKeyboardEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_grabKeyboardEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_ungrabKeyboardEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_ungrabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_ungrabKeyboardEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_ungrabKeyboardEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebPage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_page, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage * a0;
        PyObject *a0Keep;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setPage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_url, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setUrl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_title, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_zoomFactor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setZoomFactor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isModified, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl * a0;
        QGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const QByteArray& a2def = QByteArray();
        const QByteArray * a2 = &a2def;
        int a2State = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl * a1 = &a1def;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setHtml, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl * a2 = &a2def;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setContent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebHistory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_history, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebSettings *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_settings, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_pageAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggerPageAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_triggerPageAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags * a1 = &a1def;
        int a1State = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_findText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setGeometry, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::updateGeometry() : sipCpp->updateGeometry());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_updateGeometry, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_paint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_paint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionGraphicsItem * a1;
        QWidget * a2 = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8|J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionGraphicsItem, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::paint(a0,a1,a2) : sipCpp->paint(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_paint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem::GraphicsItemChange a0;
        const QVariant * a1;
        int a1State = 0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem_GraphicsItemChange, &a0, sipType_QVariant,&a1, &a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsWebView::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_itemChange, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsWebView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_event, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::SizeHint a0;
        const QSizeF * a1;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_SizeHint, &a0, sipType_QSizeF, &a1))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF((sipSelfWasArg ? sipCpp->QGraphicsWebView::sizeHint(a0,*a1) : sipCpp->sizeHint(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sizeHint, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_stop, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_back, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_forward, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reload();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_reload, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mousePressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseDoubleClickEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneWheelEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_wheelEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyPressEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyReleaseEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneContextMenuEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_contextMenuEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragEnterEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragLeaveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragMoveEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dropEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusInEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusOutEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusNextPrevChild, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sceneEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sceneEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizesToContents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_resizesToContents, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizesToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setResizesToContents, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTiledBackingStoreFrozen();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isTiledBackingStoreFrozen, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frozen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTiledBackingStoreFrozen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setTiledBackingStoreFrozen, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsWebView(void *, const sipTypeDef *);}
static void *cast_QGraphicsWebView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsWebView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsWidget)->ctd_cast((QGraphicsWidget *)(QGraphicsWebView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsWebView(void *, int);}
static void release_QGraphicsWebView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsWebView *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsWebView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsWebView(sipSimpleWrapper *);}
static void dealloc_QGraphicsWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsWebView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QGraphicsWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsWebView *sipCpp = 0;

    {
        QGraphicsItem * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QGraphicsItem, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsWebView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsWebView[] = {{214, 2, 1}};


static PyMethodDef methods_QGraphicsWebView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QGraphicsWebView_back, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QGraphicsWebView_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QGraphicsWebView_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QGraphicsWebView_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QGraphicsWebView_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QGraphicsWebView_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QGraphicsWebView_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QGraphicsWebView_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QGraphicsWebView_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QGraphicsWebView_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QGraphicsWebView_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QGraphicsWebView_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QGraphicsWebView_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QGraphicsWebView_findText, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QGraphicsWebView_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QGraphicsWebView_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QGraphicsWebView_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forward), meth_QGraphicsWebView_forward, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabKeyboardEvent), meth_QGraphicsWebView_grabKeyboardEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabMouseEvent), meth_QGraphicsWebView_grabMouseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QGraphicsWebView_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_history), meth_QGraphicsWebView_history, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), meth_QGraphicsWebView_hoverEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), meth_QGraphicsWebView_hoverLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), meth_QGraphicsWebView_hoverMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QGraphicsWebView_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QGraphicsWebView_initStyleOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QGraphicsWebView_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsWebView_inputMethodQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QGraphicsWebView_isModified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTiledBackingStoreFrozen), meth_QGraphicsWebView_isTiledBackingStoreFrozen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QGraphicsWebView_itemChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QGraphicsWebView_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QGraphicsWebView_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QGraphicsWebView_load, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QGraphicsWebView_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QGraphicsWebView_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QGraphicsWebView_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QGraphicsWebView_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QGraphicsWebView_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_page), meth_QGraphicsWebView_page, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QGraphicsWebView_pageAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paint), (PyCFunction)meth_QGraphicsWebView_paint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_polishEvent), meth_QGraphicsWebView_polishEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepareGeometryChange), meth_QGraphicsWebView_prepareGeometryChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QGraphicsWebView_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reload), meth_QGraphicsWebView_reload, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QGraphicsWebView_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizesToContents), meth_QGraphicsWebView_resizesToContents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sceneEvent), meth_QGraphicsWebView_sceneEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sceneEventFilter), meth_QGraphicsWebView_sceneEventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QGraphicsWebView_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QGraphicsWebView_setContent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QGraphicsWebView_setGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGraphicsItem), meth_QGraphicsWebView_setGraphicsItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QGraphicsWebView_setHtml, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setOwnedByLayout), meth_QGraphicsWebView_setOwnedByLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QGraphicsWebView_setPage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setResizesToContents), (PyCFunction)meth_QGraphicsWebView_setResizesToContents, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setTiledBackingStoreFrozen), (PyCFunction)meth_QGraphicsWebView_setTiledBackingStoreFrozen, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QGraphicsWebView_setUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QGraphicsWebView_setZoomFactor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_settings), meth_QGraphicsWebView_settings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QGraphicsWebView_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsWebView_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_QGraphicsWebView_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QGraphicsWebView_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QGraphicsWebView_title, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QGraphicsWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ungrabKeyboardEvent), meth_QGraphicsWebView_ungrabKeyboardEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ungrabMouseEvent), meth_QGraphicsWebView_ungrabMouseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometry), meth_QGraphicsWebView_updateGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QGraphicsWebView_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QGraphicsWebView_url, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QGraphicsWebView_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameEvent), meth_QGraphicsWebView_windowFrameEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameSectionAt), meth_QGraphicsWebView_windowFrameSectionAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QGraphicsWebView_zoomFactor, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QGraphicsWebView[] = {
    {"linkClicked(QUrl)", 0, 0},
    {"statusBarMessage(QString)", 0, 0},
    {"iconChanged()", 0, 0},
    {"titleChanged(QString)", 0, 0},
    {"urlChanged(QUrl)", 0, 0},
    {"loadProgress(int)", 0, 0},
    {"loadFinished(bool)", 0, 0},
    {"loadStarted()", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QGraphicsWebView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsWebView,
        {0}
    },
    {
        sipNameNr_QGraphicsWebView,
        {0, 0, 1},
        78, methods_QGraphicsWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGraphicsWebView,
    0,
    init_QGraphicsWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsWebView,
    0,
    0,
    0,
    release_QGraphicsWebView,
    cast_QGraphicsWebView,
    0,
    0,
    0
},
    &QGraphicsWebView::staticMetaObject,
    0,
    pyqt4_signals_QGraphicsWebView
};
