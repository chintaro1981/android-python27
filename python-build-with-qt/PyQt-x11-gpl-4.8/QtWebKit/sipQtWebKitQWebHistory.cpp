/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:59 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 72 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 39 "sipQtWebKitQWebHistory.cpp"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 43 "sipQtWebKitQWebHistory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "sipQtWebKitQWebHistory.cpp"


extern "C" {static PyObject *meth_QWebHistory_clear(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_clear, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_items(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_items(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            QList<QWebHistoryItem> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebHistoryItem>(sipCpp->items());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_items, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_backItems(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_backItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebHistory, &sipCpp, &a0))
        {
            QList<QWebHistoryItem> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebHistoryItem>(sipCpp->backItems(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_backItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_forwardItems(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_forwardItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebHistory, &sipCpp, &a0))
        {
            QList<QWebHistoryItem> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebHistoryItem>(sipCpp->forwardItems(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_forwardItems, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_canGoBack(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_canGoBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canGoBack();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_canGoBack, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_canGoForward(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_canGoForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canGoForward();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_canGoForward, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_back(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_back, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_forward(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_forward, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_goToItem(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_goToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHistoryItem * a0;
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebHistory, &sipCpp, sipType_QWebHistoryItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->goToItem(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_goToItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_backItem(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_backItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            QWebHistoryItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebHistoryItem(sipCpp->backItem());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_backItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            QWebHistoryItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebHistoryItem(sipCpp->currentItem());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_currentItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_forwardItem(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_forwardItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            QWebHistoryItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebHistoryItem(sipCpp->forwardItem());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_forwardItem, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebHistory, &sipCpp, &a0))
        {
            QWebHistoryItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebHistoryItem(sipCpp->itemAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHistoryItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_itemAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_count(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_currentItemIndex(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_currentItemIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentItemIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_currentItemIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_maximumItemCount(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_maximumItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHistory, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximumItemCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_maximumItemCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHistory_setMaximumItemCount(PyObject *, PyObject *);}
static PyObject *meth_QWebHistory_setMaximumItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebHistory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebHistory, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumItemCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHistory, sipName_setMaximumItemCount, NULL);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QWebHistory___len__(PyObject *);}
static SIP_SSIZE_T slot_QWebHistory___len__(PyObject *sipSelf)
{
    QWebHistory *sipCpp = reinterpret_cast<QWebHistory *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebHistory));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 523 "sipQtWebKitQWebHistory.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebHistory(void *, const sipTypeDef *);}
static void *cast_QWebHistory(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebHistory)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebHistory(void *, int);}
static void release_QWebHistory(void *,int)
{
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QWebHistory[] = {
    {(void *)slot_QWebHistory___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QWebHistory[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QWebHistory_back, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backItem), meth_QWebHistory_backItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backItems), meth_QWebHistory_backItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canGoBack), meth_QWebHistory_canGoBack, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canGoForward), meth_QWebHistory_canGoForward, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QWebHistory_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QWebHistory_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QWebHistory_currentItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentItemIndex), meth_QWebHistory_currentItemIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forward), meth_QWebHistory_forward, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forwardItem), meth_QWebHistory_forwardItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forwardItems), meth_QWebHistory_forwardItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_goToItem), meth_QWebHistory_goToItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QWebHistory_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_items), meth_QWebHistory_items, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumItemCount), meth_QWebHistory_maximumItemCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaximumItemCount), meth_QWebHistory_setMaximumItemCount, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebHistory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebHistory,
        {0}
    },
    {
        sipNameNr_QWebHistory,
        {0, 0, 1},
        17, methods_QWebHistory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QWebHistory,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebHistory,
    cast_QWebHistory,
    0,
    0,
    0
},
    0,
    0,
    0
};
