/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:59 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 239 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 246 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 301 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 363 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 380 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 51 "sipQtWebKitQWebPageErrorPageExtensionOption.cpp"

#line 44 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 239 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 246 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 301 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 363 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 380 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 67 "sipQtWebKitQWebPageErrorPageExtensionOption.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 70 "sipQtWebKitQWebPageErrorPageExtensionOption.cpp"
#line 78 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 73 "sipQtWebKitQWebPageErrorPageExtensionOption.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 76 "sipQtWebKitQWebPageErrorPageExtensionOption.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPage_ErrorPageExtensionOption(void *, const sipTypeDef *);}
static void *cast_QWebPage_ErrorPageExtensionOption(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPage_ErrorPageExtensionOption)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWebPage_ExtensionOption)->ctd_cast((QWebPage::ExtensionOption *)(QWebPage::ErrorPageExtensionOption *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPage_ErrorPageExtensionOption(void *, int);}
static void release_QWebPage_ErrorPageExtensionOption(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QWebPage_ErrorPageExtensionOption(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebPage_ErrorPageExtensionOption(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebPage::ErrorPageExtensionOption *>(sipSrc);
}


extern "C" {static void *array_QWebPage_ErrorPageExtensionOption(SIP_SSIZE_T);}
static void *array_QWebPage_ErrorPageExtensionOption(SIP_SSIZE_T sipNrElem)
{
    return new QWebPage::ErrorPageExtensionOption[sipNrElem];
}


extern "C" {static void *copy_QWebPage_ErrorPageExtensionOption(const void *, SIP_SSIZE_T);}
static void *copy_QWebPage_ErrorPageExtensionOption(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebPage::ErrorPageExtensionOption(reinterpret_cast<const QWebPage::ErrorPageExtensionOption *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebPage_ErrorPageExtensionOption(sipSimpleWrapper *);}
static void dealloc_QWebPage_ErrorPageExtensionOption(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPage_ErrorPageExtensionOption(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_QWebPage_ErrorPageExtensionOption(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QWebPage_ErrorPageExtensionOption(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebPage::ErrorPageExtensionOption *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QWebPage::ErrorPageExtensionOption();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QWebPage::ErrorPageExtensionOption * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebPage_ErrorPageExtensionOption, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QWebPage::ErrorPageExtensionOption(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPage_ErrorPageExtensionOption[] = {{27, 255, 1}};


extern "C" {static PyObject *varget_QWebPage_ErrorPageExtensionOption_domain(void *, PyObject *);}
static PyObject *varget_QWebPage_ErrorPageExtensionOption_domain(void *sipSelf, PyObject *)
{
    QWebPage::ErrorDomain sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = sipCpp->domain;

    return sipConvertFromEnum(sipVal, sipType_QWebPage_ErrorDomain);
}


extern "C" {static int varset_QWebPage_ErrorPageExtensionOption_domain(void *, PyObject *, PyObject *);}
static int varset_QWebPage_ErrorPageExtensionOption_domain(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QWebPage::ErrorDomain sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = (QWebPage::ErrorDomain)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->domain = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QWebPage_ErrorPageExtensionOption_error(void *, PyObject *);}
static PyObject *varget_QWebPage_ErrorPageExtensionOption_error(void *sipSelf, PyObject *)
{
    int sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = sipCpp->error;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QWebPage_ErrorPageExtensionOption_error(void *, PyObject *, PyObject *);}
static int varset_QWebPage_ErrorPageExtensionOption_error(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->error = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QWebPage_ErrorPageExtensionOption_errorString(void *, PyObject *);}
static PyObject *varget_QWebPage_ErrorPageExtensionOption_errorString(void *sipSelf, PyObject *)
{
    QString *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = &sipCpp->errorString;

    return sipConvertFromType(sipVal,sipType_QString, NULL);
}


extern "C" {static int varset_QWebPage_ErrorPageExtensionOption_errorString(void *, PyObject *, PyObject *);}
static int varset_QWebPage_ErrorPageExtensionOption_errorString(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->errorString = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QWebPage_ErrorPageExtensionOption_frame(void *, PyObject *);}
static PyObject *varget_QWebPage_ErrorPageExtensionOption_frame(void *sipSelf, PyObject *)
{
    QWebFrame *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = sipCpp->frame;

    return sipConvertFromType(sipVal,sipType_QWebFrame, NULL);
}


extern "C" {static int varset_QWebPage_ErrorPageExtensionOption_frame(void *, PyObject *, PyObject *);}
static int varset_QWebPage_ErrorPageExtensionOption_frame(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QWebFrame *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<QWebFrame *>(sipForceConvertToType(sipPy,sipType_QWebFrame,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->frame = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QWebPage_ErrorPageExtensionOption_url(void *, PyObject *);}
static PyObject *varget_QWebPage_ErrorPageExtensionOption_url(void *sipSelf, PyObject *)
{
    QUrl *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    sipVal = &sipCpp->url;

    return sipConvertFromType(sipVal,sipType_QUrl, NULL);
}


extern "C" {static int varset_QWebPage_ErrorPageExtensionOption_url(void *, PyObject *, PyObject *);}
static int varset_QWebPage_ErrorPageExtensionOption_url(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QUrl *sipVal;
    QWebPage::ErrorPageExtensionOption *sipCpp = reinterpret_cast<QWebPage::ErrorPageExtensionOption *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<QUrl *>(sipForceConvertToType(sipPy,sipType_QUrl,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->url = *sipVal;

    return 0;
}

sipVariableDef variables_QWebPage_ErrorPageExtensionOption[] = {
    {sipName_domain, varget_QWebPage_ErrorPageExtensionOption_domain, varset_QWebPage_ErrorPageExtensionOption_domain, 0},
    {sipName_error, varget_QWebPage_ErrorPageExtensionOption_error, varset_QWebPage_ErrorPageExtensionOption_error, 0},
    {sipName_errorString, varget_QWebPage_ErrorPageExtensionOption_errorString, varset_QWebPage_ErrorPageExtensionOption_errorString, 0},
    {sipName_frame, varget_QWebPage_ErrorPageExtensionOption_frame, varset_QWebPage_ErrorPageExtensionOption_frame, 0},
    {sipName_url, varget_QWebPage_ErrorPageExtensionOption_url, varset_QWebPage_ErrorPageExtensionOption_url, 0},
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebPage_ErrorPageExtensionOption = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebPage__ErrorPageExtensionOption,
        {0}
    },
    {
        sipNameNr_ErrorPageExtensionOption,
        {20, 255, 0},
        0, 0,
        0, 0,
        5, variables_QWebPage_ErrorPageExtensionOption,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebPage_ErrorPageExtensionOption,
    0,
    init_QWebPage_ErrorPageExtensionOption,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPage_ErrorPageExtensionOption,
    assign_QWebPage_ErrorPageExtensionOption,
    array_QWebPage_ErrorPageExtensionOption,
    copy_QWebPage_ErrorPageExtensionOption,
    release_QWebPage_ErrorPageExtensionOption,
    cast_QWebPage_ErrorPageExtensionOption,
    0,
    0,
    0
},
    0,
    0,
    0
};
