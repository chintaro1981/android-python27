/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.2 on Thu Jul 12 20:03:59 2012
 *
 * Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 45 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 62 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 83 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 90 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 47 "sipQtWebKitQWebPluginFactory.cpp"

#line 39 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "sipQtWebKitQWebPluginFactory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 45 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 62 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 83 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 90 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 62 "sipQtWebKitQWebPluginFactory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 45 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 62 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 83 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 90 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 73 "sipQtWebKitQWebPluginFactory.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76 "sipQtWebKitQWebPluginFactory.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 79 "sipQtWebKitQWebPluginFactory.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 82 "sipQtWebKitQWebPluginFactory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtWebKitQWebPluginFactory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 45 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 62 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 83 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 90 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 96 "sipQtWebKitQWebPluginFactory.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "sipQtWebKitQWebPluginFactory.cpp"
#line 315 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "sipQtWebKitQWebPluginFactory.cpp"
#line 303 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "sipQtWebKitQWebPluginFactory.cpp"
#line 41 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 108 "sipQtWebKitQWebPluginFactory.cpp"
#line 38 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 111 "sipQtWebKitQWebPluginFactory.cpp"
#line 42 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 114 "sipQtWebKitQWebPluginFactory.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "sipQtWebKitQWebPluginFactory.cpp"
#line 125 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 120 "sipQtWebKitQWebPluginFactory.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 123 "sipQtWebKitQWebPluginFactory.cpp"
#line 40 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 126 "sipQtWebKitQWebPluginFactory.cpp"
#line 36 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 129 "sipQtWebKitQWebPluginFactory.cpp"


class sipQWebPluginFactory : public QWebPluginFactory
{
public:
    sipQWebPluginFactory(QObject *);
    virtual ~sipQWebPluginFactory();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QList<QWebPluginFactory::Plugin> plugins() const;
    void refreshPlugins();
    QObject * create(const QString&,const QUrl&,const QStringList&,const QStringList&) const;
    bool extension(QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption *,QWebPluginFactory::ExtensionReturn *);
    bool supportsExtension(QWebPluginFactory::Extension) const;
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPluginFactory(const sipQWebPluginFactory &);
    sipQWebPluginFactory &operator = (const sipQWebPluginFactory &);

    char sipPyMethods[12];
};

sipQWebPluginFactory::sipQWebPluginFactory(QObject *a0): QWebPluginFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPluginFactory::~sipQWebPluginFactory()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPluginFactory::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPluginFactory);
}

int sipQWebPluginFactory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebPluginFactory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPluginFactory,_c,_id,_a);

    return _id;
}

void *sipQWebPluginFactory::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast && sip_QtWebKit_qt_metacast(sipPySelf,sipType_QWebPluginFactory,_clname)) ? this : QWebPluginFactory::qt_metacast(_clname);
}

QList<QWebPluginFactory::Plugin> sipQWebPluginFactory::plugins() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QWebPluginFactory,sipName_plugins);

    if (!meth)
        return QList<QWebPluginFactory::Plugin>();

    extern QList<QWebPluginFactory::Plugin> sipVH_QtWebKit_4(sip_gilstate_t,PyObject *);

    return sipVH_QtWebKit_4(sipGILState,meth);
}

void sipQWebPluginFactory::refreshPlugins()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_refreshPlugins);

    if (!meth)
    {
        QWebPluginFactory::refreshPlugins();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t,PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState,meth);
}

QObject * sipQWebPluginFactory::create(const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QWebPluginFactory,sipName_create);

    if (!meth)
        return 0;

    extern QObject * sipVH_QtWebKit_3(sip_gilstate_t,PyObject *,const QString&,const QUrl&,const QStringList&,const QStringList&);

    return sipVH_QtWebKit_3(sipGILState,meth,a0,a1,a2,a3);
}

bool sipQWebPluginFactory::extension(QWebPluginFactory::Extension a0,const QWebPluginFactory::ExtensionOption *a1,QWebPluginFactory::ExtensionReturn *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_extension);

    if (!meth)
        return QWebPluginFactory::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_2(sip_gilstate_t,PyObject *,QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption *,QWebPluginFactory::ExtensionReturn *);

    return sipVH_QtWebKit_2(sipGILState,meth,a0,a1,a2);
}

bool sipQWebPluginFactory::supportsExtension(QWebPluginFactory::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_supportsExtension);

    if (!meth)
        return QWebPluginFactory::supportsExtension(a0);

    extern bool sipVH_QtWebKit_1(sip_gilstate_t,PyObject *,QWebPluginFactory::Extension);

    return sipVH_QtWebKit_1(sipGILState,meth,a0);
}

bool sipQWebPluginFactory::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipQWebPluginFactory::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipQWebPluginFactory::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipQWebPluginFactory::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipQWebPluginFactory::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipQWebPluginFactory::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipQWebPluginFactory::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipQWebPluginFactory::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebPluginFactory::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQWebPluginFactory::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebPluginFactory::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QWebPluginFactory_sender(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 472 "sipQtWebKitQWebPluginFactory.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_receivers(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebPluginFactory, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/home/tsheasha/GUC/Bachelors/android-python27/python-build/PyQt-x11-gpl-4.8/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 514 "sipQtWebKitQWebPluginFactory.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebPluginFactory, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_QWebPluginFactory, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_plugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_plugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QList<QWebPluginFactory::Plugin> *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_plugins);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebPluginFactory::Plugin>(sipCpp->plugins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebPluginFactory_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_plugins, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebPluginFactory::refreshPlugins() : sipCpp->refreshPlugins());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_refreshPlugins, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_create(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        const QUrl * a1;
        const QStringList * a2;
        int a2State = 0;
        const QStringList * a3;
        int a3State = 0;
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1J1", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
            QObject *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_create);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->create(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_create, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        const QWebPluginFactory::ExtensionOption * a1 = 0;
        QWebPluginFactory::ExtensionReturn * a2 = 0;
        QWebPluginFactory *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0, sipType_QWebPluginFactory_ExtensionOption, &a1, sipType_QWebPluginFactory_ExtensionReturn, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_extension, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_supportsExtension, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPluginFactory(void *, const sipTypeDef *);}
static void *cast_QWebPluginFactory(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPluginFactory)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebPluginFactory *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPluginFactory(void *, int);}
static void release_QWebPluginFactory(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWebPluginFactory *>(sipCppV);
    else
        delete reinterpret_cast<QWebPluginFactory *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebPluginFactory(sipSimpleWrapper *);}
static void dealloc_QWebPluginFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebPluginFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPluginFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_QWebPluginFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_QWebPluginFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPluginFactory *sipCpp = 0;

    {
        QObject * a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebPluginFactory(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPluginFactory[] = {{133, 0, 1}};


static PyMethodDef methods_QWebPluginFactory[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QWebPluginFactory_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QWebPluginFactory_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QWebPluginFactory_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QWebPluginFactory_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QWebPluginFactory_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPluginFactory_extension, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_plugins), meth_QWebPluginFactory_plugins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QWebPluginFactory_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_refreshPlugins), meth_QWebPluginFactory_refreshPlugins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_QWebPluginFactory_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPluginFactory_supportsExtension, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QWebPluginFactory_timerEvent, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebPluginFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebPluginFactory,
        {0}
    },
    {
        sipNameNr_QWebPluginFactory,
        {0, 0, 1},
        12, methods_QWebPluginFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebPluginFactory,
    0,
    init_QWebPluginFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPluginFactory,
    0,
    0,
    0,
    release_QWebPluginFactory,
    cast_QWebPluginFactory,
    0,
    0,
    0
},
    &QWebPluginFactory::staticMetaObject,
    0,
    0
};
